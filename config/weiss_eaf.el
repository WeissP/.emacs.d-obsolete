(use-package eaf
  :ensure nil
  :load-path "/home/weiss/.emacs.d/emacs-application-framework"
  :bind
  (
   :map eaf-mode-map
        ("M-c" . eaf-get-path-or-url)
        ("M-w" . hydra-resize-window/body)
        )
  :config
  (setq eaf-browser-keybinding
        '(

          ("-" . "zoom_out")
          ;; ("0" . "xah-next-window-or-frame")
          ("1" . "scroll_down_page")
          ("2" . "scroll_up_page")
          ;; ("3" . "delete-other-windows")
          ;; ("4" . "split-window-below")
          ("<C-return>" . "eaf-send-ctrl-return-sequence")
          ("<f12>" . "open_dev_tool_page")
          ("<f5>" . "refresh_page")
          ("=" . "zoom_in")
          ("C--" . "zoom_out")
          ("C-/" . "undo_action")
          ("C-0" . "zoom_reset")
          ("C-=" . "zoom_in")
          ("C-M-n" . "weiss_get_html")
          ("C-M-o" . "weiss_open_link_without_enter")
          ("C-M-p" . "get_link_markers")
          ("C-M-q" . "clear_history")
          ("C-a" . "select_all_or_input_text")
          ("C-b" . "scroll_left")
          ;; ("C-f" . "toggle-input-method")
          ("C-n" . "scroll_up")
          ("C-p" . "scroll_down")
          ("C-r" . "search_text_backward")
          ("C-s" . "search_text_forward")
          ("C-v" . "yank_text")
          ("C-w" . "kill_text")
          ("C-y" . "yank_text")
          ("C" . "insert_or_copy_code") 
          ("D" . "open_link_background_buffer")
          ;; ("F" . "weiss-open-link-background-without-enter")
          ("G" . "scroll_to_bottom")
          ("H" . "history_backward")
          ("J" . "goto_left_tab")
          ("K" . "goto_right_tab")
          ("L" . "history_forward")
          ("M-," . "eaf-send-down-key")
          ("M-." . "eaf-send-up-key")
          ("M-<" . "scroll_to_begin")
          ("M->" . "scroll_to_bottom")
          ("M-O" . "eval_js_file")
          ("M-S" . "open_link_new_buffer")
          ("M-_" . "redo_action")
          ("M-b" . "history_backward")
          ("M-d" . "open_link_background_buffer")
          ("M-e" . "edit_focus_text")
          ("M-f" . "history_forward")
          ("M-g" . "exit_fullscreen")
          ("M-i" . "open_download_manage_page")
          ("M-m" . "eaf-send-return-key")
          ("M-o" . "eval_js")
          ("M-q" . "clear_all_cookies")
          ("M-s" . "open_link")
          ("M-t" . "new_blank_page")
          ("M-u" . "clear_focus")
          ("M-v" . "scroll_down_page")
          ;; ("M-w" . "copy_text")
          ("S" . "save_as_pdf")
          ;; ("SPC" . "xah-fly-leader-key-map")
          ("T" . "recover_prev_close_page")
          ("Y" . "download_youtube_audio")
          ;; ("a" . "weiss-open-link-new-buffer-without-enter")
          ("c" . "copy_text")
          ("d" . "scroll_up_page")
          ("e" . "scroll_down_page")
          ;; ("f" . "weiss-open-link-current-without-enter")
          ("g" . "scroll_to_begin")
          ("h" . "scroll_left")
          ;; ("i" . "weiss-eaf-insert-multi-lines")
          ("j" . "scroll_up")
          ("k" . "scroll_down")
          ("l" . "scroll_right")
          ;; ("m" . "weiss-eaf-bookmark-set")
          ("o" . "open_url")
          ("p" . "toggle_device")
          ;; ("q" . "weiss-get-and-search")          
          ;; ("r" . "snails-eaf-backends")
          ;; ("s" . "snails-normal-backends")
          ("t" . "recover_prev_close_page")
          ("u" . "scroll_down_page")
          ("v" . "view_source")
          ("w" . "history_backward")
          ("x" . "close_buffer")
          ("y" . "download_youtube_video")
          )
        )

  (eaf-setq eaf-marker-letters "QWERASDFGZXCVB")

  ;; (setq browse-url-browser-function 'eaf-open-browser)
  ;; (defalias 'browse-web #'eaf-open-browser)

  (defun weiss-eaf-insert-multi-lines ()
    (interactive)
    (eaf-proxy-edit_focus_text)
    (make-local-variable 'shiftless-upper-rules)
    (shiftless-Umlaut))

  (defun weiss-eaf-edit-buffer-confirm ()
    (interactive)
    (eaf-edit-buffer-confirm)
    ;; (sleep-for 0.5)
    (eaf-call "send_key" eaf--buffer-id "TAB"))

  (defun weiss-eaf-insert-single-line ()
    "insert single line with paste"
    (interactive)
    (kill-new (read-string "Input: "))
    (eaf-proxy-yank_text)
    ;; (eaf-call "send_key" eaf--buffer-id "RET")
    )

  (defun enter-key ()
    "DOCSTRING"
    (interactive)
    (eaf-call "send_key" eaf--buffer-id "RET"))

  (defun show-key ()
    "DOCSTRING"
    (interactive)
    (message  (key-description (this-command-keys-vector))))

  (defun weiss-eaf-bookmark-set ()
    (interactive)
    (bookmark-set (read-string "Set EAF Bookmark: " (concat "ï‚¬ " (buffer-name)))))

  (defun weiss-get-and-search ()
    "auto check what should get and what should search"
    (interactive)
    (let ((current-url (eaf-get-path-or-url)))
      (cond
       ((string-match "javlibrary" current-url) (weiss-get-jav-bangou))
       ((string-match "btsow" current-url) (weiss-get-btsow-link))
       ((string-match "dmm" current-url) (weiss-get-fanza-bangou))
       (t (message "no matching!")))))

  (defun weiss-eaf-open-link-without-enter (open-link-type)
    "Open link without enter"
    (interactive)
    (eaf-setq eaf-open-link-type open-link-type)
    (eaf-proxy-get_link_markers)
    (let ((r ""))
      (eaf-setq weiss-eaf-link-marker
                (dotimes (i 2 r)
                  (setq r (format "%s%s" r (char-to-string (read-char)))))))
    (eaf-proxy-weiss_open_link_without_enter)
    )

  (defun weiss-open-link-current-without-enter ()
    "DOCSTRING"
    (interactive)
    (weiss-eaf-open-link-without-enter "")
    )

  (defun weiss-open-link-background-without-enter ()
    "DOCSTRING"
    (interactive)
    (weiss-eaf-open-link-without-enter "background")
    )

  (defun weiss-open-link-new-buffer-without-enter ()
    "DOCSTRING"
    (interactive)
    (weiss-eaf-open-link-without-enter "newbuf")
    )

  (eaf-bind-key toggle-input-method "C-f" eaf-browser-keybinding)
  (eaf-bind-key xah-fly-leader-key-map "SPC" eaf-browser-keybinding)
  ;; (eaf-bind-key yank_text "C-v" eaf-browser-keybinding)
  (eaf-bind-key xah-next-window-or-frame "0" eaf-browser-keybinding)
  ;; (eaf-bind-key scroll_down_page "1" eaf-browser-keybinding)
  ;; (eaf-bind-key scroll_up_page "2" eaf-browser-keybinding)
  (eaf-bind-key delete-other-windows "3" eaf-browser-keybinding)
  (eaf-bind-key split-window-below "4" eaf-browser-keybinding)
  (eaf-bind-key weiss-open-link-background-without-enter "F" eaf-browser-keybinding)
  (eaf-bind-key weiss-open-link-new-buffer-without-enter "a" eaf-browser-keybinding)
  ;; (eaf-bind-key copy_text "c" eaf-browser-keybinding)
  (eaf-bind-key scroll_down_page "e" eaf-browser-keybinding)
  (eaf-bind-key weiss-open-link-current-without-enter "f" eaf-browser-keybinding)
  (eaf-bind-key weiss-eaf-insert-multi-lines "i" eaf-browser-keybinding)
  (eaf-bind-key weiss-eaf-insert-single-line "I" eaf-browser-keybinding)
  (eaf-bind-key weiss-get-and-search "q" eaf-browser-keybinding)
  (eaf-bind-key snails-normal-backends "s" eaf-browser-keybinding)
  ;; (eaf-bind-key request_close_buffer "x" eaf-browser-keybinding)
  (eaf-bind-key weiss-eaf-bookmark-set "m" eaf-browser-keybinding)
  (eaf-bind-key snails-eaf-backends "r" eaf-browser-keybinding)

  (define-key eaf-edit-mode-map (kbd "RET") 'eaf-edit-buffer-confirm))

(provide 'weiss_eaf)
