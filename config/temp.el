;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

Debugger entered--Lisp error: (wrong-type-argument listp "的")
  car("的")
  (propertize (car c) 'face 'rime-highlight-candidate-face)
  (if (equal (1- idx) highlighted-candidate-index) (propertize (car c) 'face 'rime-highlight-candidate-face) (car c))
  (concat (propertize (format "%d. " idx) 'face 'rime-candidate-num-face) (if (equal (1- idx) highlighted-candidate-index) (propertize (car c) 'face 'rime-highlight-candidate-face) (car c)) (let* ((comment (and t (cdr c)))) (if comment (propertize (format " %s" comment) 'face 'rime-comment-face) "")))
  (let ((candidates-text (concat (propertize (format "%d. " idx) 'face 'rime-candidate-num-face) (if (equal (1- idx) highlighted-candidate-index) (propertize (car c) 'face 'rime-highlight-candidate-face) (car c)) (let* ((comment (and t ...))) (if comment (propertize (format " %s" comment) 'face 'rime-comment-face) ""))))) (setq result (concat result candidates-text (rime--candidate-separator-char))))
  (while --dolist-tail-- (setq c (car --dolist-tail--)) (let ((candidates-text (concat (propertize (format "%d. " idx) 'face 'rime-candidate-num-face) (if (equal (1- idx) highlighted-candidate-index) (propertize (car c) 'face 'rime-highlight-candidate-face) (car c)) (let* ((comment ...)) (if comment (propertize ... ... ...) ""))))) (setq result (concat result candidates-text (rime--candidate-separator-char)))) (setq idx (1+ idx)) (setq --dolist-tail-- (cdr --dolist-tail--)))
  (let ((--dolist-tail-- candidates) c) (while --dolist-tail-- (setq c (car --dolist-tail--)) (let ((candidates-text (concat (propertize (format "%d. " idx) 'face 'rime-candidate-num-face) (if (equal ... highlighted-candidate-index) (propertize ... ... ...) (car c)) (let* (...) (if comment ... ""))))) (setq result (concat result candidates-text (rime--candidate-separator-char)))) (setq idx (1+ idx)) (setq --dolist-tail-- (cdr --dolist-tail--))))
  (progn (if preedit (progn (setq result (concat (propertize (concat before-cursor) 'face 'rime-code-face) (propertize (concat rime-cursor) 'face 'rime-cursor-face) (propertize (concat after-cursor) 'face 'rime-code-face) (rime--candidate-prefix-char))))) (let ((--dolist-tail-- candidates) c) (while --dolist-tail-- (setq c (car --dolist-tail--)) (let ((candidates-text (concat (propertize ... ... ...) (if ... ... ...) (let* ... ...)))) (setq result (concat result candidates-text (rime--candidate-separator-char)))) (setq idx (1+ idx)) (setq --dolist-tail-- (cdr --dolist-tail--)))))
  (if (and (rime--has-composition context) candidates) (progn (if preedit (progn (setq result (concat (propertize (concat before-cursor) 'face 'rime-code-face) (propertize (concat rime-cursor) 'face 'rime-cursor-face) (propertize (concat after-cursor) 'face 'rime-code-face) (rime--candidate-prefix-char))))) (let ((--dolist-tail-- candidates) c) (while --dolist-tail-- (setq c (car --dolist-tail--)) (let ((candidates-text (concat ... ... ...))) (setq result (concat result candidates-text (rime--candidate-separator-char)))) (setq idx (1+ idx)) (setq --dolist-tail-- (cdr --dolist-tail--))))))
  (let* ((context (rime-lib-get-context)) (candidates (alist-get 'candidates (alist-get 'menu context))) (composition (alist-get 'composition context)) (length (alist-get 'length composition)) (preedit (alist-get 'preedit composition)) (commit-text-preview (alist-get 'commit-text-preview context)) (cursor-pos (alist-get 'cursor-pos composition)) (before-cursor (alist-get 'before-cursor composition)) (after-cursor (alist-get 'after-cursor composition)) (sel-start (alist-get 'sel-start composition)) (sel-end (alist-get 'sel-end composition)) (menu (alist-get 'menu context)) (highlighted-candidate-index (alist-get 'highlighted-candidate-index menu)) (input (rime-lib-get-input)) (page-no (alist-get 'page-no menu)) (idx 1) (result "")) (if (and (rime--has-composition context) candidates) (progn (if preedit (progn (setq result (concat (propertize ... ... ...) (propertize ... ... ...) (propertize ... ... ...) (rime--candidate-prefix-char))))) (let ((--dolist-tail-- candidates) c) (while --dolist-tail-- (setq c (car --dolist-tail--)) (let ((candidates-text ...)) (setq result (concat result candidates-text ...))) (setq idx (1+ idx)) (setq --dolist-tail-- (cdr --dolist-tail--)))))) (if (and page-no (not (= 0 page-no))) (progn (setq result (concat result (format " [%d]" (1+ page-no)))))) result)
  rime--build-candidate-content()
  (rime--show-content (rime--build-candidate-content))
  rime--show-candidate()
  rime--redisplay()
  (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar 'identity commit)) (t (if (and (rime--should-inline-ascii-p) commit-text-preview (not (rime--ascii-mode-p))) (progn (rime--inline-ascii))) (rime--redisplay)))
  (unwind-protect (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar 'identity commit)) (t (if (and (rime--should-inline-ascii-p) commit-text-preview (not (rime--ascii-mode-p))) (progn (rime--inline-ascii))) (rime--redisplay))) (rime--refresh-mode-state))
  (let* ((context (rime-lib-get-context)) (commit-text-preview (alist-get 'commit-text-preview context)) (preedit (alist-get 'preedit (alist-get 'composition context))) (commit (rime-lib-get-commit))) (unwind-protect (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar 'identity commit)) (t (if (and (rime--should-inline-ascii-p) commit-text-preview (not (rime--ascii-mode-p))) (progn (rime--inline-ascii))) (rime--redisplay))) (rime--refresh-mode-state)))
  (progn (let* ((context (rime-lib-get-context)) (commit-text-preview (alist-get 'commit-text-preview context)) (preedit (alist-get 'preedit (alist-get 'composition context))) (commit (rime-lib-get-commit))) (unwind-protect (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar 'identity commit)) (t (if (and (rime--should-inline-ascii-p) commit-text-preview (not ...)) (progn (rime--inline-ascii))) (rime--redisplay))) (rime--refresh-mode-state))))
  (unwind-protect (progn (let* ((context (rime-lib-get-context)) (commit-text-preview (alist-get 'commit-text-preview context)) (preedit (alist-get 'preedit (alist-get 'composition context))) (commit (rime-lib-get-commit))) (unwind-protect (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar 'identity commit)) (t (if (and ... commit-text-preview ...) (progn ...)) (rime--redisplay))) (rime--refresh-mode-state)))) (if modified nil (restore-buffer-modified-p nil)))
  (let* ((modified (buffer-modified-p)) (buffer-undo-list t) (inhibit-read-only t) (inhibit-modification-hooks t)) (unwind-protect (progn (let* ((context (rime-lib-get-context)) (commit-text-preview (alist-get 'commit-text-preview context)) (preedit (alist-get 'preedit (alist-get ... context))) (commit (rime-lib-get-commit))) (unwind-protect (cond ((not handled) (list key)) (commit (rime--clear-overlay) (mapcar ... commit)) (t (if ... ...) (rime--redisplay))) (rime--refresh-mode-state)))) (if modified nil (restore-buffer-modified-p nil))))
  (let ((handled (rime-lib-process-key key 0))) (let* ((modified (buffer-modified-p)) (buffer-undo-list t) (inhibit-read-only t) (inhibit-modification-hooks t)) (unwind-protect (progn (let* ((context (rime-lib-get-context)) (commit-text-preview (alist-get ... context)) (preedit (alist-get ... ...)) (commit (rime-lib-get-commit))) (unwind-protect (cond (... ...) (commit ... ...) (t ... ...)) (rime--refresh-mode-state)))) (if modified nil (restore-buffer-modified-p nil)))))
  (if (and (not (rime--should-enable-p)) (not (rime--has-composition (rime-lib-get-context)))) (list key) (let ((handled (rime-lib-process-key key 0))) (let* ((modified (buffer-modified-p)) (buffer-undo-list t) (inhibit-read-only t) (inhibit-modification-hooks t)) (unwind-protect (progn (let* ((context ...) (commit-text-preview ...) (preedit ...) (commit ...)) (unwind-protect (cond ... ... ...) (rime--refresh-mode-state)))) (if modified nil (restore-buffer-modified-p nil))))))
  (progn (if (and (not (rime--should-enable-p)) (not (rime--has-composition (rime-lib-get-context)))) (list key) (let ((handled (rime-lib-process-key key 0))) (let* ((modified (buffer-modified-p)) (buffer-undo-list t) (inhibit-read-only t) (inhibit-modification-hooks t)) (unwind-protect (progn (let* (... ... ... ...) (unwind-protect ... ...))) (if modified nil (restore-buffer-modified-p nil)))))))
  (if (rime--rime-lib-module-ready-p) (progn (if (and (not (rime--should-enable-p)) (not (rime--has-composition (rime-lib-get-context)))) (list key) (let ((handled (rime-lib-process-key key 0))) (let* ((modified (buffer-modified-p)) (buffer-undo-list t) (inhibit-read-only t) (inhibit-modification-hooks t)) (unwind-protect (progn (let* ... ...)) (if modified nil (restore-buffer-modified-p nil))))))))
  rime-input-method(100)
