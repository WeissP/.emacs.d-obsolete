;; -*- lexical-binding: t -*-
;; functions and init

;; [[file:~/.emacs.d/config/emacs-config.org::*functions and init][functions and init:1]]
(set-default 'abbrev-mode nil)
(abbrev-mode -1)
(setq save-abbrevs nil)

(defconst expand-abbrev-maybe
  '(menu-item "" expand-abbrev
              :filter (lambda (cmd) (and (weiss-check-or-expand-abbrev t) cmd)))
  "A conditional key definition for `expand-abbrev'.
When  this was bound, it will expand abbrev at point if there're any possible
abbrev.")

(defun weiss-check-or-expand-abbrev (&optional check)
  "Check the string between the cursor and the last space"
  (interactive)
  (when (xah-abbrev-enable-function)
    (let (p1 p2 abrStr abrSymbol)
      (save-excursion
        (setq p2 (point))
        ;; (setq p1 (if (re-search-backward "[[:space:]]" (line-beginning-position) t)
        ;; (1+ (point))            
        ;; (line-beginning-position)))
        (skip-syntax-backward "\\w\\_")
        (setq p1 (point))
        )

      (setq abrStr (buffer-substring-no-properties p1 p2))
      ;; (message "matched string: %s" abrStr)
      (setq abrSymbol (abbrev-symbol abrStr))
      (when (and (not check) abrSymbol)            
        (abbrev-insert abrSymbol abrStr p1 p2)
        (xah-abbrev-position-cursor p1)
        )
      abrSymbol
      )))  

(setq abbrev-expand-function 'weiss-check-or-expand-abbrev)

(defun xah-abbrev-enable-function ()
  "Return t if not in string or comment. Else nil.
This is for abbrev table property `:enable-function'.
Version 2016-10-24"
  (let (($syntax-state (syntax-ppss)))
    (not (or (nth 3 $syntax-state) (nth 4 $syntax-state))
         )))


(defun xah-abbrev-position-cursor (&optional @pos)
  "Move cursor back to ▮ if exist, else put at end.
Return true if found, else false.
Version 2016-10-24"
  (interactive)
  (let (($found-p (search-backward "▮" (if @pos @pos (max (point-min) (- (point) 100))) t )))
    (when $found-p (delete-char 1))
    $found-p
    ))

(defun weiss--ahf-indent ()
  "indent after abbrev expand"
  (indent-region (- (point) 50) (+ (point) 50))
  t)

(defun weiss--ahf ()
  "Abbrev hook function, used for `define-abbrev'.
 Our use is to prevent inserting the char that triggered expansion. Experimental.
 the “ahf” stand for abbrev hook function.
Version 2016-10-24"
  t)

(define-minor-mode weiss-abbrev-mode
  "weiss-abbrev-mode"
  :keymap
  (let ((keymap (make-sparse-keymap)))
    (define-key keymap (kbd ",") expand-abbrev-maybe)
    keymap
    )
  )

(define-globalized-minor-mode
  weiss-abbrev-global-mode
  weiss-abbrev-mode
  (lambda () (interactive) (weiss-abbrev-mode)))

(weiss-abbrev-global-mode)
;; functions and init:1 ends here

;; telega

;; [[file:~/.emacs.d/config/emacs-config.org::*telega][telega:1]]
(when (boundp 'telega-chat-mode-abbrev-table)
  (clear-abbrev-table telega-chat-mode-abbrev-table))

(define-abbrev-table 'telega-chat-mode-abbrev-table
  '(
    ("zj" ":joy:")
    ("algo" "Algorithmus" weiss--ahf)
    ("zad" "außerdem" weiss--ahf)
    ("zag" "Aufgabe" weiss--ahf)
    ("zas" "Ausgabe" weiss--ahf)
    ("zbh" "Behauptung" weiss--ahf)
    ("zbdi" "Beweis durch Induktion" weiss--ahf)
    ("zbj" "bis jetzt")
    ("zbp" "Beispiel" weiss--ahf)
    ("zdef" "Definition" weiss--ahf)
    ("zdw" "deswegen")
    ("zeb" "ein bisschen")
    ("zef" "einfach" weiss--ahf)
    ("zen" "entweder")
    ("zfm" "Familie" weiss--ahf)
    ("zft" "fertig" weiss--ahf)
    ("zfun" "Funktion" weiss--ahf)
    ("zgb" "Gegenbeispiel" weiss--ahf)
    ("zgz" "gleichzeitig" weiss--ahf)
    ("zhs" "höchstens")
    ("zig" "insgesamt")
    ("zin" "Information" weiss--ahf)
    ("zit" "Interesse" weiss--ahf)
    ("zer" "erfüllt" weiss--ahf)
    ("zka" "keine Ahnung")
    ("zkf" "kontextfrei" weiss--ahf)
    ("zls" "Lösung" weiss--ahf)
    ("zma" "Material" weiss--ahf)
    ("zmg" "Möglichkeit" weiss--ahf)
    ("zmi" "zumindest" weiss--ahf)
    ("zn" "nicht")
    ("znl" "natürlich" weiss--ahf)
    ("znm" "nochmal")
    ("znot" "Notation" weiss--ahf)
    ("znx" "nächst" weiss--ahf)
    ("zpb" "Problem" weiss--ahf)
    ("zpg" "Programmier" weiss--ahf)
    ("zpj" "Project" weiss--ahf)
    ("zrt" "Richtung" weiss--ahf)
    ("zsl" "schlecht")
    ("zse" "Semester")
    ("zst" "Schritt" weiss--ahf)
    ("zub" "Übung" weiss--ahf)
    ("zul" "unterschiedlich" weiss--ahf)
    ("zus" "Unterschied" weiss--ahf)
    ("zvl" "Vorlesung" weiss--ahf)
    ("zwr" "während" weiss--ahf)
    ("zzm" "zusammen" weiss--ahf)
    ("zzf" "Zusammenfassung" weiss--ahf)
    )
  )
;; telega:1 ends here

;; sql

;; [[file:~/.emacs.d/config/emacs-config.org::*sql][sql:1]]
(when (boundp 'sql-mode-abbrev-table)
  (clear-abbrev-table sql-mode-abbrev-table))

(define-abbrev-table 'sql-mode-abbrev-table
  '(
    ("all" "ALL" weiss--ahf)
    ("and" "AND ")
    ("as" "AS ")
    ("from" "FROM ")
    ("at" "ALTER TABLE ▮" weiss--ahf)
    ("av" "AVG(▮)" weiss--ahf)
    ("ct" "COUNT(*▮)" weiss--ahf)
    ("di" "DISTINCT")
    ("dt" "DROP TABLE ▮" weiss--ahf)
    ("ex" "EXISTS (\n▮\n)" weiss--ahf)
    ("gb" "GROUP BY ")
    ("ii" "INSERT INTO ▮" weiss--ahf)
    ("iiv" "INSERT INTO ▮() VALUES\n()" weiss--ahf)
    ("li" "LIMIT 10" weiss--ahf)
    ("ma" "MAX(▮)" weiss--ahf)
    ("mi" "MIN(▮)" weiss--ahf)
    ("nt" "CREATE TABLE ▮ \n(\n\n)" weiss--ahf)
    ("nv" "CREATE VIEW ▮ AS\n(\n\n)" weiss--ahf)
    ("nf" "CREATE OR REPLACE FUNCTION ▮ () RETURNS  AS $$\nDECLARE\nBEGIN\n\nRETURN;\nEND; $$ LANGUAGE plpgsql;\n" weiss--ahf)
    ("ntr" "CREATE TRIGGER ▮ \nBEFORE INSERT ON \nFOR EACH ROW \nEXECUTE PROCEDURE ;" weiss--ahf)
    ("ob" "ORDER BY ")
    ("ov" "OVER (▮) AS" weiss--ahf)
    ("pb" "PARTITION BY ")
    ("sf" "SELECT \nFROM ▮")
    ("sfw" "SELECT \nFROM ▮\nWHERE ")
    ("sl" "SELECT ")
    ("st" "SELECT * FROM ▮ LIMIT 10" weiss--ahf)
    ("un" "UNION ")
    ("ua" "UNION ALL ")
    ("wh" "WHERE ")
    ("rn" "RAISE NOTICE '▮'" weiss--ahf)
    ("lj" "NATURAL JOIN ")
    ("ljo" "INNER JOIN ▮ ON " weiss--ahf)
    ("llj" "LEFT OUTER JOIN ▮ ON " weiss--ahf)
    ("lrj" "RIGHT OUTER JOIN ▮ ON " weiss--ahf)
    ("sum" "SUM(▮)" weiss--ahf)
    ("max" "MAX(▮)" weiss--ahf)
    ("not" "NOT ")
    ("in" "IN ")    
    ("or" "OR ")
    ("jup" "UPDATE ▮ SET WHERE;" weiss--ahf)
    ("elsif" "ELSIF ▮ THEN" weiss--ahf)
    ("if" "IF ▮ THEN\n\nEND IF;" weiss--ahf)
    ("where" "WHERE ")
    ("with" "WITH ▮ AS (\n\n)" weiss--ahf)
    ("withr" "WITH RECURSIVE ▮ () \nAS (\n\nUnion ALL\n\n)" weiss--ahf)
    )
  )
;; sql:1 ends here

;; org

;; [[file:~/.emacs.d/config/emacs-config.org::*org][org:1]]
(when (boundp 'org-mode-abbrev-table)
  (clear-abbrev-table org-mode-abbrev-table))

(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("ta" ":tangle ")
    ("wa" "WhatsApp")
;;;;; emoji
    ("zrl" ":relaxed:" weiss--ahf)
    ("zj" ":joy:" weiss--ahf)
;;;;; for Germany language
    ("algo" "Algorithmus" weiss--ahf)
    ("ht" "heute" weiss--ahf)
    ("ad" "außerdem" weiss--ahf)
    ("ag" "Aufgabe" weiss--ahf)
    ("as" "Ausgabe" weiss--ahf)
    ("bh" "Behauptung" weiss--ahf)
    ("bdi" "Beweis durch Induktion" weiss--ahf)
    ("bj" "bis jetzt")
    ("bp" "Beispiel" weiss--ahf)
    ("def" "Definition" weiss--ahf)
    ("dw" "deswegen")
    ("eb" "ein bisschen")
    ("ef" "einfach" weiss--ahf)
    ("en" "entweder")
    ("fm" "Familie" weiss--ahf)
    ("ft" "fertig" weiss--ahf)
    ("fun" "Funktion" weiss--ahf)
    ("gb" "Gegenbeispiel" weiss--ahf)
    ("gz" "gleichzeitig" weiss--ahf)
    ("hs" "höchstens")
    ("ig" "insgesamt")
    ("in" "Information" weiss--ahf)
    ("it" "Interesse" weiss--ahf)
    ("er" "erfüllt" weiss--ahf)
    ("ka" "keine Ahnung")
    ("kf" "kontextfrei" weiss--ahf)
    ("ls" "Lösung" weiss--ahf)
    ("ma" "Material" weiss--ahf)
    ("mg" "Möglichkeit" weiss--ahf)
    ("mi" "zumindest" weiss--ahf)
    ("n" "nicht")
    ("nt" "natürlich" weiss--ahf)
    ("nm" "nochmal")
    ("not" "Notation" weiss--ahf)
    ("nx" "nächst" weiss--ahf)
    ("pb" "Problem" weiss--ahf)
    ("pg" "Programmier" weiss--ahf)
    ("pj" "Project" weiss--ahf)
    ("rt" "Richtung" weiss--ahf)
    ("sl" "schlecht")
    ("sm" "Semester")
    ("st" "Schritt" weiss--ahf)
    ("ub" "Übung" weiss--ahf)
    ("ul" "unterschiedlich" weiss--ahf)
    ("us" "Unterschied" weiss--ahf)
    ("vl" "Vorlesung" weiss--ahf)
    ("wr" "während" weiss--ahf)
    ("zm" "zusammen" weiss--ahf)
    ("zf" "Zusammenfassung" weiss--ahf)
    )
  )
;; org:1 ends here

;; latex

;; [[file:~/.emacs.d/config/emacs-config.org::*latex][latex:1]]
(when (boundp 'latex-mode-abbrev-table)
  (clear-abbrev-table latex-mode-abbrev-table))

(define-abbrev-table 'latex-mode-abbrev-table
  '(
;;;;; Greek alphabet
    ("ga" "\\alpha" weiss--ahf)
    ("gga" "\\Alpha" weiss--ahf)
    ("gA" "\\Alpha" weiss--ahf)

    ("gb" "\\beta" weiss--ahf)
    ("ggb" "\\Beta" weiss--ahf)
    ("gB" "\\Beta" weiss--ahf)

    ("gd" "\\delta" weiss--ahf)
    ("ggd" "\\Delta" weiss--ahf)
    ("gD" "\\Delta" weiss--ahf)

    ("ge" "\\epsilon" weiss--ahf)
    ("gge" "\\Epsilon" weiss--ahf)
    ("gE" "\\Epsilon" weiss--ahf)

    ("gf" "\\phi" weiss--ahf)
    ("ggf" "\\Phi" weiss--ahf)
    ("gF" "\\Phi" weiss--ahf)

    ("gg" "\\gamma" weiss--ahf)
    ("ggg" "\\Gamma" weiss--ahf)
    ("gG" "\\Gamma" weiss--ahf)

    ("ge" "\\eta" weiss--ahf)
    ("gge" "\\Eta" weiss--ahf)
    ("gE" "\\Eta" weiss--ahf)

    ("gk" "\\kappa" weiss--ahf)
    ("ggk" "\\Kappa" weiss--ahf)
    ("gK" "\\Kappa" weiss--ahf)

    ("gl" "\\lambda" weiss--ahf)
    ("ggl" "\\Lambda" weiss--ahf)
    ("gL" "\\Lambda" weiss--ahf)

    ("gm" "\\mu" weiss--ahf)
    ("ggm" "\\Mu" weiss--ahf)
    ("gM" "\\Mu" weiss--ahf)

    ("gn" "\\nu" weiss--ahf)
    ("ggn" "\\Nu" weiss--ahf)
    ("gN" "\\Nu" weiss--ahf)

    ("go" "\\omega" weiss--ahf)
    ("ggo" "\\Omega" weiss--ahf)
    ("gO" "\\Omega" weiss--ahf)

    ("gp" "\\pi" weiss--ahf)
    ("ggp" "\\Pi" weiss--ahf)
    ("gP" "\\Pi" weiss--ahf)

    ("gq" "\\theta" weiss--ahf)
    ("ggq" "\\Theta" weiss--ahf)
    ("gQ" "\\Theta" weiss--ahf)

    ("gr" "\\rho" weiss--ahf)
    ("ggr" "\\Rho" weiss--ahf)
    ("gR" "\\Rho" weiss--ahf)

    ("gs" "\\sigma" weiss--ahf)
    ("ggs" "\\Sigma" weiss--ahf)
    ("gS" "\\Sigma" weiss--ahf)

    ("gt" "\\tau" weiss--ahf)
    ("ggt" "\\Tau" weiss--ahf)
    ("gT" "\\Tau" weiss--ahf)

    ("gu" "\\upsilon" weiss--ahf)
    ("ggu" "\\Upsilon" weiss--ahf)
    ("gU" "\\Upsilon" weiss--ahf)

    ("gv" "\\varepsilon" weiss--ahf)
    ("gv" "\\Varepsilon" weiss--ahf)
    ("ggV" "\\Varepsilon" weiss--ahf)

    ("gw" "\\xi" weiss--ahf)
    ("gw" "\\Xi" weiss--ahf)
    ("ggW" "\\Xi" weiss--ahf)

    ("gx" "\\chi" weiss--ahf)
    ("ggx" "\\Chi" weiss--ahf)
    ("gX" "\\Chi" weiss--ahf)

    ("gy" "\\psi" weiss--ahf)
    ("ggy" "\\Psi" weiss--ahf)
    ("gY" "\\Psi" weiss--ahf)

    ("gz" "\\zeta" weiss--ahf)
    ("ggz" "\\Zeta" weiss--ahf)
    ("gZ" "\\Zeta" weiss--ahf)
;;;;; Logic
    ("la" "\\wedge " weiss--ahf)
    ("lb" "\\bot " weiss--ahf)
    ("lca" "\\cap " weiss--ahf)
    ("lcu" "\\cup " weiss--ahf)
    ("le" "\\exists " weiss--ahf)
    ("lf" "\\forall " weiss--ahf)
    ("lfj" "{\\tiny \\textifsym{d|><|d}}" weiss--ahf)  
    ("li" "\\in " weiss--ahf)
    ("lj" "\\bowtie " weiss--ahf)
    ("llj" "{\\tiny \\textifsym{d|><|}}" weiss--ahf)  
    ("ln" "\\neg " weiss--ahf)
    ("lni" "\\notin " weiss--ahf)
    ("lo" "\\vee " weiss--ahf)
    ("lrj" "{\\tiny \\textifsym{|><|d}}" weiss--ahf)  
    ("lsb" "\\subset " weiss--ahf)
    ("lsbe" "\\subseteq " weiss--ahf)
    ("lslj" "\\ltimes " weiss--ahf)  
    ("lsp" "\\supset " weiss--ahf)
    ("lspe" "\\supseteq " weiss--ahf)
    ("lsrj" "\\rtimes " weiss--ahf)  
    ("lt" "\\top " weiss--ahf)
    ("lv" "\\vdash " weiss--ahf)
    ("lvd" "\\vDash " weiss--ahf)
;;;;; equal symbols
    ("es" "\\stackrel{IV}{=} " weiss--ahf)
    ("el" "\\leq " weiss--ahf)
    ("eg" "\\ge " weiss--ahf)
    ("en" "\\neq " weiss--ahf)
    ("ea" "\\approx " weiss--ahf)
    ("ep" "\\prec " weiss--ahf)

;;;;; operation symbols
    ("op" "\\cdot " weiss--ahf)
    ("ox" "\\times " weiss--ahf)
    ("od" "\\div " weiss--ahf)
    ("opm" "\\pm " weiss--ahf)
    ("os" "\\sqrt" weiss--ahf)
    ("of" "\\frac" weiss--ahf)
    ("oc" "\\circ " weiss--ahf)
    ("och" "\\choose " weiss--ahf)

;;;;; Arrays
    ("ar" "\\Rightarrow " weiss--ahf)
    ("asr" "\\rightarrow " weiss--ahf)
    ("al" "\\Leftarrow " weiss--ahf)
    ("asl" "\\leftarrow " weiss--ahf)
    ("alr" "\\Leftrightarrow " weiss--ahf)
    ("aslr" "\\leftrightarrow " weiss--ahf)
    ("at" "\\to " weiss--ahf)
    ("atr" "\\twoheadrightarrow" weiss--ahf)
    ("atl" "\\twoheadleftarrow" weiss--ahf)

;;;;; Symbols
    ("sc" "\\textcircled" weiss--ahf)
    ("si" "\\infty" weiss--ahf)
    ("sq" "\\square" weiss--ahf)
    ("ss" "\\#" weiss--ahf)
    ("se" "\\emptyset" weiss--ahf)
    ("sd" "\\dots " weiss--ahf)
    ("sb" "\\  \\ \\text{\\faBolt}" weiss--ahf)
    ("sbs" "\\verb|\\|" weiss--ahf)
    ("sqed" "$\\hfill\\blacksquare$" weiss--ahf)
    ("sl" "\\lim_{n \\to \\infty}" weiss--ahf)
    ("sm" "\\mid " weiss--ahf)

;;;;; Fast input
    ("frp" "\\mathbb{R}^+" weiss--ahf)
    ("fr" "\\mathbb{R}" weiss--ahf)
    ("fzp" "\\mathbb{Z}^+" weiss--ahf)
    ("fz" "\\mathbb{Z}" weiss--ahf)
    ("fnz" "\\mathbb{N}_0" weiss--ahf)
    ("fn" "\\mathbb{N}" weiss--ahf)

;;;;; escape
    ("b" "\\" weiss--ahf)
    ("bb" "\\\\" weiss--ahf)
    ("b-" "\\_ " weiss--ahf)

;;;;; Misc
    ("ml" "\\left" weiss--ahf)
    ("mr" "\\right" weiss--ahf)
    ("mh" "\\hfill" weiss--ahf)
    ("mn" "\\not" weiss--ahf)
    ("mp" "\\path" weiss--ahf)
    ("mb" "\\big" weiss--ahf)
    ("mbb" "\\Big" weiss--ahf)
    ("mbbb" "\\bigg" weiss--ahf)
    ("mbbbb" "\\Bigg" weiss--ahf)
    ("mnp" "\n\n\\newpage" weiss--ahf)    
    ))
;; latex:1 ends here

;; java

;; [[file:~/.emacs.d/config/emacs-config.org::*java][java:1]]
(when (boundp 'java-mode-abbrev-table)
  (clear-abbrev-table java-mode-abbrev-table))

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("rt" "return ▮;")
    ("pr" "System.out.println(String.format(\"▮\"));" weiss--ahf)
    ("for" "for (int i = 0; i < ▮; i++) {\n\n}" weiss--ahf-indent)
    ("forj" "for (int j = 0; j < ▮; j++) {\n\n}" weiss--ahf-indent)
    ("if" "if (▮) {\n\n}" weiss--ahf-indent)
    ("try" "try {\n▮\n} catch () {\n\n}" weiss--ahf-indent)
    ("else" "else {\n▮\n}" weiss--ahf-indent)
    ("pb" "public " weiss--ahf)
    ("pri" "private " weiss--ahf)
    ("wh" "while (▮) {\n\n}" weiss--ahf-indent)
    ))
;; java:1 ends here

;; html

;; [[file:~/.emacs.d/config/emacs-config.org::*html][html:1]]
(when (boundp 'html-mode-abbrev-table)
  (clear-abbrev-table html-mode-abbrev-table))

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("zh1" "<h1>▮ </h1>")
    ("zli" "<li>▮ </li>")
    ("zol" "<ol start=1 type=a> \n▮ \n </ol>")
    ("zul" "<ul> \n▮ \n </ul>")
    ("zb" "<b>▮ </b>")
    ("zi" "<i>▮ </i>")
    ("zp" "<p>▮ </p>")
    ("za" "<a href=\"▮\"> </a>" weiss--ahf)
    ("esl" "&lt;" weiss--ahf)
    ("esg" "&gt;" weiss--ahf)
    ("eslg" "&lt;▮&gt;" weiss--ahf)
    ("zbr" "<br>" weiss--ahf)
    ("zhd" "<head>\n<meta charset=\"utf-8\">\n<title>▮</title>\n</head>" weiss--ahf)
    ))
;; html:1 ends here

;; elisp

;; [[file:~/.emacs.d/config/emacs-config.org::*elisp][elisp:1]]
(when (boundp 'emacs-lisp-mode-abbrev-table)
  (clear-abbrev-table emacs-lisp-mode-abbrev-table))

(define-abbrev-table 'emacs-lisp-mode-abbrev-table
  '(
    ("c" "concat" weiss--ahf)
    ("d" "defun" weiss--ahf)
    ("f" "format" weiss--ahf)
    ("u" "unless" weiss--ahf)
    ("i" "insert" weiss--ahf)
    ("l" "let" weiss--ahf)
    ("m" "message" weiss--ahf)
    ("o" "&optional " weiss--ahf)
    ("p" "point" weiss--ahf)
    ("s" "setq" weiss--ahf)
    ("w" "when" weiss--ahf)

    ("aa" "advice-add" weiss--ahf)
    ("ah" "add-hook" weiss--ahf)
    ("al" "add-to-list" weiss--ahf)
    ("bc" "backward-char" weiss--ahf)
    ("bs" "buffer-substring" weiss--ahf)
    ("bw" "backward-word" weiss--ahf)
    ("ca" "char-after" weiss--ahf)
    ("cb" "current-buffer" weiss--ahf)
    ("cc" "condition-case" weiss--ahf)
    ("cd" "copy-directory" weiss--ahf)
    ("cf" "copy-file" weiss--ahf)
    ("ci" "call-interactively" weiss--ahf)
    ("cw" "current-word" weiss--ahf)
    ("dc" "delete-char" weiss--ahf)
    ("dd" "delete-directory" weiss--ahf)
    ("dl" "dolist" weiss--ahf)
    ("dm" "(deactivate-mark)" weiss--ahf)
    ("df" "delete-file" weiss--ahf)
    ("dk" "define-key" weiss--ahf)
    ("dt" "dotimes" weiss--ahf)
    ("dr" "delete-region" weiss--ahf)
    ("dv" "defvar" weiss--ahf)
    ("do" "delete-overlay" weiss--ahf)
    ("eb" "erase-buffer" weiss--ahf)
    ("fa" "fillarray" weiss--ahf)
    ("fc" "forward-char" weiss--ahf)
    ("ff" "find-file" weiss--ahf)
    ("fl" "forward-line" weiss--ahf)
    ("fw" "forward-word" weiss--ahf)
    ("up" "(use-package ▮)" weiss--ahf)    
    ("gb" "get-buffer" weiss--ahf)
    ("gc" "goto-char" weiss--ahf)
    ("ie" "ignore-errors" weiss--ahf)
    ("kb" "kill-buffer" weiss--ahf)
    ("kr" "kill-region" weiss--ahf)
    ("kn" "(kill-new ▮)" weiss--ahf)
    ("la" "looking-at" weiss--ahf)
    ("lb" "looking-back" weiss--ahf)
    ("lc" "left-char" weiss--ahf)
    ("ld" ":load-path \"▮\"" weiss--ahf)
    ("mb" "match-beginning" weiss--ahf)
    ("mc" "mapcar" weiss--ahf)
    ("md" "make-directory" weiss--ahf)
    ("me" "match-end" weiss--ahf)
    ("ml" "make-list" weiss--ahf)
    ("mo" "make-overlay" weiss--ahf)
    ("ms" "match-string" weiss--ahf)
    ("nl" "(next-line)" weiss--ahf)
    ("mv" "make-vector" weiss--ahf)
    ("ns" "number-sequence" weiss--ahf)
    ("op" "overlay-put" weiss--ahf)
    ("os" "overlay-start" weiss--ahf)
    ("oe" "overlay-end" weiss--ahf)
    ("pm" "point-min" weiss--ahf)
    ("pn" "progn" weiss--ahf)
    ("px" "point-max" weiss--ahf)
    ("pr" "(provide '▮)" weiss--ahf)
    ("qu" ":quelpa" weiss--ahf)
    ("rb" "region-beginning" weiss--ahf)
    ("rc" "right-char" weiss--ahf)
    ("re" "region-end" weiss--ahf)
    ("rf" "rename-file" weiss--ahf)
    ("rm" "replace-match" weiss--ahf)
    ("rn" "read-number" weiss--ahf)
    ("ro" "regexp-opt" weiss--ahf)
    ("rq" "regexp-quote" weiss--ahf)
    ("rr" "replace-regexp" weiss--ahf)
    ("rs" "read-string" weiss--ahf)
    ("sb" "search-backward" weiss--ahf)
    ("sc" "shell-command" weiss--ahf)
    ("se" "save-excursion" weiss--ahf)
    ("sf" "search-forward" weiss--ahf)
    ("sm" "string-match" weiss--ahf)
    ("sr" "save-restriction" weiss--ahf)
    ("ss" "split-string" weiss--ahf)
    ("vc" "vconcat" weiss--ahf)
    ("wg" "widget-get" weiss--ahf)
    ("wr" "write-region" weiss--ahf)
    ("wt" "(defun weiss-test ()\n  \"DOCSTRING\"\n  (interactive)\n  ▮)" weiss--ahf-indent)
    ("wl" "when-let" weiss--ahf)

    ("bfn" "buffer-file-name" weiss--ahf)
    ("bmp" "buffer-modified-p" weiss--ahf)

    ("atf" "append-to-file" weiss--ahf)
    ("bol" "beginning-of-line" weiss--ahf)
    ("cdr" "cdr" weiss--ahf)
    ("cpa" "current-prefix-arg" weiss--ahf)
    ("dfr" "directory-files-recursively" weiss--ahf)
    ("efn" "expand-file-name" weiss--ahf)
    ("eol" "end-of-line" weiss--ahf)
    ("fep" "file-exists-p" weiss--ahf)
    ("fnd" "file-name-directory" weiss--ahf)
    ("fne" "file-name-extension" weiss--ahf)
    ("fnn" "file-name-nondirectory" weiss--ahf)
    ("frn" "file-relative-name" weiss--ahf)
    ("gbc" "get-buffer-create" weiss--ahf)
    ("gnb" "generate-new-buffer" weiss--ahf)
    ("gsk" "global-set-key" weiss--ahf)
    ("ifc" "insert-file-contents" weiss--ahf)
    ("lam" "lambda" weiss--ahf)
    ("lbp" "(line-beginning-position)" weiss--ahf)
    ("len" "length" weiss--ahf)
    ("lep" "(line-end-position)" weiss--ahf)
    ("mlv" "make-local-variable" weiss--ahf)
    ("msk" "make-sparse-keymap" weiss--ahf)
    ("ntr" "narrow-to-region" weiss--ahf)
    ("nts" "number-to-string" weiss--ahf)
    ("pmi" "point-min" weiss--ahf)
    ("pma" "push-mark" weiss--ahf)
    ("rap" "region-active-p" weiss--ahf)
    ("rdn" "read-directory-name" weiss--ahf)
    ("req" "require" weiss--ahf)
    ("rfn" "read-file-name" weiss--ahf)
    ("rsb" "re-search-backward" weiss--ahf)
    ("rsf" "re-search-forward" weiss--ahf)
    ("sbr" "search-backward-regexp" weiss--ahf)
    ("scb" "skip-chars-backward" weiss--ahf)
    ("scf" "skip-chars-forward" weiss--ahf)
    ("sfa" "set-face-attribute" weiss--ahf)
    ("sff" "select-frame-set-input-focus" weiss--ahf)
    ("sfm" "set-file-modes" weiss--ahf)
    ("sfr" "search-forward-regexp" weiss--ahf)
    ("sqa" "shell-quote-argument" weiss--ahf)
    ("stb" "switch-to-buffer" weiss--ahf)
    ("ste" "(string-equal ▮)" weiss--ahf)
    ("stn" "string-to-number" weiss--ahf)
    ("tap" "thing-at-point" weiss--ahf)
    ("urp" "use-region-p" weiss--ahf)
    ("wcb" "with-current-buffer" weiss--ahf)
    ("wtb" "with-temp-buffer" weiss--ahf)
    ("wtf" "with-temp-file" weiss--ahf)

    ("botap" "bounds-of-thing-at-point" weiss--ahf)
    ("bsnp" "(buffer-substring-no-properties ▮)" weiss--ahf)
    ("daer" "delete-and-extract-region" weiss--ahf)
    ("epam" "(exchange-point-and-mark)" weiss--ahf)
    ("fnse" "file-name-sans-extension" weiss--ahf)
    ("rris" "replace-regexp-in-string" weiss--ahf)
    ("yonp" "yes-or-no-p" weiss--ahf)

    ("advice-add" "(advice-add '▮ :)" weiss--ahf)
    ("abbreviate-file-name" "(abbreviate-file-name ▮)" weiss--ahf)
    ("add-hook" "(add-hook '▮)" weiss--ahf)
    ("add-text-properties" "(add-text-properties ▮)" weiss--ahf)
    ("add-to-list" "(add-to-list ▮)" weiss--ahf)
    ("alist-get" "(alist-get ▮)" weiss--ahf)
    ("and" "(and ▮)" weiss--ahf )
    ("append" "(append ▮)" weiss--ahf)
    ("append-to-file" "(append-to-file ▮)" weiss--ahf)
    ("apply" "(apply ▮)" weiss--ahf)
    ("aref" "(aref ▮)" weiss--ahf)
    ("aset" "(aset ▮)" weiss--ahf)
    ("ask-user-about-supersession-threat" "(ask-user-about-supersession-threat ▮)" weiss--ahf)
    ("assoc" "(assoc ▮)" weiss--ahf)
    ("assoc-default" "(assoc-default ▮)" weiss--ahf)
    ("assoc-string" "(assoc-string ▮)" weiss--ahf)
    ("assq" "(assq ▮)" weiss--ahf)
    ("assq-delete-all" "(assq-delete-all ▮)" weiss--ahf)
    ("autoload" "(autoload ▮)" weiss--ahf)
    ("backward-char" "(backward-char ▮)" weiss--ahf)
    ("backward-up-list" "(backward-up-list ▮)" weiss--ahf)
    ("backward-word" "(backward-word ▮)" weiss--ahf)
    ("barf-if-buffer-read-only" "(barf-if-buffer-read-only)" weiss--ahf)
    ("beginning-of-line" "(beginning-of-line)" weiss--ahf)
    ("boundp" "(boundp '▮)" weiss--ahf)
    ("bounds-of-thing-at-point" "(bounds-of-thing-at-point '▮)" weiss--ahf)
    ("buffer-base-buffer" "(buffer-base-buffer ▮)" weiss--ahf)
    ("buffer-chars-modified-tick" "(buffer-chars-modified-tick ▮)" weiss--ahf)
    ("buffer-file-name" "(buffer-file-name)" weiss--ahf)
    ("buffer-list" "(buffer-list ▮)" weiss--ahf)
    ("buffer-live-p" "(buffer-live-p ▮)" weiss--ahf)
    ("buffer-modified-p" "(buffer-modified-p ▮)" weiss--ahf)
    ("buffer-modified-tick" "(buffer-modified-tick ▮)" weiss--ahf)
    ("buffer-name" "(buffer-name ▮)" weiss--ahf)
    ("buffer-substring" "(buffer-substring ▮)" weiss--ahf)
    ("buffer-substring-no-properties" "(buffer-substring-no-properties ▮)" weiss--ahf)
    ("buffer-swap-text" "(buffer-swap-text ▮)" weiss--ahf)
    ("bufferp" "(bufferp ▮)" weiss--ahf)
    ("bury-buffer" "(bury-buffer ▮)" weiss--ahf)
    ("call-interactively" "(call-interactively '▮)" weiss--ahf)
    ("called-interactively-p" "(called-interactively-p '▮)" weiss--ahf)
    ("car" "(car ▮)" weiss--ahf)
    ("catch" "(catch '▮)" weiss--ahf)
    ("cdr" "(cdr ▮)" weiss--ahf)
    ("char-after" "(char-after ▮)" weiss--ahf)
    ("char-before" "(char-before ▮)" weiss--ahf)
    ("char-equal" "(char-equal ▮)" weiss--ahf)
    ("char-to-string" "(char-to-string ▮) " weiss--ahf)
    ("clear-image-cache" "(clear-image-cache ▮)" weiss--ahf)
    ("clear-visited-file-modtime" "(clear-visited-file-modtime)" weiss--ahf)
    ("clone-indirect-buffer" "(clone-indirect-buffer ▮)" weiss--ahf)
    ("clrhash" "(clrhash ▮)" weiss--ahf)
    ("compare-strings" "(compare-strings ▮)" weiss--ahf)
    ("concat" "(concat \"▮\" \"\")" weiss--ahf)
    ("cond" "(cond\n(▮ )\n\n)" weiss--ahf-indent)
    ("condition-case" "(condition-case ▮)" weiss--ahf)
    ("cons" "(cons ▮)" weiss--ahf)
    ("consp" "(consp ▮)" weiss--ahf)
    ("constrain-to-field" "(constrain-to-field ▮)" weiss--ahf)
    ("copy-alist" "(copy-alist ▮)" weiss--ahf)
    ("copy-directory" "(copy-directory ▮)" weiss--ahf)
    ("copy-file" "(copy-file ▮)" weiss--ahf)
    ("create-image" "(create-image ▮)" weiss--ahf)
    ("cts" "(char-to-string ▮) " weiss--ahf)
    ("current-buffer" "(current-buffer)" weiss--ahf)
    ("current-word" "(current-word)" weiss--ahf)
    ("custom-autoload" "(custom-autoload ▮)" weiss--ahf)
    ("defalias" "(defalias '▮)" weiss--ahf)
    ("defconst" "(defconst ▮)" weiss--ahf)
    ("defcustom" "(defcustom ▮)" weiss--ahf)
    ("defface" "(defface ▮)" weiss--ahf)
    ("defimage" "(defimage ▮)" weiss--ahf)
    ("define-key" "(define-key ▮ (kbd \"M-b\"))" weiss--ahf)
    ("define-minor-mode" "(define-minor-mode ▮)" weiss--ahf)
    ("defsubst" "(defsubst ▮)" weiss--ahf)
    ("defun" "(defun ▮ ()\n  \"DOCSTRING\"\n  (interactive)\n  (let (())\n\n ))" weiss--ahf-indent)
    ("defvar" "(defvar ▮)" weiss--ahf)
    ("delete" "(delete ▮)" weiss--ahf)
    ("delete-and-extract-region" "(delete-and-extract-region ▮)" weiss--ahf)
    ("delete-char" "(delete-char 1▮)" weiss--ahf)
    ("delete-directory" "(delete-directory ▮)" weiss--ahf)
    ("delete-dups" "(delete-dups ▮)" weiss--ahf)
    ("delete-field" "(delete-field ▮)" weiss--ahf)
    ("delete-file" "(delete-file ▮)" weiss--ahf)
    ("delete-region" "(delete-region ▮)" weiss--ahf)
    ("delete-overlay" "(delete-overlay '▮)" weiss--ahf)
    ("delq" "(delq ▮)" weiss--ahf)
    ("directory-file-name" "(directory-file-name ▮)" weiss--ahf)
    ("directory-files" "(directory-files ▮)" weiss--ahf)
    ("directory-files-recursively" "(directory-files-recursively ▮)" weiss--ahf)
    ("directory-name-p" "(directory-name-p ▮)" weiss--ahf)
    ("dolist" "(dolist (x ▮) \n)" weiss--ahf-indent)
    ("dotimes" "(dotimes (i ▮) \n)" weiss--ahf-indent)
    ("elt" "(elt ▮)" weiss--ahf)
    ("end-of-line" "(end-of-line ▮)" weiss--ahf)
    ("eq" "(eq ▮)" weiss--ahf)
    ("equal" "(equal ▮)" weiss--ahf)
    ("erase-buffer" "(erase-buffer)" weiss--ahf)
    ("error" "(error \"%s\" ▮)" weiss--ahf)
    ("expand-file-name" "(expand-file-name ▮)" weiss--ahf)
    ("fboundp" "(fboundp '▮)" weiss--ahf)
    ("featurep" "(featurep 'FEATURE▮)" weiss--ahf)
    ("field-beginning" "(field-beginning ▮)" weiss--ahf)
    ("field-end" "(field-end &optional ▮)" weiss--ahf)
    ("field-string" "(field-string ▮)" weiss--ahf)
    ("field-string-no-properties" "(field-string-no-properties ▮)" weiss--ahf)
    ("file-directory-p" "(file-directory-p ▮)" weiss--ahf)
    ("file-exists-p" "(file-exists-p ▮)" weiss--ahf)
    ("file-name-absolute-p" "(file-name-absolute-p ▮)" weiss--ahf)
    ("file-name-as-directory" "(file-name-as-directory ▮)" weiss--ahf)
    ("file-name-directory" "(file-name-directory ▮)" weiss--ahf)
    ("file-name-extension" "(file-name-extension ▮)" weiss--ahf)
    ("file-name-nondirectory" "(file-name-nondirectory ▮)" weiss--ahf)
    ("file-name-sans-extension" "(file-name-sans-extension ▮)" weiss--ahf)
    ("file-regular-p" "(file-regular-p ▮)" weiss--ahf)
    ("file-relative-name" "(file-relative-name ▮)" weiss--ahf)
    ("find-buffer-visiting" "(find-buffer-visiting ▮)" weiss--ahf)
    ("find-file" "(find-file ▮)" weiss--ahf)
    ("find-image" "(find-image ▮)" weiss--ahf)
    ("font-lock-add-keywords" "(font-lock-add-keywords ▮)" weiss--ahf)
    ("font-lock-fontify-buffer" "(font-lock-fontify-buffer ▮)" weiss--ahf)
    ("format" "(format \":%s\" ▮)" weiss--ahf)
    ;; ("format" "(format \"▮\" &optional OBJECTS)" weiss--ahf)
    ("forward-char" "(forward-char ▮)" weiss--ahf)
    ("forward-line" "(forward-line ▮)" weiss--ahf)
    ("forward-word" "(forward-word ▮)" weiss--ahf)
    ("funcall" "(funcall '▮)" weiss--ahf)
    ("function" "(function ▮)" weiss--ahf)
    ("gap-position" "(gap-position)" weiss--ahf)
    ("gap-size" "(gap-size)" weiss--ahf)
    ("generate-new-buffer" "(generate-new-buffer ▮)" weiss--ahf)
    ("generate-new-buffer" "(generate-new-buffer ▮)" weiss--ahf)
    ("generate-new-buffer-name" "(generate-new-buffer-name ▮)" weiss--ahf)
    ("get" "(get ▮ ')" weiss--ahf)
    ("get-buffer" "(get-buffer ▮)" weiss--ahf)
    ("get-buffer-create" "(get-buffer-create ▮)" weiss--ahf)
    ("get-char-code-property" "(get-char-code-property ▮)" weiss--ahf)
    ("get-char-property" "(get-char-property ▮)" weiss--ahf)
    ("get-char-property-and-overlay" "(get-char-property-and-overlay ▮)" weiss--ahf)
    ("get-file-buffer" "(get-file-buffer ▮)" weiss--ahf)
    ("get-pos-property" "(get-pos-property ▮)" weiss--ahf)
    ("get-text-property" "(get-text-property ▮)" weiss--ahf)
    ("gethash" "(gethash ▮)" weiss--ahf)
    ("global-set-key" "(global-set-key (kbd \"C-▮\") )" weiss--ahf)
    ("goto-char" "(goto-char ▮)" weiss--ahf)
    ("if" "(if ▮\n    \n )" weiss--ahf-indent)
    ("image-flush" "(image-flush ▮)" weiss--ahf)
    ("image-load-path-for-library" "(image-load-path-for-library ▮)" weiss--ahf)
    ("image-size" "(image-size ▮)" weiss--ahf)
    ("insert" "(insert ▮)" weiss--ahf)
    ("insert-and-inherit" "(insert-and-inherit ▮)" weiss--ahf)
    ("insert-before-markers-and-inherit" "(insert-before-markers-and-inherit ▮)" weiss--ahf)
    ("insert-char" "(insert-char ▮)" weiss--ahf)
    ("insert-file-contents" "(insert-file-contents ▮)" weiss--ahf)
    ("insert-image" "(insert-image ▮)" weiss--ahf)
    ("insert-sliced-image" "(insert-sliced-image ▮)" weiss--ahf)
    ("interactive" "(interactive)" weiss--ahf)
    ("ignore-errors" "(ignore-errors ▮)" weiss--ahf)
    ("kbd" "(kbd \"▮\")" weiss--ahf)
    ("kill-append" "(kill-append ▮)" weiss--ahf)
    ("kill-buffer" "(kill-buffer ▮)" weiss--ahf)
    ("kill-region" "(kill-region ▮)" weiss--ahf)
    ("lambda" "(lambda () (interactive) ▮)" weiss--ahf)
    ("last-buffer" "(last-buffer ▮)" weiss--ahf)
    ("left-char" "(left-char ▮)" weiss--ahf)
    ("length" "(length ▮)" weiss--ahf)
    ("let" "(let ((▮)\n)\n \n)" weiss--ahf-indent)
    ("let*" "(let* ((▮)\n)\n \n)" weiss--ahf-indent)
    ("line-beginning-position" "(line-beginning-position)" weiss--ahf)
    ("line-end-position" "(line-end-position)" weiss--ahf)
    ("list" "(list ▮)" weiss--ahf)
    ("load" "(load ▮)" weiss--ahf)
    ("load-file" "(load-file ▮)" weiss--ahf)
    ("looking-at" "(looking-at \"▮\")" weiss--ahf)
    ("looking-back" "(looking-back \"▮\")" weiss--ahf)
    ("make-directory" "(make-directory ▮)" weiss--ahf)
    ("make-hash-table" "(make-hash-table :test '▮)" weiss--ahf)
    ("make-indirect-buffer" "(make-indirect-buffer ▮)" weiss--ahf)
    ("make-list" "(make-list ▮)" weiss--ahf)
    ("make-sparse-keymap" "(make-sparse-keymap)" weiss--ahf)
    ("make-local-variable" "(make-local-variable ▮)" weiss--ahf)
    ("make-string" "(make-string count character)" weiss--ahf)
    ("make-overlay" "(make-overlay ▮)" weiss--ahf)
    ("mapc" "(mapc '▮)" weiss--ahf)
    ("mapcar" "(mapcar '▮)" weiss--ahf)
    ("mapconcat" "(mapconcat ▮)" weiss--ahf)
    ("maphash" "(maphash ▮)" weiss--ahf)
    ("match-beginning" "(match-beginning ▮)" weiss--ahf)
    ("match-data" "(match-data ▮)" weiss--ahf)
    ("match-end" "(match-end ▮)" weiss--ahf)
    ("match-string" "(match-string ▮)" weiss--ahf)
    ("member" "(member ▮)" weiss--ahf)
    ("member" "(member ▮)" weiss--ahf)
    ("member-ignore-case" "(member-ignore-case ▮)" weiss--ahf)
    ("memq" "(memq ▮)" weiss--ahf)
    ("memql" "(memql ▮)" weiss--ahf)
    ("message" "(message \": %s\" ▮)" weiss--ahf)
    ("narrow-to-region" "(narrow-to-region ▮)" weiss--ahf)
    ("next-char-property-change" "(next-char-property-change ▮)" weiss--ahf)
    ("next-property-change" "(next-property-change ▮)" weiss--ahf)
    ("next-single-char-property-change" "(next-single-char-property-change ▮)" weiss--ahf)
    ("next-single-property-change" "(next-single-property-change ▮)" weiss--ahf)
    ("not" "(not ▮)" weiss--ahf)
    ("not-modified" "(not-modified ▮)" weiss--ahf)
    ("nth" "(nth ▮)" weiss--ahf)
    ("null" "(null ▮)" weiss--ahf)
    ("number-sequence" "(number-sequence ▮)" weiss--ahf)
    ("number-to-string" "(number-to-string ▮)" weiss--ahf)
    ("or" "(or ▮)" weiss--ahf)
    ("other-buffer" "(other-buffer ▮)" weiss--ahf)
    ("overlay-put" "(overlay-put ov '▮)" weiss--ahf)
    ("overlay-start" "(overlay-start ▮)" weiss--ahf)
    ("overlay-end" "(overlay-end ▮)" weiss--ahf)
    ("point" "(point)" weiss--ahf)
    ("point-max" "(point-max)" weiss--ahf)
    ("point-min" "(point-min)" weiss--ahf)
    ("pop" "(pop ▮)" weiss--ahf)
    ("previous-char-property-change" "(previous-char-property-change ▮)" weiss--ahf)
    ("previous-property-change" "(previous-property-change ▮)" weiss--ahf)
    ("previous-single-char-property-change" "(previous-single-char-property-change ▮)" weiss--ahf)
    ("previous-single-property-change" "(previous-single-property-change ▮)" weiss--ahf)
    ("prin1" "(prin1 ▮)" weiss--ahf)
    ("prin1-to-string" "(prin1-to-string ▮)" weiss--ahf)
    ("princ" "(princ ▮)" weiss--ahf)
    ("print" "(print ▮)" weiss--ahf)
    ("prog1" "(prog1\n▮)" weiss--ahf-indent)
    ("prog2" "(prog2\n▮)" weiss--ahf-indent)
    ("progn" "(progn\n▮\n)" weiss--ahf-indent)
    ("propertize" "(propertize ▮)" weiss--ahf)
    ("push" "(push ▮)" weiss--ahf)
    ("push-mark" "(push-mark ▮)" weiss--ahf)
    ("put" "(put '▮)" weiss--ahf)
    ("put-image" "(put-image ▮)" weiss--ahf)
    ("put-text-property" "(put-text-property ▮)" weiss--ahf)
    ("puthash" "(puthash ▮)" weiss--ahf)
    (":quelpa" ":quelpa (▮ \n :fetcher github \n :repo )" weiss--ahf-indent)
    ("random" "(random ▮)" weiss--ahf)
    ("rassoc" "(rassoc ▮)" weiss--ahf)
    ("rassoc" "(rassoc ▮)" weiss--ahf)
    ("rassq" "(rassq ▮)" weiss--ahf)
    ("rassq-delete-all" "(rassq-delete-all ▮)" weiss--ahf)
    ("re-search-backward" "(re-search-backward \"▮\")" weiss--ahf)
    ("re-search-forward" "(re-search-forward \"▮\")" weiss--ahf)
    ("read-directory-name" "(read-directory-name \"▮:\")" weiss--ahf)
    ("read-file-name" "(read-file-name \"▮\")" weiss--ahf)
    ("read-regexp" "(read-regexp \"Type regex▮:\")" weiss--ahf)
    ("read-string" "(read-string \"What▮:\")" weiss--ahf)
    ("read-number" "(read-number \"▮:\")" weiss--ahf)
    ("regexp-opt" "(regexp-opt ▮)" weiss--ahf)
    ("regexp-quote" "(regexp-quote ▮)" weiss--ahf)
    ("region-active-p" "(region-active-p)" weiss--ahf)
    ("region-beginning" "(region-beginning)" weiss--ahf)
    ("region-end" "(region-end)" weiss--ahf)
    ("remhash" "(remhash ▮)" weiss--ahf)
    ("remove" "(remove ▮)" weiss--ahf)
    ("remove-images" "(remove-images ▮)" weiss--ahf)
    ("remove-list-of-text-properties" "(remove-list-of-text-properties ▮)" weiss--ahf)
    ("remove-text-properties" "(remove-text-properties ▮)" weiss--ahf)
    ("remq" "(remq ▮)" weiss--ahf)
    ("rename-buffer" "(rename-buffer ▮)" weiss--ahf)
    ("rename-file" "(rename-file ▮)" weiss--ahf)
    ("repeat" "(repeat ▮)" weiss--ahf)
    ("replace-match" "(replace-match ▮)" weiss--ahf)
    ("replace-regexp" "(replace-regexp \"▮\")" weiss--ahf)
    ("replace-regexp-in-string" "(replace-regexp-in-string \"▮\")" weiss--ahf)
    ("require" "(require '▮)" weiss--ahf)
    ("restore-buffer-modified-p" "(restore-buffer-modified-p ▮)" weiss--ahf)
    ("reverse" "(reverse ▮)" weiss--ahf)
    ("right-char" "(right-char ▮)" weiss--ahf)
    ("run-with-timer" "(run-with-timer ▮)" weiss--ahf)
    ("save-buffer" "(save-buffer ▮)" weiss--ahf)
    ("save-current-buffer" "(save-current-buffer ▮)" weiss--ahf)
    ("save-excursion" "(save-excursion ▮)" weiss--ahf)
    ("save-restriction" "(save-restriction ▮)" weiss--ahf)
    ("search-backward" "(search-backward \"▮\")" weiss--ahf)
    ("search-backward-regexp" "(search-backward-regexp \"▮\")" weiss--ahf)
    ("search-forward" "(search-forward \"▮\")" weiss--ahf)
    ("search-forward-regexp" "(search-forward-regexp \"▮\")" weiss--ahf)
    ("select-frame-set-input-focus" "(select-frame-set-input-focus ▮)" weiss--ahf)
    ("set-buffer" "(set-buffer ▮)" weiss--ahf)
    ("set-buffer-modified-p" "(set-buffer-modified-p ▮)" weiss--ahf)
    ("set-file-modes" "(set-file-modes ▮)" weiss--ahf)
    ("set-face-attribute" "(set-face-attribute '▮ nil :)" weiss--ahf)
    ("set-mark" "(set-mark ▮)" weiss--ahf)
    ("set-syntax-table" "(set-syntax-table ▮)" weiss--ahf)
    ("set-text-properties" "(set-text-properties ▮)" weiss--ahf)
    ("set-visited-file-modtime" "(set-visited-file-modtime ▮)" weiss--ahf)
    ("set-visited-file-name" "(set-visited-file-name ▮)" weiss--ahf)
    ("setq" "(setq ▮)" weiss--ahf)
    ("max" "(max ▮)" weiss--ahf)
    ("shell-command" "(shell-command ▮)" weiss--ahf)
    ("shell-quote-argument" "(shell-quote-argument ▮)" weiss--ahf)
    ("skip-chars-backward" "(skip-chars-backward \"▮\")" weiss--ahf)
    ("skip-chars-forward" "(skip-chars-forward \"▮\")" weiss--ahf)
    ("split-string" "(split-string ▮)" weiss--ahf)
    ("stc" "(string-to-char \"▮\")" weiss--ahf)
    ("string-collate-equalp" "(string-collate-equalp ▮)" weiss--ahf)
    ("string-collate-lessp" "(string-collate-lessp ▮)" weiss--ahf)
    ("string-equal" "(string-equal ▮)" weiss--ahf)
    ("string-greaterp" "(string-greaterp ▮)" weiss--ahf)
    ("string-lessp" "(string-lessp ▮)" weiss--ahf)
    ("string-match" "(string-match \"▮\")" weiss--ahf)
    ("string-match-p" "(string-match-p \"▮\")" weiss--ahf)
    ("string-prefix-p" "(string-prefix-p ▮)" weiss--ahf)
    ("string-prefix-p" "(string-prefix-p ▮)" weiss--ahf)
    ("string-suffix-p" "(string-suffix-p ▮)" weiss--ahf)
    ("string-suffix-p" "(string-suffix-p ▮)" weiss--ahf)
    ("string-to-char" "(string-to-char \"▮\")" weiss--ahf)
    ("string-to-number" "(string-to-number \"▮\")" weiss--ahf)
    ("string=" "(string-equal ▮)" weiss--ahf)
    ("stringp" "(stringp ▮)" weiss--ahf)
    ("substring" "(substring ▮)" weiss--ahf)
    ("substring-no-properties" "(substring-no-properties ▮)" weiss--ahf)
    ("switch-to-buffer" "(switch-to-buffer ▮)" weiss--ahf)
    ("terpri" "(terpri ▮)" weiss--ahf)
    ("text-properties-at" "(text-properties-at ▮)" weiss--ahf)
    ("text-property-any" "(text-property-any ▮)" weiss--ahf)
    ("text-property-not-all" "(text-property-not-all ▮)" weiss--ahf)
    ("thing-at-point" "(thing-at-point ▮)" weiss--ahf)
    ("throw" "(throw '▮)" weiss--ahf)
    ("toggle-read-only" "(toggle-read-only ▮)" weiss--ahf)
    ("unbury-buffer" "(unbury-buffer)" weiss--ahf)
    ("unless" "(unless ▮\n)" weiss--ahf-indent)
    ("use-region-p" "(use-region-p)" weiss--ahf)
    ("user-error" "(user-error \"%s▮\")" weiss--ahf)
    ("vector" "(vector ▮)" weiss--ahf)
    ("verify-visited-file-modtime" "(verify-visited-file-modtime ▮)" weiss--ahf)
    ("version<" "(version< \"24.4\" emacs-version)" weiss--ahf )
    ("version<=" "(version<= \"24.4\" emacs-version)" weiss--ahf )
    ("visited-file-modtime" "(visited-file-modtime)" weiss--ahf)
    ("when" "(when ▮)" weiss--ahf)
    ("when-let" "(when-let ((▮))\n\n)" weiss--ahf-indent)
    ("while" "(while (▮)\n  (setq ))" weiss--ahf-indent)
    ("widen" "(widen)" weiss--ahf)
    ("widget-get" "(widget-get ▮)" weiss--ahf)
    ("with-current-buffer" "(with-current-buffer ▮)" weiss--ahf)
    ("with-output-to-string" "(with-output-to-string ▮)" weiss--ahf)
    ("with-output-to-temp-buffer" "(with-output-to-temp-buffer ▮)" weiss--ahf)
    ("with-temp-buffer" "(with-temp-buffer ▮)" weiss--ahf)
    ("with-temp-file" "(with-temp-file ▮)" weiss--ahf)
    ("write-char" "(write-char ▮)" weiss--ahf)
    ("write-file" "(write-file ▮)" weiss--ahf)
    ("write-region" "(write-region (point-min) (point-max) ▮)" weiss--ahf)
    ("y-or-n-p" "(y-or-n-p \"▮ \")" weiss--ahf)
    ("yes-or-no-p" "(yes-or-no-p \"▮ \")" weiss--ahf)

    ("make-vector" "(make-vector 5▮ 0)" weiss--ahf)
    ("vconcat" "(vconcat ▮)" weiss--ahf)
    ("fillarray" "(fillarray ▮ 0)" weiss--ahf)

    ;;
    )

  "Abbrev table for `elisp-mode'"
  )
;; elisp:1 ends here

;; python

;; [[file:~/.emacs.d/config/emacs-config.org::*python][python:1]]
(when (boundp 'python-mode-abbrev-table)
  (clear-abbrev-table python-mode-abbrev-table)
  )

(define-abbrev-table 'python-mode-abbrev-table
  '(
    ("if" "if ▮:" weiss--ahf)
    ("else" "else:" weiss--ahf)
    ("for" "for ▮ in :" weiss--ahf)
    ("while" "while ▮ :" weiss--ahf)
    ("def" "def ▮():" weiss--ahf)
    ("r" "range(▮)" weiss--ahf)
    ("rt" "return " weiss--ahf)
    ("try" "try:" weiss--ahf)
    ("ex" "except ▮:" weiss--ahf)
    ("pr" "print(▮)" weiss--ahf)
    ))
;; python:1 ends here

;; misc

;; [[file:~/.emacs.d/config/emacs-config.org::*misc][misc:1]]
(when (boundp 'eshell-mode-abbrev-table)
  (clear-abbrev-table eshell-mode-abbrev-table))

(define-abbrev-table 'eshell-mode-abbrev-table
  '(
    ("mm" "module load maple/latest")
    )
  )

(when (boundp 'c++-mode-abbrev-table)
  (clear-abbrev-table c++-mode-abbrev-table))
(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("s" "std::" weiss--ahf)
    )
  )

(when (boundp 'maxima-noweb-mode-abbrev-table)
  (clear-abbrev-table maxima-noweb-mode-abbrev-table))
(define-abbrev-table 'maxima-noweb-mode-abbrev-table
  '(
    ("s" "std::" weiss--ahf)
    )
  )
;; misc:1 ends here

;; end

;; [[file:~/.emacs.d/config/emacs-config.org::*end][end:1]]
(provide 'weiss-abbrev-mode)
;; end:1 ends here
