#+STARTUP: fold
* init
** init for dump
#+begin_src elisp :tangle init/weiss-init.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (defvar weiss/launch-time (current-time))
  (defvar weiss-dumped-load-path nil)
  (defvar weiss-dumped-p nil)

  (if weiss-dumped-p
      (progn
        (setq load-path weiss-dumped-load-path)
        ;; Some shim code for tramp
        (defun tramp-file-name-method--cmacro (&rest args))
        (require 'tramp)
        (setq tramp-mode 1)
        (global-font-lock-mode t)
        (transient-mark-mode t)
        )
    (load "/home/weiss/.emacs.d/config/init/weiss-startup.el")
    )

  (load (weiss--get-config-file-path "after-dump/weiss-after-dump.el"))

  (message "Emacs is ready, startup cost: %.3f seconds." (time-to-seconds (time-since weiss/launch-time)))
  (setq weiss/launch-time nil)

#+end_src
** basic and misc 
#+begin_src elisp :tangle init/weiss-basic-and-misc.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (defvar weiss/after-buffer-change-function-list nil)
  (defvar weiss/after-major-mode-function-list nil)
  (defvar weiss/config-path "/home/weiss/.emacs.d/config/")
  (defvar weiss/local-package-path "/home/weiss/.emacs.d/local-package/")
  (defun weiss--get-config-file-path (path)
    "get config path according to weiss/config-path"
    (interactive)
    (concat weiss/config-path path)
    )

  (defvar weiss/cursor-color "#4078f2")
  (set-cursor-color weiss/cursor-color)

  (defvar weiss/cursor-type '(bar . 2))
  (setq-default cursor-type weiss/cursor-type)

  (require 'cl)
  (require 'cl-lib)
  (require 'package)
  (require 'mode-local)

  ;; Package & use-package & Quelpa initialize

  (package-initialize)
  (setq package-archives
        '(("gnu"   . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq package-selected-packages
        '(use-package quelpa-use-package))

  (setq use-package-ensure-function 'quelpa)
  (setq quelpa-checkout-melpa-p nil)
  (setq quelpa-update-melpa-p nil)
  (setq use-package-always-demand t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  (require 'quelpa-use-package)
  (quelpa-use-package-activate-advice)

  ;; Required by `use-package'
  (use-package diminish)
  (use-package bind-key)

  (add-to-list 'load-path weiss/config-path)
  (add-to-list 'load-path weiss/local-package-path)
  (let ((default-directory weiss/config-path))
    (normal-top-level-add-subdirs-to-load-path)
    )
  (let ((default-directory weiss/local-package-path))
    (normal-top-level-add-subdirs-to-load-path)
    )
  (add-to-list 'load-path "/usr/local/texlive/2020/bin/x86_64-linux")

  (setq weiss-dumped-load-path load-path)

  (setq-default c-basic-offset   4
                tab-width        4
                indent-tabs-mode nil)
  (setq
   large-file-warning-threshold 100000000
   ring-bell-function 'ignore
   auto-save-default nil ; Disable auto save
   make-backup-files nil ; Forbide to make backup files
   display-line-numbers 'relative
   )

  (fset 'yes-or-no-p 'y-or-n-p)

  ;; UI
  ;; (setq initial-frame-alist (quote ((fullscreen . maximized))))
  (unless (eq window-system 'ns)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (use-package esup
    :commands (esup))

  (use-package which-key 
    :diminish
    :hook (after-init . which-key-mode)
    )

  ;;Bookmarks
  (bookmark-load "/home/weiss/.emacs.d/bookmarks" t t t)
  (setq bookmark-save-flag 1)
  (bookmark-delete "org-capture-last-stored")
  (bookmark-delete "org-refile-last-stored")

  ;; Basic modes
  ;; (ignore-errors (savehist-mode 1))
  ;; (global-linum-mode 1)
  (save-place-mode -1)
  (require 'recentf)
  (recentf-mode 1)
  ;; (recentf-unload-function) 
  ;; (show-paren-mode 1)
  (delete-selection-mode 1)
  (global-auto-revert-mode 1)
  (blink-cursor-mode -1)

  (add-hook 'prog-mode-hook #'subword-mode)
  (add-hook 'minibuffer-setup-hook #'subword-mode)

  ;; Encoding
  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))

  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (prefer-coding-system 'utf-8)

  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

  (setq locale-coding-system 'utf-8
        default-process-coding-system '(utf-8 . utf-8))

  ;; Start server
  (use-package server
    :ensure nil
    :hook (after-init . (lambda () (interactive) (unless (or server-name server-mode) (ignore-errors (server-mode))))))

  (use-package super-save
    :diminish
    :config
    (add-to-list 'super-save-triggers 'find-file)
    (add-to-list 'super-save-triggers 'org-edit-special)
    (add-to-list 'super-save-triggers 'other-frame)
    (add-to-list 'super-save-triggers 'select-frame-set-input-focus)
    (super-save-mode +1))

  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

  (defun weiss-empty-defun-list (fun-list)
    "Ryo don't support void function, so we need define some functions before."
    (interactive)
    (dolist (fun fun-list)
      (defalias fun (lambda ()
                      (interactive)
                      (message "function [%s] is void!" (symbol-name fun))))))

  ;; save sh file auto with executable permission
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

  (defvar ryo-void-fun-list '(org-noter-sync-current-note weiss-add-enumerate-to-all-headlines weiss-test))
  (weiss-empty-defun-list ryo-void-fun-list)

#+end_src
** start up
#+begin_src elisp :tangle init/weiss-startup.el :mkdirp yes :comments both :shebang ;; -*- lexical-binding: t -*-
  (load "/home/weiss/.emacs.d/config/init/weiss-basic-and-misc.el")  
  (require 'weiss-keybinding)
  (require 'weiss-edit)
  (require 'weiss-completion)
  (require 'weiss-lang)
  (require 'weiss-ivy)
  (require 'weiss-vcs)
  (require 'weiss-shell-or-terminal)
  (require 'weiss-dired)
  (require 'weiss-org)
  (require 'weiss-pdf)
  (require 'weiss-flycheck)
  (require 'weiss-flyspell)
  (require 'weiss-translation)
  (require 'weiss-snails)
  (require 'weiss-sql)
  (require 'weiss-rime)
  (require 'weiss-latex)
  (require 'weiss-cal)
  (require 'weiss-abbrev-mode)
  (require 'weiss-project)
  (require 'weiss-lsp)
  (require 'weiss-jupyter)
  (require 'weiss-ui)
#+end_src
** dump
#+begin_src elisp :tangle ../dump.el
  (setq weiss-dumped-p t)

  ;; Disable GC
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (load "/home/weiss/.emacs.d/config/init/weiss-startup.el")

  (load-theme 'doom-one-light t t)

  (load "/home/weiss/.emacs.d/recentf")

  ;; We have to unload tramp in pdump, otherwise tramp will not work.
  (tramp-unload-tramp)

  (save-place-mode -1)


  (dump-emacs-portable "~/.emacs.d/emacs.pdmp")
#+end_src

** out of use
#+begin_src elisp :tangle no
  (advice-add 'mwheel-scroll :around #'me/mwheel-scroll)

  (defun me/mwheel-scroll (original &rest arguments)
    "Like `mwheel-scroll' but preserve screen position.
  See `scroll-preserve-screen-position'."
    (let ((scroll-preserve-screen-position :always))
      (apply original arguments)))


  (use-package auto-package-update
    :disabled
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-interval 4)
    ;; (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))

  (use-package switch-buffer-functions
    :disabled
    :quelpa (switch-buffer-functions :fetcher github
                                     :repo "10sr/switch-buffer-functions-el"))

  (use-package explain-pause-mode
    :disabled
    :quelpa (explain-pause-mode
             :fetcher github
             :repo lastquestion/explain-pause-mode)
    :config
    (explain-pause-mode))
#+end_src
* abbrevs
:PROPERTIES:
:header-args: :tangle edit/weiss-abbrev-mode.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** functions and init
#+begin_src elisp
  (set-default 'abbrev-mode nil)
  (abbrev-mode -1)
  (setq save-abbrevs nil)

  (defconst expand-abbrev-maybe
    '(menu-item "" expand-abbrev
                :filter (lambda (cmd) (and (weiss-check-or-expand-abbrev t) cmd)))
    "A conditional key definition for `expand-abbrev'.
  When  this was bound, it will expand abbrev at point if there're any possible
  abbrev.")

  (defun weiss-check-or-expand-abbrev (&optional check)
    "Check the string between the cursor and the last space"
    (interactive)
    (when (xah-abbrev-enable-function)
      (let ((local-abbrev-table local-abbrev-table)
            p1 p2 abrStr abrSymbol current-table)
        (save-excursion
          (setq p2 (point))
          ;; (setq p1 (if (re-search-backward "[[:space:]]" (line-beginning-position) t)
          ;; (1+ (point))            
          ;; (line-beginning-position)))
          (skip-syntax-backward "\\w\\_")
          ;; (skip-syntax-backward "\\w")
          (setq p1 (point))
          )
        (setq abrStr (buffer-substring-no-properties p1 p2))
        ;; (message "matched string: %s" abrStr)
        (when (and
               (eq major-mode 'org-mode)
               (eq 'latex-fragment (org-element-type (org-element-context (org-element-at-point)))))          
          (setq local-abbrev-table latex-mode-abbrev-table)
          (when (string-prefix-p "$" abrStr)
            (setq abrStr (string-remove-prefix "$" abrStr)
                  p1 (+ p1 1))          
            )
          )
        (setq abrSymbol (abbrev-symbol abrStr))
        (when (and (not check) abrSymbol)            
          (abbrev-insert abrSymbol abrStr p1 p2)
          (xah-abbrev-position-cursor p1)
          )
        abrSymbol
        ))
    )  

  (setq abbrev-expand-function 'weiss-check-or-expand-abbrev)

  (defun xah-abbrev-enable-function ()
    "Return t if not in string or comment. Else nil.
  This is for abbrev table property `:enable-function'.
  Version 2016-10-24"
    (let (($syntax-state (syntax-ppss)))
      (not (or (nth 3 $syntax-state) (nth 4 $syntax-state))
           )))


  (defun xah-abbrev-position-cursor (&optional @pos)
    "Move cursor back to ▮ if exist, else put at end.
  Return true if found, else false.
  Version 2016-10-24"
    (interactive)
    (let (($found-p (search-backward "▮" (if @pos @pos (max (point-min) (- (point) 100))) t )))
      (when $found-p (delete-char 1))
      $found-p
      ))

  (defun weiss--ahf-avoid-casease ()
    "indent after abbrev expand"
    (casease--end)
    t)

  (defun weiss--ahf-indent ()
    "indent after abbrev expand"
    (indent-region (- (point) 50) (+ (point) 50))
    t)

  (defun weiss--ahf ()
    "Abbrev hook function, used for `define-abbrev'.
   Our use is to prevent inserting the char that triggered expansion. Experimental.
   the “ahf” stand for abbrev hook function.
  Version 2016-10-24"
    t)

  (define-minor-mode weiss-abbrev-mode
    "weiss-abbrev-mode"
    :keymap
    (let ((keymap (make-sparse-keymap)))
      (define-key keymap (kbd ",") expand-abbrev-maybe)
      keymap
      )
    (abbrev-mode -1)
    )

  (define-globalized-minor-mode
    weiss-abbrev-global-mode
    weiss-abbrev-mode
    (lambda () (interactive) (abbrev-mode -1) (weiss-abbrev-mode)))

  (weiss-abbrev-global-mode)
#+end_src

** telega
#+begin_src elisp
  (when (boundp 'telega-chat-mode-abbrev-table)
    (clear-abbrev-table telega-chat-mode-abbrev-table))

  (define-abbrev-table 'telega-chat-mode-abbrev-table
    '(
      ("zj" ":joy:")
      ("algo" "Algorithmus" weiss--ahf)
      ("zad" "außerdem" weiss--ahf)
      ("zag" "Aufgabe" weiss--ahf)
      ("zas" "Ausgabe" weiss--ahf)
      ("zbh" "Behauptung" weiss--ahf)
      ("zbdi" "Beweis durch Induktion" weiss--ahf)
      ("zbj" "bis jetzt")
      ("zbp" "Beispiel" weiss--ahf)
      ("zdef" "Definition" weiss--ahf)
      ("zdw" "deswegen")
      ("zeb" "ein bisschen")
      ("zef" "einfach" weiss--ahf)
      ("zen" "entweder")
      ("zfm" "Familie" weiss--ahf)
      ("zft" "fertig" weiss--ahf)
      ("zfun" "Funktion" weiss--ahf)
      ("zgb" "Gegenbeispiel" weiss--ahf)
      ("zgz" "gleichzeitig" weiss--ahf)
      ("zhs" "höchstens")
      ("zig" "insgesamt")
      ("zin" "Information" weiss--ahf)
      ("zit" "Interesse" weiss--ahf)
      ("zer" "erfüllt" weiss--ahf)
      ("zka" "keine Ahnung")
      ("zkf" "kontextfrei" weiss--ahf)
      ("zls" "Lösung" weiss--ahf)
      ("zma" "Material" weiss--ahf)
      ("zmg" "Möglichkeit" weiss--ahf)
      ("zmi" "zumindest" weiss--ahf)
      ("zn" "nicht")
      ("znl" "natürlich" weiss--ahf)
      ("znm" "nochmal")
      ("znot" "Notation" weiss--ahf)
      ("znx" "nächst" weiss--ahf)
      ("zpb" "Problem" weiss--ahf)
      ("zpg" "Programmier" weiss--ahf)
      ("zpj" "Project" weiss--ahf)
      ("zrt" "Richtung" weiss--ahf)
      ("zsl" "schlecht")
      ("zse" "Semester")
      ("zst" "Schritt" weiss--ahf)
      ("zub" "Übung" weiss--ahf)
      ("zul" "unterschiedlich" weiss--ahf)
      ("zus" "Unterschied" weiss--ahf)
      ("zvl" "Vorlesung" weiss--ahf)
      ("zwr" "während" weiss--ahf)
      ("zzm" "zusammen" weiss--ahf)
      ("zzf" "Zusammenfassung" weiss--ahf)
      )
    )
#+end_src

** sql
#+begin_src elisp
  (when (boundp 'sql-mode-abbrev-table)
    (clear-abbrev-table sql-mode-abbrev-table))

  (define-abbrev-table 'sql-mode-abbrev-table
    '(
      ("all" "ALL" weiss--ahf)
      ("and" "AND ")
      ("as" "AS ")
      ("from" "FROM ")
      ("at" "ALTER TABLE ▮" weiss--ahf)
      ("av" "AVG(▮)" weiss--ahf)
      ("ct" "COUNT(*▮)" weiss--ahf)
      ("di" "DISTINCT")
      ("dt" "DROP TABLE ▮" weiss--ahf)
      ("ex" "EXISTS (\n▮\n)" weiss--ahf)
      ("gb" "GROUP BY ")
      ("ii" "INSERT INTO ▮" weiss--ahf)
      ("iiv" "INSERT INTO ▮() VALUES\n()" weiss--ahf)
      ("li" "LIMIT 10" weiss--ahf)
      ("ma" "MAX(▮)" weiss--ahf)
      ("mi" "MIN(▮)" weiss--ahf)
      ("nt" "CREATE TABLE ▮ \n(\n\n)" weiss--ahf)
      ("nv" "CREATE VIEW ▮ AS\n(\n\n)" weiss--ahf)
      ("nf" "CREATE OR REPLACE FUNCTION ▮ () RETURNS  AS $$\nDECLARE\nBEGIN\n\nRETURN;\nEND; $$ LANGUAGE plpgsql;\n" weiss--ahf)
      ("ntr" "CREATE TRIGGER ▮ \nBEFORE INSERT ON \nFOR EACH ROW \nEXECUTE PROCEDURE ;" weiss--ahf)
      ("ob" "ORDER BY ")
      ("ov" "OVER (▮) AS" weiss--ahf)
      ("pb" "PARTITION BY ")
      ("sf" "SELECT \nFROM ▮")
      ("sfw" "SELECT \nFROM ▮\nWHERE ")
      ("sl" "SELECT ")
      ("st" "SELECT * FROM ▮ LIMIT 10" weiss--ahf)
      ("un" "UNION ")
      ("ua" "UNION ALL ")
      ("wh" "WHERE ")
      ("rn" "RAISE NOTICE '▮'" weiss--ahf)
      ("lj" "NATURAL JOIN ")
      ("ljo" "INNER JOIN ▮ ON " weiss--ahf)
      ("llj" "LEFT OUTER JOIN ▮ ON " weiss--ahf)
      ("lrj" "RIGHT OUTER JOIN ▮ ON " weiss--ahf)
      ("sum" "SUM(▮)" weiss--ahf)
      ("max" "MAX(▮)" weiss--ahf)
      ("not" "NOT ")
      ("in" "IN ")    
      ("or" "OR ")
      ("jup" "UPDATE ▮ SET WHERE;" weiss--ahf)
      ("elsif" "ELSIF ▮ THEN" weiss--ahf)
      ("if" "IF ▮ THEN\n\nEND IF;" weiss--ahf)
      ("where" "WHERE ")
      ("with" "WITH ▮ AS (\n\n)" weiss--ahf)
      ("withr" "WITH RECURSIVE ▮ () \nAS (\n\nUnion ALL\n\n)" weiss--ahf)
      )
    )
#+end_src

** org
#+begin_src elisp
  (when (boundp 'org-mode-abbrev-table)
    (clear-abbrev-table org-mode-abbrev-table))

  (define-abbrev-table 'org-mode-abbrev-table
    '(
      ("ta" ":tangle ")
      ("wa" "WhatsApp")
  ;;;;; roam
      ("ro" "#+roam_▮: ")
  ;;;;; org config
      ("attr" "#+ATTR_org: :")
      ("img" "#+ATTR_org: :width 600")
  ;;;;; latex
      ("ltxeq" "\\begin{equation*}\n▮\n\\end{equation*}" weiss--ahf-indent)    
      ("ltxal" "\\begin{aligned}\n▮\n\\end{aligned}" weiss--ahf-indent)    
      ("ltxtb" "#+ATTR_LaTeX: :align |r|r|r|r|r|" weiss--ahf-indent)    
      ("ltxmg" "#+ATTR_Latex: :options [leftmargin=▮8ex]" weiss--ahf-indent)    
      ("ltximg" "#+ATTR_LATEX:  :width 0.9\\textwidth :center nil" weiss--ahf-indent)    
      ("ltxmt" "#+ATTR_LATEX: :options xleftmargin=8ex" weiss--ahf-indent)    
      ("orgimg" "#+ATTR_ORG: :width 600" weiss--ahf-indent)    
      ("cc" "$\\color{code}\\texttt{▮}$" weiss--ahf-indent)    
  ;;;;; emoji
      ("zrl" ":relaxed:" weiss--ahf)
      ("zj" ":joy:" weiss--ahf)
  ;;;;; for English language
      ("intr" "introduction" weiss--ahf)    
      ("ex" "example" weiss--ahf)    
  ;;;;; for Germany language
      ("algo" "Algorithmus" weiss--ahf)
      ("ht" "heute" weiss--ahf)
      ("ad" "außerdem" weiss--ahf)
      ("ag" "Aufgabe" weiss--ahf)
      ("as" "Ausgabe" weiss--ahf)
      ("bh" "Behauptung" weiss--ahf)
      ("bdi" "Beweis durch Induktion" weiss--ahf)
      ("bj" "bis jetzt")
      ("bp" "Beispiel" weiss--ahf)
      ("def" "Definition" weiss--ahf)
      ("dw" "deswegen")
      ("eb" "ein bisschen")
      ("ef" "einfach" weiss--ahf)
      ("en" "entweder")
      ("edl" "endlich ")
      ("fm" "Familie" weiss--ahf)
      ("ft" "fertig" weiss--ahf)
      ("fun" "Funktion" weiss--ahf)
      ("gb" "Gegenbeispiel" weiss--ahf)
      ("gz" "gleichzeitig" weiss--ahf)
      ("hs" "höchstens")
      ("ig" "insgesamt")
      ("in" "Information" weiss--ahf)
      ("it" "Interesse" weiss--ahf)
      ("er" "erfüllt" weiss--ahf)
      ("ka" "keine Ahnung")
      ("kf" "kontextfrei" weiss--ahf)
      ("ls" "Lösung" weiss--ahf)
      ("ma" "Material" weiss--ahf)
      ("mg" "Möglichkeit" weiss--ahf)
      ("mi" "zumindest" weiss--ahf)
      ("n" "nicht")
      ("nt" "natürlich" weiss--ahf)
      ("nm" "nochmal")
      ("not" "Notation" weiss--ahf)
      ("nx" "nächst" weiss--ahf)
      ("pb" "Problem" weiss--ahf)
      ("pg" "Programmier" weiss--ahf)
      ("pj" "Project" weiss--ahf)
      ("rt" "Richtung" weiss--ahf)
      ("sl" "schlecht")
      ("sm" "Semester")
      ("st" "Schritt" weiss--ahf)
      ("ub" "Übung" weiss--ahf)
      ("ul" "unterschiedlich" weiss--ahf)
      ("us" "Unterschied" weiss--ahf)
      ("vl" "Vorlesung" weiss--ahf)
      ("wr" "während" weiss--ahf)
      ("zm" "zusammen" weiss--ahf)
      ("zf" "Zusammenfassung" weiss--ahf)
  ;;;;; cycle number
      ("cn1" "①")
      ("cn2" "②")
      ("cn3" "③")
      ("cn4" "④")
      ("cn5" "⑤")
      )
    )
#+end_src

** imaxima
#+begin_src elisp
  (when (boundp 'maxima-mode-abbrev-table)
    (clear-abbrev-table maxima-mode-abbrev-table))
  (define-abbrev-table 'maxima-mode-abbrev-table
    '(
      ("t" "apply (tex, [%i▮]);" weiss--ahf)
      ("e" ":= " weiss--ahf)
      )
    )

#+end_src

** latex
#+begin_src elisp
  (when (boundp 'latex-mode-abbrev-table)
    (clear-abbrev-table latex-mode-abbrev-table))

  (define-abbrev-table 'latex-mode-abbrev-table
    '(
  ;;;;; Greek alphabet
      ("ga" "\\alpha" weiss--ahf)
      ("gga" "\\Alpha" weiss--ahf)
      ("gA" "\\Alpha" weiss--ahf)

      ("gb" "\\beta" weiss--ahf)
      ("ggb" "\\Beta" weiss--ahf)
      ("gB" "\\Beta" weiss--ahf)

      ("gd" "\\delta" weiss--ahf)
      ("ggd" "\\Delta" weiss--ahf)
      ("gD" "\\Delta" weiss--ahf)

      ("ge" "\\epsilon" weiss--ahf)
      ("gge" "\\Epsilon" weiss--ahf)
      ("gE" "\\Epsilon" weiss--ahf)

      ("gf" "\\phi" weiss--ahf)
      ("ggf" "\\Phi" weiss--ahf)
      ("gF" "\\Phi" weiss--ahf)

      ("gg" "\\gamma" weiss--ahf)
      ("ggg" "\\Gamma" weiss--ahf)
      ("gG" "\\Gamma" weiss--ahf)

      ("ge" "\\eta" weiss--ahf)
      ("gge" "\\Eta" weiss--ahf)
      ("gE" "\\Eta" weiss--ahf)

      ("gk" "\\kappa" weiss--ahf)
      ("ggk" "\\Kappa" weiss--ahf)
      ("gK" "\\Kappa" weiss--ahf)

      ("gl" "\\lambda" weiss--ahf)
      ("ggl" "\\Lambda" weiss--ahf)
      ("gL" "\\Lambda" weiss--ahf)

      ("gm" "\\mu" weiss--ahf)
      ("ggm" "\\Mu" weiss--ahf)
      ("gM" "\\Mu" weiss--ahf)

      ("gn" "\\nu" weiss--ahf)
      ("ggn" "\\Nu" weiss--ahf)
      ("gN" "\\Nu" weiss--ahf)

      ("go" "\\omega" weiss--ahf)
      ("ggo" "\\Omega" weiss--ahf)
      ("gO" "\\Omega" weiss--ahf)

      ("gp" "\\pi" weiss--ahf)
      ("ggp" "\\Pi" weiss--ahf)
      ("gP" "\\Pi" weiss--ahf)

      ("gq" "\\theta" weiss--ahf)
      ("ggq" "\\Theta" weiss--ahf)
      ("gQ" "\\Theta" weiss--ahf)

      ("gr" "\\rho" weiss--ahf)
      ("ggr" "\\Rho" weiss--ahf)
      ("gR" "\\Rho" weiss--ahf)

      ("gs" "\\sigma" weiss--ahf)
      ("ggs" "\\Sigma" weiss--ahf)
      ("gS" "\\Sigma" weiss--ahf)

      ("gt" "\\tau" weiss--ahf)
      ("ggt" "\\Tau" weiss--ahf)
      ("gT" "\\Tau" weiss--ahf)

      ("gu" "\\upsilon" weiss--ahf)
      ("ggu" "\\Upsilon" weiss--ahf)
      ("gU" "\\Upsilon" weiss--ahf)

      ("gv" "\\varepsilon" weiss--ahf)
      ("gv" "\\Varepsilon" weiss--ahf)
      ("ggV" "\\Varepsilon" weiss--ahf)

      ("gw" "\\xi" weiss--ahf)
      ("gw" "\\Xi" weiss--ahf)
      ("ggW" "\\Xi" weiss--ahf)

      ("gx" "\\chi" weiss--ahf)
      ("ggx" "\\Chi" weiss--ahf)
      ("gX" "\\Chi" weiss--ahf)

      ("gy" "\\psi" weiss--ahf)
      ("ggy" "\\Psi" weiss--ahf)
      ("gY" "\\Psi" weiss--ahf)

      ("gz" "\\zeta" weiss--ahf)
      ("ggz" "\\Zeta" weiss--ahf)
      ("gZ" "\\Zeta" weiss--ahf)
  ;;;;; Logic
      ("la" "\\wedge " weiss--ahf)
      ("lb" "\\bot " weiss--ahf)
      ("lca" "\\cap " weiss--ahf)
      ("lcu" "\\cup " weiss--ahf)
      ("le" "\\exists " weiss--ahf)
      ("lf" "\\forall " weiss--ahf)
      ("lfj" "{\\tiny \\textifsym{d|><|d}}" weiss--ahf)  
      ("li" "\\in " weiss--ahf)
      ("lj" "\\bowtie " weiss--ahf)
      ("llj" "{\\tiny \\textifsym{d|><|}}" weiss--ahf)  
      ("ln" "\\neg " weiss--ahf)
      ("lni" "\\notin " weiss--ahf)
      ("lo" "\\vee " weiss--ahf)
      ("lrj" "{\\tiny \\textifsym{|><|d}}" weiss--ahf)  
      ("lsb" "\\subset " weiss--ahf)
      ("lsbe" "\\subseteq " weiss--ahf)
      ("lslj" "\\ltimes " weiss--ahf)  
      ("lsp" "\\supset " weiss--ahf)
      ("lspe" "\\supseteq " weiss--ahf)
      ("lsrj" "\\rtimes " weiss--ahf)  
      ("lt" "\\top " weiss--ahf)
      ("lv" "\\vdash " weiss--ahf)
      ("lvd" "\\vDash " weiss--ahf)
  ;;;;; equal symbols
      ("es" "\\stackrel{IV}{=} " weiss--ahf)
      ("el" "\\leq " weiss--ahf)
      ("eg" "\\ge " weiss--ahf)
      ("en" "\\neq " weiss--ahf)
      ("ea" "\\approx " weiss--ahf)
      ("ep" "\\prec " weiss--ahf)

  ;;;;; operation symbols
      ("op" "\\cdot " weiss--ahf)
      ("ox" "\\times " weiss--ahf)
      ("od" "\\div " weiss--ahf)
      ("opm" "\\pm " weiss--ahf)
      ("os" "\\sqrt" weiss--ahf)
      ("of" "\\frac{▮}" weiss--ahf)
      ("oc" "\\circ " weiss--ahf)
      ("och" "\\choose " weiss--ahf)

  ;;;;; Arrays
      ("ar" "\\Rightarrow " weiss--ahf)
      ("asr" "\\rightarrow " weiss--ahf)
      ("al" "\\Leftarrow " weiss--ahf)
      ("asl" "\\leftarrow " weiss--ahf)
      ("alr" "\\Leftrightarrow " weiss--ahf)
      ("aslr" "\\leftrightarrow " weiss--ahf)
      ("at" "\\to " weiss--ahf)
      ("atr" "\\twoheadrightarrow" weiss--ahf)
      ("atl" "\\twoheadleftarrow" weiss--ahf)

  ;;;;; Symbols
      ("sc" "\\textcircled" weiss--ahf)
      ("si" "\\infty" weiss--ahf)
      ("sq" "\\square" weiss--ahf)
      ("ss" "\\#" weiss--ahf)
      ("se" "\\emptyset" weiss--ahf)
      ("sd" "\\dots " weiss--ahf)
      ("sb" "\\  \\ \\text{\\faBolt}" weiss--ahf)
      ("sbs" "\\verb|\\|" weiss--ahf)
      ("sqed" "$\\hfill\\blacksquare$" weiss--ahf)
      ("sl" "\\lim_{n \\to \\infty}" weiss--ahf)
      ("sm" "\\mid " weiss--ahf)

  ;;;;; Fast input
      ("frp" "\\mathbb{R}^+" weiss--ahf)
      ("fr" "\\mathbb{R}" weiss--ahf)
      ("fzp" "\\mathbb{Z}^+" weiss--ahf)
      ("fz" "\\mathbb{Z}" weiss--ahf)
      ("fnz" "\\mathbb{N}_0" weiss--ahf)
      ("fn" "\\mathbb{N}" weiss--ahf)

  ;;;;; escape
      ("b" "\\" weiss--ahf)
      ("bb" "\\\\" weiss--ahf)
      ("b-" "\\_ " weiss--ahf)

  ;;;;; Misc
      ("ml" "\\left" weiss--ahf)
      ("mr" "\\right" weiss--ahf)
      ("mh" "\\hfill" weiss--ahf)
      ("mn" "\\not" weiss--ahf)
      ("mp" "\\path" weiss--ahf)
      ("mb" "\\big" weiss--ahf)
      ("mbb" "\\Big" weiss--ahf)
      ("mbbb" "\\bigg" weiss--ahf)
      ("mbbbb" "\\Bigg" weiss--ahf)
      ("mnp" "\n\n\\newpage" weiss--ahf)    
      ("meq" "\\begin{equation*}\n▮\n\\end{equation}" weiss--ahf-indent)    
      ("mal" "\\begin{aligned}\n▮\n\\end{aligned}" weiss--ahf-indent)    
      ))
#+end_src

** java
#+begin_src elisp
  (when (boundp 'java-mode-abbrev-table)
    (clear-abbrev-table java-mode-abbrev-table))

  (define-abbrev-table 'java-mode-abbrev-table
    '(
      ("rt" "return ▮;")
      ("pr" "System.out.println(▮);" weiss--ahf)
      ("sf" "String.format(\"%s\", ▮)" weiss--ahf)
      ("for" "for (int i = 0; i < ▮; i++) {\n\n}" weiss--ahf-indent)
      ("forj" "for (int j = 0; j < ▮; j++) {\n\n}" weiss--ahf-indent)
      ("if" "if (▮) {\n\n}" weiss--ahf-indent)
      ("try" "try {\n▮\n} catch () {\n\n}" weiss--ahf-indent)
      ("else" "else {\n▮\n}" weiss--ahf-indent)
      ("pb" "public " weiss--ahf)
      ("pri" "private " weiss--ahf)
      ("wh" "while (▮) {\n\n}" weiss--ahf-indent)
  ;;;;; for clp
      ("tv" "TemporaryVar ▮ = TemporaryVar(\"\");" weiss--ahf)
      ("ai" "addInstruction(▮);" weiss--ahf)
      ))
#+end_src

** html
#+begin_src elisp
  (when (boundp 'html-mode-abbrev-table)
    (clear-abbrev-table html-mode-abbrev-table))

  (define-abbrev-table 'html-mode-abbrev-table
    '(
      ("b" "<b> ▮ </b>")
      ("i" "<i> ▮ </i>")
      ("p" "<p> ▮ </p>")
      ("a" "<a href=\"▮\"> </a>" weiss--ahf)

      ("h1" "<h1> ▮ </h1>")
      ("h2" "<h2> ▮ </h2>")
      ("h3" "<h3> ▮ </h3>")
      ("h4" "<h4> ▮ </h4>")
      ("li" "<li> ▮ </li>")
      ("ol" "<ol start=1 type=a> \n▮ \n </ol>" weiss--ahf-indent)
      ("ul" "<ul> \n▮ \n </ul>" weiss--ahf-indent)
      ("hd" "<head>\n<meta charset=\"utf-8\">\n<title>▮</title>\n</head>" weiss--ahf-indent)
      ("th" "<th>▮</th>" weiss--ahf)
      ("br" "<br>" weiss--ahf)
      ("tr" "<tr>\n▮\n</tr>" weiss--ahf-indent)
      ("td" "<td>▮</td>" weiss--ahf)
      ("sp" "<span>▮</span>" weiss--ahf)
      ("sb" "<span class=\"block\">▮</span>" weiss--ahf)    
      ("ag" "Aufgabe" weiss--ahf)

      ("el" "&lt;" weiss--ahf)
      ("eg" "&gt;" weiss--ahf)
      ("elg" "&lt;▮&gt;" weiss--ahf)
      ("ea" "&amp" weiss--ahf)
      ("eq" "&quot;" weiss--ahf)

      ("pre" "<pre>\n▮\n</pre>" weiss--ahf-indent)    
      ("div" "<div> ▮ </div>")

      ("code" "<pre>\n<code>\n▮\n</code>\n</pre>" weiss--ahf-indent)
      ("style" "<style>\n▮\n</style>" weiss--ahf-indent)
      ("temp" "<!doctype html>\n<html lang=\"de\">\n\n<head>\n<meta charset=\"utf-8\">\n<title>▮</title>\n</head>\n\n<body>\n\n</body>" weiss--ahf-indent)

      ))
#+end_src

** go
#+begin_src elisp
  (when (boundp 'go-mode-abbrev-table)
    (clear-abbrev-table go-mode-abbrev-table))

  (define-abbrev-table 'go-mode-abbrev-table
    '(
      ("ca" "case ▮:" weiss--ahf)
      ("d" "defer ▮" weiss--ahf)
      ("de" "default:\n▮" weiss--ahf-indent)
      ("e" ":= ▮" weiss--ahf)
      ("en" "errors.New(\"▮\")" weiss--ahf)
      ("f" "func ▮(){\n\n}" weiss--ahf-indent)
      ("fr" "for i, x := range ▮{\n\n}" weiss--ahf-indent)
      ("ie" "if err != nil {\n▮\n}" weiss--ahf-indent)
      ("im" "import (\n\"▮\"\n)" weiss--ahf-indent)
      ("la" "<-" weiss--ahf)
      ("pa" "package ▮" weiss--ahf)
      ("pr" "fmt.Printf(\"%v\", ▮)")
      ("prn" "fmt.Println(\"▮\")")
      ("rt" "return ▮" weiss--ahf)
      ("rc" "regexp.MustCompile(`▮`)" weiss--ahf)
      ("st" "%T" weiss--ahf)
      ("sv" "%v" weiss--ahf)
      ("sf" "fmt.Sprintf(\"%v\",▮)" weiss--ahf)
      ("ti" "type ▮ interface {\n\n}" weiss--ahf-indent)
      ("ts" "type ▮ struct {\n\n}" weiss--ahf-indent)
      ("v" "var ▮" weiss--ahf)
      ))

#+end_src

** elisp

#+begin_src elisp
  (when (boundp 'emacs-lisp-mode-abbrev-table)
    (clear-abbrev-table emacs-lisp-mode-abbrev-table))

  (define-abbrev-table 'emacs-lisp-mode-abbrev-table
    '(
      ("c" "concat" weiss--ahf)
      ("d" "defun" weiss--ahf)
      ("f" "format" weiss--ahf)
      ("u" "unless" weiss--ahf)
      ("i" "insert" weiss--ahf)
      ("l" "let" weiss--ahf)
      ("m" "message" weiss--ahf)
      ("o" "&optional " weiss--ahf)
      ("p" "point" weiss--ahf)
      ("s" "setq" weiss--ahf)
      ("w" "when" weiss--ahf)

      ("aa" "advice-add" weiss--ahf)
      ("ah" "add-hook" weiss--ahf)
      ("al" "add-to-list" weiss--ahf)
      ("bc" "backward-char" weiss--ahf)
      ("bs" "buffer-substring" weiss--ahf)
      ("bw" "backward-word" weiss--ahf)
      ("ca" "char-after" weiss--ahf)
      ("cb" "current-buffer" weiss--ahf)
      ("cc" "condition-case" weiss--ahf)
      ("cd" "copy-directory" weiss--ahf)
      ("cf" "copy-file" weiss--ahf)
      ("ci" "call-interactively" weiss--ahf)
      ("cw" "current-word" weiss--ahf)
      ("dc" "delete-char" weiss--ahf)
      ("dd" "delete-directory" weiss--ahf)
      ("dl" "dolist" weiss--ahf)
      ("dm" "(deactivate-mark)" weiss--ahf)
      ("df" "delete-file" weiss--ahf)
      ("dk" "define-key" weiss--ahf)
      ("dt" "dotimes" weiss--ahf)
      ("dr" "delete-region" weiss--ahf)
      ("dv" "defvar" weiss--ahf)
      ("do" "delete-overlay" weiss--ahf)
      ("eb" "erase-buffer" weiss--ahf)
      ("fa" "fillarray" weiss--ahf)
      ("fc" "forward-char" weiss--ahf)
      ("ff" "find-file" weiss--ahf)
      ("fl" "forward-line" weiss--ahf)
      ("fw" "forward-word" weiss--ahf)
      ("up" "(use-package ▮)" weiss--ahf)    
      ("gb" "get-buffer" weiss--ahf)
      ("gc" "goto-char" weiss--ahf)
      ("ie" "ignore-errors" weiss--ahf)
      ("kb" "kill-buffer" weiss--ahf)
      ("kr" "kill-region" weiss--ahf)
      ("kn" "(kill-new ▮)" weiss--ahf)
      ("la" "looking-at" weiss--ahf)
      ("lb" "looking-back" weiss--ahf)
      ("lc" "left-char" weiss--ahf)
      ("ld" ":load-path \"▮\"" weiss--ahf)
      ("mb" "match-beginning" weiss--ahf)
      ("mc" "mapcar" weiss--ahf)
      ("md" "make-directory" weiss--ahf)
      ("me" "match-end" weiss--ahf)
      ("ml" "make-list" weiss--ahf)
      ("mo" "make-overlay" weiss--ahf)
      ("ms" "match-string" weiss--ahf)
      ("nl" "(next-line)" weiss--ahf)
      ("mv" "make-vector" weiss--ahf)
      ("ns" "number-sequence" weiss--ahf)
      ("op" "overlay-put" weiss--ahf)
      ("os" "overlay-start" weiss--ahf)
      ("oe" "overlay-end" weiss--ahf)
      ("pm" "point-min" weiss--ahf)
      ("pn" "progn" weiss--ahf)
      ("px" "point-max" weiss--ahf)
      ("pr" "(provide '▮)" weiss--ahf)
      ("qu" ":quelpa" weiss--ahf)
      ("rb" "region-beginning" weiss--ahf)
      ("rc" "right-char" weiss--ahf)
      ("re" "region-end" weiss--ahf)
      ("rf" "rename-file" weiss--ahf)
      ("rm" "replace-match" weiss--ahf)
      ("rn" "read-number" weiss--ahf)
      ("ro" "regexp-opt" weiss--ahf)
      ("rq" "regexp-quote" weiss--ahf)
      ("rr" "replace-regexp" weiss--ahf)
      ("rs" "read-string" weiss--ahf)
      ("sb" "search-backward" weiss--ahf)
      ("sc" "shell-command" weiss--ahf)
      ("se" "save-excursion" weiss--ahf)
      ("sf" "search-forward" weiss--ahf)
      ("sm" "string-match" weiss--ahf)
      ("sr" "save-restriction" weiss--ahf)
      ("ss" "split-string" weiss--ahf)
      ("vc" "vconcat" weiss--ahf)
      ("wg" "widget-get" weiss--ahf)
      ("wr" "write-region" weiss--ahf)
      ("wt" "(defun weiss-test ()\n  \"DOCSTRING\"\n  (interactive)\n  ▮)" weiss--ahf-indent)
      ("wl" "when-let" weiss--ahf)

      ("bfn" "buffer-file-name" weiss--ahf)
      ("bmp" "buffer-modified-p" weiss--ahf)

      ("atf" "append-to-file" weiss--ahf)
      ("bol" "beginning-of-line" weiss--ahf)
      ("cdr" "cdr" weiss--ahf)
      ("cpa" "current-prefix-arg" weiss--ahf)
      ("dfr" "directory-files-recursively" weiss--ahf)
      ("efn" "expand-file-name" weiss--ahf)
      ("eol" "end-of-line" weiss--ahf)
      ("fep" "file-exists-p" weiss--ahf)
      ("fnd" "file-name-directory" weiss--ahf)
      ("fne" "file-name-extension" weiss--ahf)
      ("fnn" "file-name-nondirectory" weiss--ahf)
      ("frn" "file-relative-name" weiss--ahf)
      ("gbc" "get-buffer-create" weiss--ahf)
      ("gnb" "generate-new-buffer" weiss--ahf)
      ("gsk" "global-set-key" weiss--ahf)
      ("ifc" "insert-file-contents" weiss--ahf)
      ("lam" "lambda" weiss--ahf)
      ("lbp" "(line-beginning-position)" weiss--ahf)
      ("len" "length" weiss--ahf)
      ("lep" "(line-end-position)" weiss--ahf)
      ("mlv" "make-local-variable" weiss--ahf)
      ("msk" "make-sparse-keymap" weiss--ahf)
      ("ntr" "narrow-to-region" weiss--ahf)
      ("nts" "number-to-string" weiss--ahf)
      ("pmi" "point-min" weiss--ahf)
      ("pma" "push-mark" weiss--ahf)
      ("rap" "region-active-p" weiss--ahf)
      ("rdn" "read-directory-name" weiss--ahf)
      ("req" "require" weiss--ahf)
      ("rfn" "read-file-name" weiss--ahf)
      ("rsb" "re-search-backward" weiss--ahf)
      ("rsf" "re-search-forward" weiss--ahf)
      ("sbr" "search-backward-regexp" weiss--ahf)
      ("scb" "skip-chars-backward" weiss--ahf)
      ("scf" "skip-chars-forward" weiss--ahf)
      ("sfa" "set-face-attribute" weiss--ahf)
      ("sff" "select-frame-set-input-focus" weiss--ahf)
      ("sfm" "set-file-modes" weiss--ahf)
      ("sfr" "search-forward-regexp" weiss--ahf)
      ("sqa" "shell-quote-argument" weiss--ahf)
      ("stb" "switch-to-buffer" weiss--ahf)
      ("ste" "(string-equal ▮)" weiss--ahf)
      ("stm" "set-transient-map" weiss--ahf)
      ("stn" "string-to-number" weiss--ahf)
      ("tap" "thing-at-point" weiss--ahf)
      ("urp" "use-region-p" weiss--ahf)
      ("wcb" "with-current-buffer" weiss--ahf)
      ("wtb" "with-temp-buffer" weiss--ahf)
      ("wtf" "with-temp-file" weiss--ahf)

      ("weal" "with-eval-after-load" weiss--ahf)

      ("botap" "bounds-of-thing-at-point" weiss--ahf)
      ("bsnp" "(buffer-substring-no-properties ▮)" weiss--ahf)
      ("daer" "delete-and-extract-region" weiss--ahf)
      ("epam" "(exchange-point-and-mark)" weiss--ahf)
      ("fnse" "file-name-sans-extension" weiss--ahf)
      ("rris" "replace-regexp-in-string" weiss--ahf)
      ("yonp" "yes-or-no-p" weiss--ahf)

      ("advice-add" "(advice-add '▮ :)" weiss--ahf)
      ("abbreviate-file-name" "(abbreviate-file-name ▮)" weiss--ahf)
      ("add-hook" "(add-hook '▮)" weiss--ahf)
      ("add-text-properties" "(add-text-properties ▮)" weiss--ahf)
      ("add-to-list" "(add-to-list ▮)" weiss--ahf)
      ("alist-get" "(alist-get ▮)" weiss--ahf)
      ("and" "(and ▮)" weiss--ahf )
      ("append" "(append ▮)" weiss--ahf)
      ("append-to-file" "(append-to-file ▮)" weiss--ahf)
      ("apply" "(apply ▮)" weiss--ahf)
      ("aref" "(aref ▮)" weiss--ahf)
      ("aset" "(aset ▮)" weiss--ahf)
      ("ask-user-about-supersession-threat" "(ask-user-about-supersession-threat ▮)" weiss--ahf)
      ("assoc" "(assoc ▮)" weiss--ahf)
      ("assoc-default" "(assoc-default ▮)" weiss--ahf)
      ("assoc-string" "(assoc-string ▮)" weiss--ahf)
      ("assq" "(assq ▮)" weiss--ahf)
      ("assq-delete-all" "(assq-delete-all ▮)" weiss--ahf)
      ("autoload" "(autoload ▮)" weiss--ahf)
      ("backward-char" "(backward-char ▮)" weiss--ahf)
      ("backward-up-list" "(backward-up-list ▮)" weiss--ahf)
      ("backward-word" "(backward-word ▮)" weiss--ahf)
      ("barf-if-buffer-read-only" "(barf-if-buffer-read-only)" weiss--ahf)
      ("beginning-of-line" "(beginning-of-line)" weiss--ahf)
      ("boundp" "(boundp '▮)" weiss--ahf)
      ("bounds-of-thing-at-point" "(bounds-of-thing-at-point '▮)" weiss--ahf)
      ("buffer-base-buffer" "(buffer-base-buffer ▮)" weiss--ahf)
      ("buffer-chars-modified-tick" "(buffer-chars-modified-tick ▮)" weiss--ahf)
      ("buffer-file-name" "(buffer-file-name)" weiss--ahf)
      ("buffer-list" "(buffer-list ▮)" weiss--ahf)
      ("buffer-live-p" "(buffer-live-p ▮)" weiss--ahf)
      ("buffer-modified-p" "(buffer-modified-p ▮)" weiss--ahf)
      ("buffer-modified-tick" "(buffer-modified-tick ▮)" weiss--ahf)
      ("buffer-name" "(buffer-name ▮)" weiss--ahf)
      ("buffer-substring" "(buffer-substring ▮)" weiss--ahf)
      ("buffer-substring-no-properties" "(buffer-substring-no-properties ▮)" weiss--ahf)
      ("buffer-swap-text" "(buffer-swap-text ▮)" weiss--ahf)
      ("bufferp" "(bufferp ▮)" weiss--ahf)
      ("bury-buffer" "(bury-buffer ▮)" weiss--ahf)
      ("call-interactively" "(call-interactively '▮)" weiss--ahf)
      ("called-interactively-p" "(called-interactively-p '▮)" weiss--ahf)
      ("car" "(car ▮)" weiss--ahf)
      ("cadr" "(cadr ▮)" weiss--ahf)
      ("catch" "(catch '▮)" weiss--ahf)
      ("cdr" "(cdr ▮)" weiss--ahf)
      ("char-after" "(char-after ▮)" weiss--ahf)
      ("char-before" "(char-before ▮)" weiss--ahf)
      ("char-equal" "(char-equal ▮)" weiss--ahf)
      ("char-to-string" "(char-to-string ▮) " weiss--ahf)
      ("clear-image-cache" "(clear-image-cache ▮)" weiss--ahf)
      ("clear-visited-file-modtime" "(clear-visited-file-modtime)" weiss--ahf)
      ("clone-indirect-buffer" "(clone-indirect-buffer ▮)" weiss--ahf)
      ("clrhash" "(clrhash ▮)" weiss--ahf)
      ("compare-strings" "(compare-strings ▮)" weiss--ahf)
      ("concat" "(concat ▮)" weiss--ahf)
      ("cond" "(cond\n(▮ )\n\n)" weiss--ahf-indent)
      ("condition-case" "(condition-case \n▮\n)" weiss--ahf-indent)
      ("cons" "(cons ▮)" weiss--ahf)
      ("consp" "(consp ▮)" weiss--ahf)
      ("constrain-to-field" "(constrain-to-field ▮)" weiss--ahf)
      ("copy-alist" "(copy-alist ▮)" weiss--ahf)
      ("copy-directory" "(copy-directory ▮)" weiss--ahf)
      ("copy-file" "(copy-file ▮)" weiss--ahf)
      ("create-image" "(create-image ▮)" weiss--ahf)
      ("cts" "(char-to-string ▮) " weiss--ahf)
      ("current-buffer" "(current-buffer)" weiss--ahf)
      ("current-word" "(current-word)" weiss--ahf)
      ("custom-autoload" "(custom-autoload ▮)" weiss--ahf)
      ("defalias" "(defalias '▮)" weiss--ahf)
      ("defconst" "(defconst ▮)" weiss--ahf)
      ("defcustom" "(defcustom ▮)" weiss--ahf)
      ("defface" "(defface ▮)" weiss--ahf)
      ("defimage" "(defimage ▮)" weiss--ahf)
      ("define-key" "(define-key ▮ (kbd \"\") #')" weiss--ahf)
      ("define-minor-mode" "(define-minor-mode ▮)" weiss--ahf)
      ("defsubst" "(defsubst ▮)" weiss--ahf)
      ("defun" "(defun ▮ ()\n  \"DOCSTRING\"\n  (interactive)\n  (let (())\n\n ))" weiss--ahf-indent)
      ("defvar" "(defvar ▮)" weiss--ahf)
      ("delete" "(delete ▮)" weiss--ahf)
      ("delete-and-extract-region" "(delete-and-extract-region ▮)" weiss--ahf)
      ("delete-char" "(delete-char 1▮)" weiss--ahf)
      ("delete-directory" "(delete-directory ▮)" weiss--ahf)
      ("delete-dups" "(delete-dups ▮)" weiss--ahf)
      ("delete-field" "(delete-field ▮)" weiss--ahf)
      ("delete-file" "(delete-file ▮)" weiss--ahf)
      ("delete-region" "(delete-region ▮)" weiss--ahf)
      ("delete-overlay" "(delete-overlay '▮)" weiss--ahf)
      ("delq" "(delq ▮)" weiss--ahf)
      ("directory-file-name" "(directory-file-name ▮)" weiss--ahf)
      ("directory-files" "(directory-files ▮)" weiss--ahf)
      ("directory-files-recursively" "(directory-files-recursively ▮)" weiss--ahf)
      ("directory-name-p" "(directory-name-p ▮)" weiss--ahf)
      ("dolist" "(dolist (x ▮) \n\n)" weiss--ahf-indent)
      ("dotimes" "(dotimes (i ▮) \n)" weiss--ahf-indent)
      ("elt" "(elt ▮)" weiss--ahf)
      ("end-of-line" "(end-of-line ▮)" weiss--ahf)
      ("eq" "(eq ▮)" weiss--ahf)
      ("equal" "(equal ▮)" weiss--ahf)
      ("erase-buffer" "(erase-buffer)" weiss--ahf)
      ("error" "(error \"%s\" ▮)" weiss--ahf)
      ("expand-file-name" "(expand-file-name ▮)" weiss--ahf)
      ("fboundp" "(fboundp '▮)" weiss--ahf)
      ("featurep" "(featurep 'FEATURE▮)" weiss--ahf)
      ("field-beginning" "(field-beginning ▮)" weiss--ahf)
      ("field-end" "(field-end &optional ▮)" weiss--ahf)
      ("field-string" "(field-string ▮)" weiss--ahf)
      ("field-string-no-properties" "(field-string-no-properties ▮)" weiss--ahf)
      ("file-directory-p" "(file-directory-p ▮)" weiss--ahf)
      ("file-exists-p" "(file-exists-p ▮)" weiss--ahf)
      ("file-name-absolute-p" "(file-name-absolute-p ▮)" weiss--ahf)
      ("file-name-as-directory" "(file-name-as-directory ▮)" weiss--ahf)
      ("file-name-directory" "(file-name-directory ▮)" weiss--ahf)
      ("file-name-extension" "(file-name-extension ▮)" weiss--ahf)
      ("file-name-nondirectory" "(file-name-nondirectory ▮)" weiss--ahf)
      ("file-name-sans-extension" "(file-name-sans-extension ▮)" weiss--ahf)
      ("file-regular-p" "(file-regular-p ▮)" weiss--ahf)
      ("file-relative-name" "(file-relative-name ▮)" weiss--ahf)
      ("find-buffer-visiting" "(find-buffer-visiting ▮)" weiss--ahf)
      ("find-file" "(find-file ▮)" weiss--ahf)
      ("find-image" "(find-image ▮)" weiss--ahf)
      ("font-lock-add-keywords" "(font-lock-add-keywords ▮)" weiss--ahf)
      ("font-lock-fontify-buffer" "(font-lock-fontify-buffer ▮)" weiss--ahf)
      ("format" "(format \":%s\" ▮)" weiss--ahf)
      ;; ("format" "(format \"▮\" &optional OBJECTS)" weiss--ahf)
      ("forward-char" "(forward-char ▮)" weiss--ahf)
      ("forward-line" "(forward-line ▮)" weiss--ahf)
      ("forward-word" "(forward-word ▮)" weiss--ahf)
      ("funcall" "(funcall '▮)" weiss--ahf)
      ("function" "(function ▮)" weiss--ahf)
      ("gap-position" "(gap-position)" weiss--ahf)
      ("gap-size" "(gap-size)" weiss--ahf)
      ("generate-new-buffer" "(generate-new-buffer ▮)" weiss--ahf)
      ("generate-new-buffer" "(generate-new-buffer ▮)" weiss--ahf)
      ("generate-new-buffer-name" "(generate-new-buffer-name ▮)" weiss--ahf)
      ("get" "(get ▮ ')" weiss--ahf)
      ("get-buffer" "(get-buffer ▮)" weiss--ahf)
      ("get-buffer-create" "(get-buffer-create ▮)" weiss--ahf)
      ("get-char-code-property" "(get-char-code-property ▮)" weiss--ahf)
      ("get-char-property" "(get-char-property ▮)" weiss--ahf)
      ("get-char-property-and-overlay" "(get-char-property-and-overlay ▮)" weiss--ahf)
      ("get-file-buffer" "(get-file-buffer ▮)" weiss--ahf)
      ("get-pos-property" "(get-pos-property ▮)" weiss--ahf)
      ("get-text-property" "(get-text-property ▮)" weiss--ahf)
      ("gethash" "(gethash ▮)" weiss--ahf)
      ("global-set-key" "(global-set-key (kbd \"C-▮\") )" weiss--ahf)
      ("goto-char" "(goto-char ▮)" weiss--ahf)
      ("if" "(if ▮\n    \n )" weiss--ahf-indent)
      ("image-flush" "(image-flush ▮)" weiss--ahf)
      ("image-load-path-for-library" "(image-load-path-for-library ▮)" weiss--ahf)
      ("image-size" "(image-size ▮)" weiss--ahf)
      ("insert" "(insert ▮)" weiss--ahf)
      ("insert-and-inherit" "(insert-and-inherit ▮)" weiss--ahf)
      ("insert-before-markers-and-inherit" "(insert-before-markers-and-inherit ▮)" weiss--ahf)
      ("insert-char" "(insert-char ▮)" weiss--ahf)
      ("insert-file-contents" "(insert-file-contents ▮)" weiss--ahf)
      ("insert-image" "(insert-image ▮)" weiss--ahf)
      ("insert-sliced-image" "(insert-sliced-image ▮)" weiss--ahf)
      ("interactive" "(interactive)" weiss--ahf)
      ("ignore-errors" "(ignore-errors ▮)" weiss--ahf)
      ("kbd" "(kbd \"▮\")" weiss--ahf)
      ("kill-append" "(kill-append ▮)" weiss--ahf)
      ("kill-buffer" "(kill-buffer ▮)" weiss--ahf)
      ("kill-region" "(kill-region ▮)" weiss--ahf)
      ("lambda" "(lambda () (interactive) ▮)" weiss--ahf)
      ("last-buffer" "(last-buffer ▮)" weiss--ahf)
      ("left-char" "(left-char ▮)" weiss--ahf)
      ("length" "(length ▮)" weiss--ahf)
      ("let" "(let ((▮)\n)\n \n)" weiss--ahf-indent)
      ("let*" "(let* ((▮)\n)\n \n)" weiss--ahf-indent)
      ("line-beginning-position" "(line-beginning-position)" weiss--ahf)
      ("line-end-position" "(line-end-position)" weiss--ahf)
      ("list" "(list ▮)" weiss--ahf)
      ("load" "(load ▮)" weiss--ahf)
      ("load-file" "(load-file ▮)" weiss--ahf)
      ("looking-at" "(looking-at \"▮\")" weiss--ahf)
      ("looking-back" "(looking-back \"▮\")" weiss--ahf)
      ("make-directory" "(make-directory ▮)" weiss--ahf)
      ("make-hash-table" "(make-hash-table :test '▮)" weiss--ahf)
      ("make-indirect-buffer" "(make-indirect-buffer ▮)" weiss--ahf)
      ("make-list" "(make-list ▮)" weiss--ahf)
      ("make-sparse-keymap" "(make-sparse-keymap)" weiss--ahf)
      ("make-local-variable" "(make-local-variable ▮)" weiss--ahf)
      ("make-string" "(make-string count character)" weiss--ahf)
      ("make-overlay" "(make-overlay ▮)" weiss--ahf)
      ("mapc" "(mapc '▮)" weiss--ahf)
      ("mapcar" "(mapcar '▮)" weiss--ahf)
      ("mapconcat" "(mapconcat ▮)" weiss--ahf)
      ("maphash" "(maphash ▮)" weiss--ahf)
      ("match-beginning" "(match-beginning ▮)" weiss--ahf)
      ("match-data" "(match-data ▮)" weiss--ahf)
      ("match-end" "(match-end ▮)" weiss--ahf)
      ("match-string" "(match-string ▮)" weiss--ahf)
      ("member" "(member ▮)" weiss--ahf)
      ("member" "(member ▮)" weiss--ahf)
      ("member-ignore-case" "(member-ignore-case ▮)" weiss--ahf)
      ("memq" "(memq ▮)" weiss--ahf)
      ("memql" "(memql ▮)" weiss--ahf)
      ("message" "(message \": %s\" ▮)" weiss--ahf)
      ("narrow-to-region" "(narrow-to-region ▮)" weiss--ahf)
      ("next-char-property-change" "(next-char-property-change ▮)" weiss--ahf)
      ("next-property-change" "(next-property-change ▮)" weiss--ahf)
      ("next-single-char-property-change" "(next-single-char-property-change ▮)" weiss--ahf)
      ("next-single-property-change" "(next-single-property-change ▮)" weiss--ahf)
      ("not" "(not ▮)" weiss--ahf)
      ("not-modified" "(not-modified ▮)" weiss--ahf)
      ("nth" "(nth ▮)" weiss--ahf)
      ("null" "(null ▮)" weiss--ahf)
      ("number-sequence" "(number-sequence ▮)" weiss--ahf)
      ("number-to-string" "(number-to-string ▮)" weiss--ahf)
      ("or" "(or ▮)" weiss--ahf)
      ("other-buffer" "(other-buffer ▮)" weiss--ahf)
      ("overlay-put" "(overlay-put ov '▮)" weiss--ahf)
      ("overlay-start" "(overlay-start ▮)" weiss--ahf)
      ("overlay-end" "(overlay-end ▮)" weiss--ahf)
      ("point" "(point)" weiss--ahf)
      ("point-max" "(point-max)" weiss--ahf)
      ("point-min" "(point-min)" weiss--ahf)
      ("pop" "(pop ▮)" weiss--ahf)
      ("previous-char-property-change" "(previous-char-property-change ▮)" weiss--ahf)
      ("previous-property-change" "(previous-property-change ▮)" weiss--ahf)
      ("previous-single-char-property-change" "(previous-single-char-property-change ▮)" weiss--ahf)
      ("previous-single-property-change" "(previous-single-property-change ▮)" weiss--ahf)
      ("prin1" "(prin1 ▮)" weiss--ahf)
      ("prin1-to-string" "(prin1-to-string ▮)" weiss--ahf)
      ("princ" "(princ ▮)" weiss--ahf)
      ("print" "(print ▮)" weiss--ahf)
      ("prog1" "(prog1\n▮)" weiss--ahf-indent)
      ("prog2" "(prog2\n▮)" weiss--ahf-indent)
      ("progn" "(progn\n▮\n)" weiss--ahf-indent)
      ("propertize" "(propertize ▮)" weiss--ahf)
      ("push" "(push ▮)" weiss--ahf)
      ("push-mark" "(push-mark ▮)" weiss--ahf)
      ("put" "(put '▮)" weiss--ahf)
      ("put-image" "(put-image ▮)" weiss--ahf)
      ("put-text-property" "(put-text-property ▮)" weiss--ahf)
      ("puthash" "(puthash ▮)" weiss--ahf)
      (":quelpa" ":quelpa (▮ \n :fetcher github \n :repo )" weiss--ahf-indent)
      ("random" "(random ▮)" weiss--ahf)
      ("rassoc" "(rassoc ▮)" weiss--ahf)
      ("rassoc" "(rassoc ▮)" weiss--ahf)
      ("rassq" "(rassq ▮)" weiss--ahf)
      ("rassq-delete-all" "(rassq-delete-all ▮)" weiss--ahf)
      ("re-search-backward" "(re-search-backward \"▮\")" weiss--ahf)
      ("re-search-forward" "(re-search-forward \"▮\")" weiss--ahf)
      ("read-directory-name" "(read-directory-name \"▮:\")" weiss--ahf)
      ("read-file-name" "(read-file-name \"▮\")" weiss--ahf)
      ("read-regexp" "(read-regexp \"Type regex▮:\")" weiss--ahf)
      ("read-string" "(read-string \"What▮:\")" weiss--ahf)
      ("read-number" "(read-number \"▮:\")" weiss--ahf)
      ("regexp-opt" "(regexp-opt ▮)" weiss--ahf)
      ("regexp-quote" "(regexp-quote ▮)" weiss--ahf)
      ("region-active-p" "(region-active-p)" weiss--ahf)
      ("region-beginning" "(region-beginning)" weiss--ahf)
      ("region-end" "(region-end)" weiss--ahf)
      ("remhash" "(remhash ▮)" weiss--ahf)
      ("remove" "(remove ▮)" weiss--ahf)
      ("remove-images" "(remove-images ▮)" weiss--ahf)
      ("remove-list-of-text-properties" "(remove-list-of-text-properties ▮)" weiss--ahf)
      ("remove-text-properties" "(remove-text-properties ▮)" weiss--ahf)
      ("remq" "(remq ▮)" weiss--ahf)
      ("rename-buffer" "(rename-buffer ▮)" weiss--ahf)
      ("rename-file" "(rename-file ▮)" weiss--ahf)
      ("repeat" "(repeat ▮)" weiss--ahf)
      ("replace-match" "(replace-match ▮)" weiss--ahf)
      ("replace-regexp" "(replace-regexp \"▮\")" weiss--ahf)
      ("replace-regexp-in-string" "(replace-regexp-in-string \"▮\")" weiss--ahf)
      ("require" "(require '▮)" weiss--ahf)
      ("restore-buffer-modified-p" "(restore-buffer-modified-p ▮)" weiss--ahf)
      ("reverse" "(reverse ▮)" weiss--ahf)
      ("right-char" "(right-char ▮)" weiss--ahf)
      ("run-with-timer" "(run-with-timer ▮)" weiss--ahf)
      ("save-buffer" "(save-buffer ▮)" weiss--ahf)
      ("save-current-buffer" "(save-current-buffer ▮)" weiss--ahf)
      ("save-excursion" "(save-excursion ▮)" weiss--ahf)
      ("save-restriction" "(save-restriction ▮)" weiss--ahf)
      ("search-backward" "(search-backward \"▮\")" weiss--ahf)
      ("search-backward-regexp" "(search-backward-regexp \"▮\")" weiss--ahf)
      ("search-forward" "(search-forward \"▮\")" weiss--ahf)
      ("search-forward-regexp" "(search-forward-regexp \"▮\")" weiss--ahf)
      ("select-frame-set-input-focus" "(select-frame-set-input-focus ▮)" weiss--ahf)
      ("set-buffer" "(set-buffer ▮)" weiss--ahf)
      ("set-buffer-modified-p" "(set-buffer-modified-p ▮)" weiss--ahf)
      ("set-file-modes" "(set-file-modes ▮)" weiss--ahf)
      ("set-face-attribute" "(set-face-attribute '▮ nil :)" weiss--ahf)
      ("set-mark" "(set-mark ▮)" weiss--ahf)
      ("set-syntax-table" "(set-syntax-table ▮)" weiss--ahf)
      ("set-text-properties" "(set-text-properties ▮)" weiss--ahf)
      ("set-visited-file-modtime" "(set-visited-file-modtime ▮)" weiss--ahf)
      ("set-visited-file-name" "(set-visited-file-name ▮)" weiss--ahf)
      ("set-transient-map" "(set-transient-map\n(let ((map (make-sparse-keymap))\n)\n(define-key map (kbd \"▮\") #')\nmap)\nt)" weiss--ahf-indent)
      ("setq" "(setq ▮)" weiss--ahf)
      ("setf" "(setf ▮)" weiss--ahf)
      ("max" "(max ▮)" weiss--ahf)
      ("shell-command" "(shell-command ▮)" weiss--ahf)
      ("shell-quote-argument" "(shell-quote-argument ▮)" weiss--ahf)
      ("skip-chars-backward" "(skip-chars-backward \"▮\")" weiss--ahf)
      ("skip-chars-forward" "(skip-chars-forward \"▮\")" weiss--ahf)
      ("split-string" "(split-string ▮)" weiss--ahf)
      ("stc" "(string-to-char \"▮\")" weiss--ahf)
      ("string-collate-equalp" "(string-collate-equalp ▮)" weiss--ahf)
      ("string-collate-lessp" "(string-collate-lessp ▮)" weiss--ahf)
      ("string-equal" "(string-equal ▮)" weiss--ahf)
      ("string-greaterp" "(string-greaterp ▮)" weiss--ahf)
      ("string-lessp" "(string-lessp ▮)" weiss--ahf)
      ("string-match" "(string-match \"▮\")" weiss--ahf)
      ("string-match-p" "(string-match-p \"▮\")" weiss--ahf)
      ("string-prefix-p" "(string-prefix-p ▮)" weiss--ahf)
      ("string-prefix-p" "(string-prefix-p ▮)" weiss--ahf)
      ("string-suffix-p" "(string-suffix-p ▮)" weiss--ahf)
      ("string-suffix-p" "(string-suffix-p ▮)" weiss--ahf)
      ("string-to-char" "(string-to-char \"▮\")" weiss--ahf)
      ("string-to-number" "(string-to-number \"▮\")" weiss--ahf)
      ("string=" "(string-equal ▮)" weiss--ahf)
      ("stringp" "(stringp ▮)" weiss--ahf)
      ("substring" "(substring ▮)" weiss--ahf)
      ("substring-no-properties" "(substring-no-properties ▮)" weiss--ahf)
      ("switch-to-buffer" "(switch-to-buffer ▮)" weiss--ahf)
      ("terpri" "(terpri ▮)" weiss--ahf)
      ("text-properties-at" "(text-properties-at ▮)" weiss--ahf)
      ("text-property-any" "(text-property-any ▮)" weiss--ahf)
      ("text-property-not-all" "(text-property-not-all ▮)" weiss--ahf)
      ("thing-at-point" "(thing-at-point ▮)" weiss--ahf)
      ("throw" "(throw '▮)" weiss--ahf)
      ("toggle-read-only" "(toggle-read-only ▮)" weiss--ahf)
      ("unbury-buffer" "(unbury-buffer)" weiss--ahf)
      ("unless" "(unless ▮\n)" weiss--ahf-indent)
      ("use-region-p" "(use-region-p)" weiss--ahf)
      ("user-error" "(user-error \"%s▮\")" weiss--ahf)
      ("vector" "(vector ▮)" weiss--ahf)
      ("verify-visited-file-modtime" "(verify-visited-file-modtime ▮)" weiss--ahf)
      ("version<" "(version< \"24.4\" emacs-version)" weiss--ahf )
      ("version<=" "(version<= \"24.4\" emacs-version)" weiss--ahf )
      ("visited-file-modtime" "(visited-file-modtime)" weiss--ahf)
      ("when" "(when ▮)" weiss--ahf)
      ("when-let" "(when-let ((▮))\n\n)" weiss--ahf-indent)
      ("while" "(while (▮)\n  (setq ))" weiss--ahf-indent)
      ("widen" "(widen)" weiss--ahf)
      ("widget-get" "(widget-get ▮)" weiss--ahf)
      ("with-current-buffer" "(with-current-buffer\n▮\n)" weiss--ahf-indent)
      ("with-output-to-string" "(with-output-to-string\n▮\n)" weiss--ahf-indent)
      ("with-output-to-temp-buffer" "(with-output-to-temp-buffer\n▮\n)" weiss--ahf-indent)
      ("with-temp-buffer" "(with-temp-buffer\n▮\n)" weiss--ahf-indent)
      ("with-temp-file" "(with-temp-file\n▮\n)" weiss--ahf-indent)
      ("with-eval-after-load" "(with-eval-after-load '▮\n\n)" weiss--ahf-indent)
      ("write-char" "(write-char ▮)" weiss--ahf)
      ("write-file" "(write-file ▮)" weiss--ahf)
      ("write-region" "(write-region (point-min) (point-max) ▮)" weiss--ahf)
      ("y-or-n-p" "(y-or-n-p \"▮ \")" weiss--ahf)
      ("yes-or-no-p" "(yes-or-no-p \"▮ \")" weiss--ahf)

      ("make-vector" "(make-vector 5▮ 0)" weiss--ahf)
      ("vconcat" "(vconcat ▮)" weiss--ahf)
      ("fillarray" "(fillarray ▮ 0)" weiss--ahf)

      ;;
      )

    "Abbrev table for `elisp-mode'"
    )
#+end_src

** python
#+begin_src elisp
  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table)
    )

  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("if" "if ▮:" weiss--ahf)
      ("else" "else:" weiss--ahf)
      ("for" "for ▮ in :" weiss--ahf)
      ("while" "while ▮ :" weiss--ahf)
      ("def" "def ▮():" weiss--ahf)
      ("r" "range(▮)" weiss--ahf)
      ("rt" "return " weiss--ahf)
      ("try" "try:" weiss--ahf)
      ("ex" "except ▮:" weiss--ahf)
      ("pr" "print(▮)" weiss--ahf)
      ))
#+end_src
** misc
#+begin_src elisp
  (when (boundp 'eshell-mode-abbrev-table)
    (clear-abbrev-table eshell-mode-abbrev-table))

  (define-abbrev-table 'eshell-mode-abbrev-table
    '(
      ("mm" "module load maple/latest")
      )
    )

  (when (boundp 'c++-mode-abbrev-table)
    (clear-abbrev-table c++-mode-abbrev-table))
  (define-abbrev-table 'c++-mode-abbrev-table
    '(
      ("s" "std::" weiss--ahf)
      )
    )

  (define-abbrev-table 'text-mode-abbrev-table
    '(
      ("i" "&&&[IMG]pictures/▮.png" weiss--ahf)
      )
    )
#+end_src
** end
#+begin_src elisp
  (provide 'weiss-abbrev-mode)
#+end_src

* snails

** general
#+begin_src elisp :tangle snails/weiss-snails.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (use-package snails
    ;; :quelpa (snails 
    ;;          :fetcher github 
    ;;          :repo manateelazycat/snails)
    :load-path "/home/weiss/.emacs.d/snails"
    :ensure nil
    ;; :defer nil
    :config
    ;; (setq snails-show-with-frame t)
    (setq snails-show-with-frame nil)
    ;; (setq snails-fuz-library-load-status "load")
    (setq snails-fame-width-proportion 0.8)
    (setq snails-default-show-prefix-tips nil)

    (require 'snails-backend-file-bookmark)
    (require 'snails-backend-filter-buffer)
    (require 'snails-backend-recentf-weiss)
    (require 'snails-backend-rg-curdir)
    (require 'snails-backend-filter-buffer)

    (defvar snails-current-dir nil)
    (defun weiss-snails-get-current-dir ()
      "get the path of current file"
      (interactive)
      (ignore-errors (setq snails-current-dir (expand-file-name default-directory))))
    ;; (advice-add 'snails :before 'weiss-snails-get-current-dir)

    (setq weiss-reduce-file-path-alist
          '(
            ("🅲🅻🅿" . "Compiler-and-Language-Processing-Tools")
            ("🆂🅲" . "scientififc computing")
            ("🆅" . "Documents/Vorlesungen")
            ("🅥" . "Nutstore Files/Vorlesungen")
            ("🅹" . "src/main/java")
            ("🅙🅣" . "src/test/java")
            ("~" . "/home/weiss")
            ))

    (defun weiss-reduce-file-path (filename &optional r)
      "replace long file paths with symbol, if `r' is non-nil, then replace symbol with path"
      (interactive)
      (let ((search-str)
            (replace-str))
        (dolist (x weiss-reduce-file-path-alist)
          (if r
              (setq search-str (car x) 
                    replace-str (cdr x))
            (setq search-str (cdr x) 
                  replace-str (car x)))      
          (setq filename (replace-regexp-in-string search-str replace-str filename t))
          )
        )  
      (let ((limit 110)
            )
        (when (> (length filename) limit)
          (setq filename (substring filename -limit)))      
        )    
      filename
      )

    (defun weiss-snails-create-window ()
      (setq snails-init-conf (current-window-configuration))

      (delete-other-windows)

      (split-window)
      (ignore-errors (windmove-down))

      ;; (ignore-errors
      ;;   (dotimes (i 50)
      ;;     (windmove-down)))

      (switch-to-buffer snails-input-buffer)
      (set-window-margins (selected-window) 1 1)

      (split-window (selected-window) (line-pixel-height) nil t)
      (windmove-down)
      (switch-to-buffer snails-content-buffer)
      (set-window-margins (selected-window) 1 1)
      (other-window -1)

      (add-hook 'after-change-functions 'snails-monitor-input nil t)
      )
    (advice-add 'snails-create-window :override 'weiss-snails-create-window)

    (with-no-warnings
      (defun weiss-snails-init-face-with-theme ()
        "disable change face with theme"
        (let* ((bg-mode (frame-parameter nil 'background-mode))
               (default-background-color (face-background 'default))
               (default-foreground-color (face-foreground 'default))
               input-buffer-color
               content-buffer-color)
          (cond ((eq bg-mode 'dark)
                 (setq input-buffer-color (snails-color-blend default-background-color "#000000" 0.9))
                 (setq content-buffer-color (snails-color-blend default-background-color "#000000" 0.8)))
                ((eq bg-mode 'light)
                 (setq input-buffer-color (snails-color-blend default-background-color "#000000" 0.95))
                 (setq content-buffer-color (snails-color-blend default-background-color "#000000" 0.9))))
          (set-face-attribute 'snails-input-buffer-face nil
                              :foreground default-foreground-color
                              :background input-buffer-color)

          (set-face-attribute 'snails-content-buffer-face nil
                              :foreground default-foreground-color
                              :background content-buffer-color)

          (set-face-attribute 'snails-select-line-face nil
                              :slant 'normal
                              :foreground default-foreground-color
                              :background "wheat" )
          )
        )
      (advice-add 'snails-init-face-with-theme :override 'weiss-snails-init-face-with-theme)
      )


    (defun snails-render-web-icon ()
      (all-the-icons-faicon "globe"))

    (setq snails-prefix-backends
          '((";" '(snails-backend-projectile snails-backend-rg-curdir))
            ("," '(snails-backend-imenu snails-backend-directory-files snails-backend-current-buffer))
            ("=" '(snails-backend-buffer))
            ("!" '(snails-backend-search-pdf))
            ))

    (setq snails-default-backends
          '(
            snails-backend-filter-buffer
            snails-backend-file-bookmark
            snails-backend-recentf-weiss
            ))

    ;; (defun weiss-test ()
    ;;   "DOCSTRING"
    ;;   (interactive)
    ;;   (snails '(snails-backend-rg-curdir)))
      ;; (snails '(snails-backend-rg)))

    (define-key snails-mode-map (kbd "C-j") #'snails-select-next-item)
    (define-key snails-mode-map (kbd "C-k") #'snails-select-prev-item)
    (define-key snails-mode-map (kbd "C-s") #'snails-select-prev-backend)
    (define-key snails-mode-map (kbd "C-d") #'snails-select-next-backend)

    (define-key snails-mode-map [remap next-line] #'snails-select-next-backend)
    (define-key snails-mode-map [remap previous-line] #'snails-select-prev-backend)

    (define-key snails-mode-map (kbd "8") 'snails-select-prev-item)
    (define-key snails-mode-map (kbd "9") 'snails-select-next-item)

    (setq snails-fuz-library-load-status "unload")
    ;; (require 'fuz)
    )

  (provide 'weiss-snails)

#+end_src

** recentf-weiss
#+begin_src elisp :tangle snails/snails-backend-recentf-weiss.el :mkdirp yes :comments both 
  (require 'snails-core)
  (require 'recentf)

  ;;; Code:

  (recentf-mode 1)

  (snails-create-sync-backend
   :name
   "RECENTF-WEISS"

   :candidate-filter
   (lambda (input)
     (let (candidates)
       (dolist (file recentf-list)
         (when (and
                (> (length input) 1)
                (snails-match-input-p input file)
                )
           (snails-add-candiate 'candidates (weiss-reduce-file-path file) file))
         )
       (snails-sort-candidates input candidates 1 1)
       ))

   :candidate-icon
   (lambda (candidate)
     (snails-render-file-icon candidate))

   :candidate-do
   (lambda (candidate)
     (find-file candidate)))

  (provide 'snails-backend-recentf-weiss)



  ;;; snails-backend-recentf-weiss.el ends here
#+end_src

** imenu
#+begin_src elisp
  ;;; snails-backend-imenu.el --- IMenu backend for snails

  ;; Filename: snails-backend-imenu.el
  ;; Description: IMenu backend for snails
  ;; Author: Andy Stewart <lazycat.manatee@gmail.com>
  ;; Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
  ;; Copyright (C) 2019, Andy Stewart, all rights reserved.
  ;; Created: 2019-07-26 08:03:06
  ;; Version: 0.1
  ;; Last-Updated: 2019-07-26 08:03:06
  ;;           By: Andy Stewart
  ;; URL: http://www.emacswiki.org/emacs/download/snails-backend-imenu.el
  ;; Keywords:
  ;; Compatibility: GNU Emacs 26.2
  ;;
  ;; Features that might be required by this library:
  ;;
  ;;
  ;;

  ;;; This file is NOT part of GNU Emacs

  ;;; License
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.

  ;;; Commentary:
  ;;
  ;; IMenu backend for snails
  ;;

  ;;; Installation:
  ;;
  ;; Put snails-backend-imenu.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'snails-backend-imenu)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET snails-backend-imenu RET
  ;;

  ;;; Change log:
  ;;
  ;; 2019/07/26
  ;;      * First released.
  ;;

  ;;; Acknowledgements:
  ;;
  ;;
  ;;

  ;;; TODO
  ;;
  ;;
  ;;

  ;;; Require
  (require 'imenu)

  ;;; Code:

  (defvar snails-backend-imenu-cached-candidates nil)
  (defvar snails-backend-imenu-cached-buffer nil)

  (defun snails-backend-imenu-candidates (buffer)
    (with-current-buffer buffer
      (prog1
          (if
              ;; Use cache candidates when `snails-backend-imenu-cached-candidates' is non-nil.
              ;; Need re-generate cache when user switch different buffer.
              (and snails-backend-imenu-cached-candidates
                   (or
                    (not snails-backend-imenu-cached-buffer)
                    (equal snails-backend-imenu-cached-buffer buffer)))
              snails-backend-imenu-cached-candidates
            (setq snails-backend-imenu-cached-candidates
                  (let ((index (ignore-errors (imenu--make-index-alist t))))
                    (when index
                      (snails-backend-imenu-build-candidates
                       (delete (assoc "*Rescan*" index) index))))))
        (setq snails-backend-imenu-cached-buffer buffer))))

  (defun snails-backend-imenu-build-candidates (alist)
    (cl-remove-if
     (lambda (c)
       (or (string-equal (car c) "Types")
           (string-equal (car c) "Variables")
           ))
     (cl-loop for elm in alist
              nconc (cond
                     ((imenu--subalist-p elm)
                      (snails-backend-imenu-build-candidates
                       (cl-loop for (e . v) in (cdr elm) collect
                                (cons
                                 e
                                 (if (integerp v) (copy-marker v) v)))))
                     ((listp (cdr elm))
                      (and elm (list elm)))
                     (t
                      (and (cdr elm)
                           (setcdr elm (pcase (cdr elm)
                                         ((and ov (pred overlayp))
                                          (copy-overlay ov))
                                         ((and mk (or (pred markerp)
                                                      (pred integerp)))
                                          (copy-marker mk))))
                           (list elm)))))))

  (snails-create-sync-backend
   :name
   "IMENU"

   :candidate-filter
   (lambda (input)
     (let ((imenu-items (snails-backend-imenu-candidates snails-start-buffer))
           candidates)
       (dolist (imenu-item imenu-items)
         (when (or
                (string-equal input "")
                (snails-match-input-p input (car imenu-item)))

           (snails-add-candiate 'candidates
                                (car imenu-item)
                                (number-to-string (marker-position (cdr imenu-item))))))

       (snails-sort-candidates input candidates 0 0)))

   :candidate-do
   (lambda (candidate)
     (goto-char (string-to-number candidate))

     (snails-flash-line)))

  (provide 'snails-backend-imenu)

  ;;; snails-backend-imenu.el ends here

#+end_src

** rg-curdir
#+begin_src elisp :tangle snails/snails-backend-rg-curdir.el :mkdirp yes :comments both
  ;;; snails-backend-rg-curdir.el --- Ripgrep backend for snails
  ;; Weiss: only search in current dir by default.

  ;; Filename: snails-backend-rg.el
  ;; Description: Ripgrep backend for snails
  ;; Author: Andy Stewart <lazycat.manatee@gmail.com>
  ;; Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
  ;; Copyright (C) 2019, Andy Stewart, all rights reserved.
  ;; Created: 2019-07-23 16:41:05
  ;; Version: 0.1
  ;; Last-Updated: 2019-07-23 16:41:05
  ;;           By: Andy Stewart
  ;; URL: http://www.emacswiki.org/emacs/download/snails-backend-rg.el
  ;; Keywords:
  ;; Compatibility: GNU Emacs 26.2
  ;;
  ;; Features that might be required by this library:
  ;;
  ;;
  ;;

  ;;; This file is NOT part of GNU Emacs

  ;;; License
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.

  ;;; Commentary:
  ;;
  ;; Ripgrep backend for snails
  ;;

  ;;; Installation:
  ;;
  ;; Put snails-backend-rg.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'snails-backend-rg)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET snails-backend-rg RET
  ;;

  ;;; Change log:
  ;;
  ;; 2019/07/23
  ;;      * First released.
  ;;

  ;;; Acknowledgements:
  ;;
  ;;
  ;;

  ;;; TODO
  ;;
  ;;
  ;;

  ;;; Require
  (require 'snails-core)

  ;;; Code:

  (snails-create-async-backend
   :name
   "RG-CURDIR"

   :build-command
   (lambda (input)
     (when (and (executable-find "rg")
                (> (length input) 1))
       (let ((search-dir (expand-file-name snails-start-buffer-dir-path))
             (search-input input)
             (search-info (snails-pick-search-info-from-input input)))
         ;; (message "search-dir %s" search-dir)
         ;; If the user input character includes the path separator @, replace the current directory with the entered directory.
         (when search-info
           (setq search-dir (first search-info))
           (setq search-input (second search-info)))

         (when (memq system-type '(cygwin windows-nt ms-dos))
           (setq search-input (encode-coding-string search-input locale-coding-system))
           (setq search-dir (encode-coding-string search-dir locale-coding-system)))

         ;; Search.
         (when search-dir
           (list "rg" "--no-heading" "--column" "--color" "never" "--max-columns" "300" "--smart-case" search-input search-dir)
           ))))

   :candidate-filter
   (lambda (candidate-list)
     (let (candidates)
       (catch 'search-end
         (dolist (candidate candidate-list)
           ;; (message "before: %s" candidate)
         
           (let ((candidate-items (split-string candidate ":")))
             (snails-add-candiate
              'candidates
              ;; Truncate search file path to make sure search content in visible area.
              (format "%s:%s"
                      (string-truncate-left
                       (weiss-reduce-file-path (string-remove-prefix (or (expand-file-name snails-start-buffer-dir-path) "") (nth 0 candidate-items)))
                       snails-backend-rg-candidate-truncate-length)
                      (string-join (rest candidate-items) ":"))
              candidate))

           (when (> (length candidates) snails-backend-rg-filter-number)
             (throw 'search-end nil))))
       candidates))

   ;; :candidate-filter
   ;; (lambda (candidate-list)
   ;;   (let (candidates)
   ;;     (dolist (candidate candidate-list)
   ;;       (snails-add-candiate
   ;;        'candidates
 
   ;;        candidate
   ;;        ;; (string-remove-prefix "/home/weiss" candidate)
   ;;        candidate)))
   ;;   ;; (snails-add-candiate 'candidates candidate candidate))
   ;;   candidates)

   :candidate-icon
   (lambda (candidate)
     (snails-render-search-file-icon
      (nth 0 (split-string candidate ":"))
      (string-remove-prefix (or snails-project-root-dir "") candidate)))

   :candidate-do
   (lambda (candidate)
     (let ((file-info (split-string candidate ":")))
       (when (> (length file-info) 3)
         ;; Open file and jump to position.
         (find-file (nth 0 file-info))
         (goto-line (string-to-number (nth 1 file-info)))
         (move-to-column (max (- (string-to-number (nth 2 file-info)) 1) 0))

         ;; Flash match line.
         (snails-flash-line)
         ))))

  (provide 'snails-backend-rg-curdir)

  ;;; snails-backend-rg-curdir.el ends here
#+end_src

** filter-buffer
#+begin_src elisp :tangle snails/snails-backend-filter-buffer.el :mkdirp yes :comments both 
  ;;; Require
  (require 'snails-core)

  ;;; Code:

  (setq snails-backend-filter-buffer-blacklist
        (list
         snails-input-buffer
         snails-content-buffer
         "<none>.tex"
         "frag-master.tex"
         "_region_.tex"
         ;; " *code-conversion-work*"
         ;; " *Echo Area "
         ;; " *Minibuf-"
         ;; " *Custom-Work*"
         ;; " *pyim-page-tooltip-posframe-buffer*"
         ;; " *load"
         ;; " *server"
         ;; " *snails tips*"
         ;; "*eaf*"
         ;; " *company-box-"
         ;; " *emacsql"
         ;; " *org-src-fontification:"
         ;; " *which-key"
         ;; " *counsel"
         ;; " *temp file*"
         ;; "*dashboard*"
         ;; "*straight-process*"
         ;; " *telega-server*"
         ;; "*tramp/"
         ;; " *Org todo*"
         ;; " *popwin dummy*"
         ))

  (setq snails-backend-filter-buffer-whitelist
        (list
         "*scratch*"
         "*Messages*"
         "backup_"
         ;; "*eaf*"
         "*Telega Root*"
         "*SQL: Postgres*"
         "*ein:"
         ))

  (setq snails-backend-filter-buffer-blacklist-RegEx 
        (list
         ;; "\*....\-....\-....\-....\-....\-....\-...."
         "\*.*" 
         "Ʀ.*"
         )
        )

  (defun snails-backend-filter-buffer-whitelist-buffer (buf)
    (let ((r nil))
      (dolist (whitelist-buf snails-backend-filter-buffer-whitelist r)
        (when (string-prefix-p whitelist-buf (buffer-name buf))
          (setq r t)))
      )
    )

  (defun snails-backend-filter-buffer-not-blacklist-buffer (buf)
    (catch 'failed
      (dolist (backlist-buf snails-backend-filter-buffer-blacklist)
        (when (string-prefix-p backlist-buf (buffer-name buf))
          (throw 'failed nil)))
      t))

  (defun snails-backend-filter-buffer-not-blacklist-buffer-RegEx (buf)
    (catch 'failed
      (dolist (backlist-buf snails-backend-filter-buffer-blacklist-RegEx)
        (when (string-match backlist-buf (buffer-name buf))
          (throw 'failed nil)))
      t))

  (defun weiss-buffer-name-limit (str limit-number)
    "DOCSTRING"
    (interactive)
    (if (> (length str) limit-number)
        (substring str 0 limit-number)
      str
      )
    )

  (defun filter--check-if-mode (buf mode)
    "Check if buf is in some mode. mode is a string"
    (interactive)
    (string-match mode (format "%s" (with-current-buffer buf major-mode))))


  (snails-create-sync-backend
   :name
   "FILTER-BUFFER"

   :candidate-filter
   (lambda (input)
     (let (candidates)
       ;; (let ((rest-buffer-list (cdr (buffer-list))))
       ;; (dolist (buf rest-buffer-list)
       (dolist (buf (buffer-list))
         (when (and
                (not (string= (buffer-name snails-start-buffer) (buffer-name buf)))
                (or (and (snails-backend-filter-buffer-whitelist-buffer buf)
                             (snails-match-input-p input (buffer-name buf)))
                        (and
                         (snails-backend-filter-buffer-not-blacklist-buffer buf)
                         (snails-backend-filter-buffer-not-blacklist-buffer-RegEx buf)
                         (or
                          (string-equal input "")
                          (snails-match-input-p input (buffer-name buf))
                          (and (filter--check-if-mode buf "eaf") (snails-match-input-p input (concat "eaf " (buffer-name buf))))
                          (and (filter--check-if-mode buf "dired") (snails-match-input-p input (concat "di " (buffer-name buf))))
                          ))))
           (snails-add-candiate 'candidates (buffer-name buf) (buffer-name buf))
           ))
       (snails-sort-candidates input candidates 1 1)
       candidates))

   :candidate-icon
   (lambda (candidate)
     (snails-render-buffer-icon candidate))

   :candidate-do
   (lambda (candidate)
     (switch-to-buffer candidate)))

  (provide 'snails-backend-filter-buffer)



  ;;; snails-backend-filter-buffer.el ends here
#+end_src

** file-bookmark
#+begin_src elisp :tangle snails/snails-backend-file-bookmark.el :mkdirp yes :comments both 
  ;;; Require
  (require 'snails-core)
  (require 'bookmark)

  ;;; Code:

  (defun filter--check-if-mode (buf mode)
    "Check if buf is in some mode. mode is a string"
    (interactive)
    (string-match mode (format "%s" (with-current-buffer buf major-mode))))

  (snails-create-sync-backend
   :name
   "FILE-BOOKMARK"

   :candidate-filter
   (lambda (input)
     (let (candidates)
       (dolist (bookmark (bookmark-all-names))
         (when (and 
                (> (length input) 1)
                (not (string-match " " bookmark))
                (or
                 (string-equal input "")
                 (snails-match-input-p input bookmark))
                )
           (snails-add-candiate 'candidates bookmark bookmark)))
       (snails-sort-candidates input candidates 0 0)
       candidates))

   :candidate-icon
   (lambda (candidate)
     (snails-render-file-icon candidate))


   :candidate-do
   (lambda (candidate)
     (find-file (bookmark-get-filename candidate))))

  (provide 'snails-backend-file-bookmark)
#+end_src
** projectile
#+begin_src elisp
  ;;; snails-backend-projectile.el --- Projectile backend for snails

  ;; Filename: snails-backend-projectile.el
  ;; Description: Projectile backend for snails
  ;; Author: Cosven <http://cosven.me>
  ;; Maintainer: Cosven <http://cosven.me>
  ;; Copyright (C) 2019, Andy Stewart, all rights reserved.
  ;; Created: 2019-08-07 05:50:41
  ;; Version: 0.1
  ;; Last-Updated: 2019-08-07 05:50:41
  ;;           By: Cosven
  ;; URL: http://www.emacswiki.org/emacs/download/snails-backend-projectile.el
  ;; Keywords:
  ;; Compatibility: GNU Emacs 26.2
  ;;
  ;; Features that might be required by this library:
  ;;
  ;;
  ;;

  ;;; This file is NOT part of GNU Emacs

  ;;; License
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.

  ;;; Commentary:
  ;;
  ;; Projectile backend for snails
  ;;

  ;;; Installation:
  ;;
  ;; Put snails-backend-projectile.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'snails-backend-projectile)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET snails-backend-projectile RET
  ;;

  ;;; Change log:
  ;;
  ;; 2019/08/07
  ;;      * First released.
  ;;

  ;;; Acknowledgements:
  ;;
  ;;
  ;;

  ;;; TODO
  ;;
  ;;
  ;;

  ;;; Require
  (require 'snails-core)


  ;;; Code:

  (defun snails-backend-projectile-project-root ()
    "Find projectile root."
    (projectile-project-root (snails-start-buffer-dir)))

  (defun snails-backend-projectile-candidates ()
    "List project files."
    (when (featurep 'projectile)
      (let ((project-root (snails-backend-projectile-project-root)))
        (when project-root
          (projectile-project-files project-root)))))

  (snails-create-sync-backend
   :name
   "PROJECTILE"

   :candidate-filter
   (lambda (input)
     (ignore-errors
       (when (> (length input) 1)
         (let ((candidates)
               (project-root (snails-backend-projectile-project-root))
               (project-files (snails-backend-projectile-candidates)))
           (when project-files
             (dolist (file project-files)
               (when (or
                      (string-equal input "")
                      (snails-match-input-p input file))
                 (setq file-path (expand-file-name file project-root))
                 (snails-add-candiate 'candidates file file-path))))
           (snails-sort-candidates input candidates 1 1))))
     )

   :candidate-icon
   (lambda (candidate)
     (snails-render-file-icon candidate))

   :candidate-do
   (lambda (candidate)
     (snails-find-file candidate)))

  (provide 'snails-backend-projectile)

  ;;; snails-backend-projectile.el ends here
#+end_src

** directory
#+begin_src elisp
;;; snails-backend-directory-files.el --- Directory files backend for snails

;; Filename: snails-backend-directory-files.el
;; Description: Rencent files backend for snails
;; Author: Andy Stewart <lazycat.manatee@gmail.com>
;; Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
;; Copyright (C) 2019, Andy Stewart, all rights reserved.
;; Created: 2019-09-21 6:41:46
;; Version: 0.1
;; Last-Updated: 2019-09-21 6:41:46
;;           By: Andy Stewart
;; URL: http://www.emacswiki.org/emacs/download/snails-backend-directory-files.el
;; Keywords:
;; Compatibility: GNU Emacs 26.2
;;
;; Features that might be required by this library:
;;
;;
;;

;;; This file is NOT part of GNU Emacs

;;; License
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.

;;; Commentary:
;;
;; Rencent files backend for snails
;;

;;; Installation:
;;
;; Put snails-backend-directory-files.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name "~/elisp"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'snails-backend-directory-files)
;;
;; No need more.

;;; Customize:
;;
;;
;;
;; All of the above can customize by:
;;      M-x customize-group RET snails-backend-directory-files RET
;;

;;; Change log:
;;
;; 2019/09/21
;;      * First released.
;;

;;; Acknowledgements:
;;
;;
;;

;;; TODO
;;
;;
;;

;;; Require
(require 'snails-core)

;;; Code:

(snails-create-sync-backend
 :name
 "DIRECTORY FILES"

 :candidate-filter
 (lambda (input)
   (when (> (length input) 0)
   (let* ((current-directory (snails-start-buffer-dir))
          (absolute-path current-directory)
          filepath
          candidates)
     (when (string-match-p "/" input)
       (setq absolute-path (expand-file-name input absolute-path)
             current-directory (file-name-directory absolute-path))
       (if (directory-name-p input)
           (setq input "")
         (setq input (file-name-base absolute-path))))

     (dolist (file (directory-files current-directory nil  "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)"))
       (when (or
              (string-equal input "")
              (snails-match-input-p input file))
         (setq filepath (concat current-directory file))
         (snails-add-candiate 'candidates file filepath)))
     (snails-sort-candidates input candidates 1 1))))

 :candidate-icon
 (lambda (candidate)
   (snails-render-file-icon candidate))

 :candidate-do
 (lambda (candidate)
   (snails-find-file candidate)))

(provide 'snails-backend-directory-files)

;;; snails-backend-directory-files.el ends here

#+end_src
** search-pdf
#+begin_src elisp
;;; snails-backend-search-pdf.el --- search pdf with rga

;; Filename: snails-backend-search-pdf.el
;; Description: search pdf with rga
;; Author: lyjdwh <lyjdwh@gmail.com>
;; Maintainer: lyjdwh <lyjdwh@gmail.com>
;; Copyright (C) 2019, Andy Stewart, all rights reserved.
;; Created: 2020-07-29 12:00
;; Version: 0.1
;; Last-Updated: 2020-07-29 12:00:00
;;           By: lyjdwh
;; URL: http://www.emacswiki.org/emacs/download/snails-backend-search-pdf.el
;; Keywords:
;; Compatibility: GNU Emacs 26.2
;;
;; Features that might be required by this library:
;;
;;
;;

;;; This file is NOT part of GNU Emacs

;;; License
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.

;;; Commentary:
;;
;; fasd backend for snails
;;

;;; Installation:
;;
;; Put snails-backend-fasd.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name "~/elisp"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'snails-backend-search-pdf)
;;
;; No need more.

;;; Customize:
;;
;;
;;
;; All of the above can customize by:
;;      M-x customize-group RET snails-backend-fasd.el RET
;;

;;; Change log:
;;
;; 2019/07/23
;;      * First released.
;;

(require 'snails-core)

(defvar snails-backend-search-pdf-dir nil
  "the dir which snails-backend-search-pdf search at.")

(snails-create-async-backend
 :name
 "search-pdf"

 :build-command
 (lambda (input)
   (when (and (executable-find "rga")
              (> (length input) 0))
     (let ((search-dir (or snails-project-root-dir (expand-file-name (snails-start-buffer-dir) )))
           (search-input input)
           (search-info (snails-pick-search-info-from-input input)))

       ;; If the user input character includes the path separator @, replace the current directory with the entered directory.
       (when search-info
         (setq search-dir (first search-info))
         (setq search-input (second search-info)))

       (when (memq system-type '(cygwin windows-nt ms-dos))
         (setq search-input (encode-coding-string search-input locale-coding-system))
         (setq search-dir (encode-coding-string search-dir locale-coding-system)))

       (setq snails-backend-search-pdf-dir search-dir)
       (message (format "searching pdf at %s" search-dir))

       ;; Search.
       (when search-dir
         (list "rga" "--no-heading" "--column" "--color" "never" "--max-columns" "300" "--rga-adapters=poppler" search-input search-dir)
         ))))

 :candidate-filter
 (lambda (candidate-list)
   (let (candidates)
     (dolist (candidate candidate-list)
       (let ((candidate-info (split-string candidate ":")))
         (snails-add-candiate
          'candidates
          (format "%s: %s"
                  (file-relative-name (nth 0 candidate-info) snails-backend-search-pdf-dir )
                  (string-join (cddr candidate-info)))
          candidate)))
     candidates))

 :candidate-icon
 (lambda (candidate)
   (snails-render-search-file-icon
    (nth 0 (split-string candidate ":"))
    candidate))

 :candidate-do
 (lambda (candidate)
   (let ((file-info (split-string candidate ":")))
     (when (> (length file-info) 3)
       ;; Open pdf and jump to page.
       (if (and nil (require 'eaf nil 'noerror))
           (progn
             (eaf-open (nth 0 file-info))
             (eaf-call "handle_input_message"
                       eaf--buffer-id
                       "jump_page"
                       (string-to-number (substring (nth 2 file-info) 5))))
         (progn
           (find-file (nth 0 file-info))
           (pdf-view-goto-page (string-to-number (substring (nth 2 file-info) 5)))))

       ;; Flash match line.
       (snails-flash-line)
       ))))

(provide 'snails-backend-search-pdf)

#+end_src

** out of use
#+begin_src elisp :tangle no
(use-package fuz
  :disabled
  :config
  ;; (require 'fuz-core nil t)
  (unless (require 'fuz-core nil t)
    (fuz-build-and-load-dymod))
  )
#+end_src

* latex
:PROPERTIES:
:header-args: :tangle latex/weiss-latex.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** general
#+begin_src elisp
  (require 'org)
  ;; (require 'latex)
  ;; (use-package latex)

  (add-to-list 'load-language-list '(latex . t))
#+end_src

** packages
#+begin_src elisp
  (use-package company-auctex
    :disabled
    :hook (LaTeX-mode-hook)
    :config
    (company-auctex-init))

  ;; (require 'ox-enumerate-latex) ;; for export

  (use-package org-edit-latex
    ;; :disabled
    :ensure nil
    ;; :load-path "/home/weiss/.emacs.d/local-package/"
    ;; :quelpa (org-edit-latex :fetcher github
    ;; :repo "et2010/org-edit-latex")
    ;; :hook (org-mode . org-edit-latex-mode)
    ;; :config
    ;; (setq org-edit-latex-inline-beg-regexp ".* $^")
    )

  (use-package magic-latex-buffer
    ;; :disabled
    ;; cool style
    ;; :hook ((LaTeX-mode . magic-latex-buffer)
    ;; (latex-mode . magic-latex-buffer))
    )
#+end_src

** functions
#+begin_src elisp
  (defun weiss-add-enumerate-to-all-headlines ()
    "DOCSTRING"
    (interactive)
    (beginning-of-buffer)
    (while (not (eq (point) (point-max)))
      (org-next-visible-heading 1)
      (org-set-tags ":enumerate:"))  
    )

  (defun weiss-export-pdf-dwim ()
    "DOCSTRING"
    (interactive)
    (let ((current-frame (get-frame-name)))
      (if (string= current-frame "PDF-Export") 
          (org-latex-export-to-pdf-enumerate)    
        (org-latex-export-to-pdf-enumerate-new-frame)  
        )
      ))

  (defun weiss-latex-buffer-preview ()
    "If current-prefix-arg then remove preview, else preview all"
    (interactive)
    (if current-prefix-arg
        (preview-clearout-buffer)
      (let ((text (buffer-substring-no-properties 1 (min 100 (point-max)))))    
        (if (or (string-match "begin{tikzpicture}" text)
                (string-match "begin{forest}" text))
            (let ((buffer-file-name nil))
              (if current-prefix-arg
                  (preview-clearout-buffer)
                (message "%s" "preview-buffer")
                (preview-buffer)))
          (weiss-org-preview-latex-and-image)
          )))
    )

  (defun weiss-quick-add-latex-style-sout ()
    (interactive)
    (let ((region-string
           (if (use-region-p)
               (delete-and-extract-region (region-beginning) (region-end))
             (delete-and-extract-region (point) (+ 1 (point))))))
      (insert (format "$ \\sout{\\textrm{%s}} $" region-string))
      ))

  (defun weiss--quick-add-latex-style (latex-style)
    "Quick add latex style"
    (interactive)
    (let ((region-string
           (if (use-region-p)
               (delete-and-extract-region (region-beginning) (region-end))
             (delete-and-extract-region (point) (+ 1 (point))))))
      (insert (format "\\%s{%s}" latex-style region-string))
      )
    )

  (defun weiss-delete-backward-bracket-and-mark-bracket-text-latex-mode ()
    "DOCSTRING"
    (interactive)
    (cond
     ;; ((string= (char-to-string (char-before)) ">")  (delete-char -1))
     ((member (char-to-string (char-before)) weiss-latex-special-markers)
      (let ((before-point (point))
            (mark-point )
            (special-marker (char-to-string (char-before))))
        (delete-char -1)
        (when (string-match (regexp-opt (list special-marker)) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
          (if (member (char-to-string (char-before (- (point) 0))) (list " " "\n"))
              (progn (search-forward special-marker)
                     (delete-char -1)
                     (setq mark-point (- before-point 1))
                     )
            (search-backward special-marker)
            (delete-char 1)
            (setq mark-point (- before-point 2))
            )
          (push-mark mark-point)
          (setq mark-active t)
          (setq deactivate-mark nil)
          (exchange-point-and-mark)
          ))
      )
     ((member (char-to-string (char-before)) '("}" "{"))
      (if (member (char-to-string (char-before)) '("}"))
          (xah-delete-backward-bracket-text)
        (xah-delete-forward-bracket-text)
        )
      (let ((before-point (point))
            (before-char (char-before))
            )
        ;; if char-before is a-z or A-Z
        (when (or (and (> before-char 96) (< before-char 123)) (and (> before-char 64) (< before-char 91)))
          ;; 92 -> \
          (if (and (re-search-backward "[ {}+]") (eq (char-after (1+ (point))) 92))
              (kill-region (1+ (point)) before-point)
            (goto-char before-point)
            (when (eq (char-after (line-beginning-position)) 92) (kill-region (line-beginning-position) (point)))
            )
          )))
     (t (xah-delete-backward-char-or-bracket-text))
     )
    )
  (defun weiss-delete-forward-bracket-and-mark-bracket-text-latex-mode ()
    "DOCSTRING"
    (interactive)
    (cond
     ;; ((string= (char-to-string (char-after)) ">")  (delete-char -1))
     ((member (char-to-string (char-after)) weiss-latex-special-markers)
      (let ((before-point (point))
            (mark-point )
            (special-marker (char-to-string (char-after))))
        (delete-char 1)
        (when (string-match (regexp-opt (list special-marker)) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
          (if (member (char-to-string (char-before (- (point) 0))) (list " " "\n"))
              (progn (search-forward special-marker)
                     (delete-char 1)
                     (setq mark-point (- before-point 1))
                     )
            (search-backward special-marker)
            (delete-char 1)
            (setq mark-point (- before-point 2))
            )
          (push-mark mark-point)
          (setq mark-active t)
          (setq deactivate-mark nil)
          (exchange-point-and-mark)
          ))
      )
     ((member (char-to-string (char-after)) '("}" "{"))
      (forward-char)
      (if (member (char-to-string (char-before)) '("}"))
          (xah-delete-backward-bracket-text)
        (xah-delete-forward-bracket-text)
        )
      (let ((before-point (point))
            (before-char (char-before))
            )
        ;; if char-after is a-z or A-Z
        (when (or (and (> before-char 96) (< before-char 123)) (and (> before-char 64) (< before-char 91)))
          ;; 92 -> \
          (if (and (re-search-backward "[ {}+]") (eq (char-after (1+ (point))) 92))
              (kill-region (1+ (point)) before-point)
            (goto-char before-point)
            (when (eq (char-after (line-beginning-position)) 92) (kill-region (line-beginning-position) (point)))
            )
          )))
     (t (xah-delete-forward-char-or-bracket-text))
     )
    )
#+end_src

** export
#+begin_src elisp 
  ;; (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))

  (setq
   org-export-headline-levels 5
   org-export-with-tags nil
   org-latex-listings 'minted
   org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   )
    ;; \\setlength\\parindent{0pt}
  ;; \usepackage{xcolor}
  ;; \definecolor{code}{HTML}{986801}
  (add-to-list 'org-latex-packages-alist '("" "minted" t))

  ;; (add-to-list 'org-latex-packages-alist '("" "tikz" t))
  ;; ;; \\usepackage{arev}

  (add-to-list 'org-latex-classes
               '("weiss-Paper"
                 "\\documentclass[11pt]{report}

  [PACKAGES]
  \\makeatletter
  \\setlength\\parindent{0pt}
  \\usepackage[table]{xcolor}
  \\usepackage{lipsum}
  \\usepackage{ifsym}
  \\usepackage{fontawesome}
  \\usepackage{enumitem}
  \\usepackage{changepage}
  \\usepackage{inconsolata}
  \\usepackage{xcolor}
  \\definecolor{code}{HTML}{986801}
  \\setminted[]{tabsize=2, breaklines=true, linenos=true}
  \\newenvironment{right_indent}
    {\\begin{adjustwidth}{0.5cm}{0em}\\ }
    {\\end{adjustwidth}}
  \\usepackage{titlesec}
  \\titleformat{\\chapter}[display]   
  {\\normalfont\\huge\\bfseries}{\\chaptertitlename\\ \\thechapter}{20pt}{\\Huge}   
  \\titlespacing*{\\chapter}{0pt}{-15pt}{40pt}
  \\renewcommand\\section{\\leftskip 0pt\\@startsection {section}{1}{\\z@}%
                                     {-3.5ex \\@plus -1ex \\@minus -.2ex}%
                                     {2.3ex \\@plus.2ex}%
                                     {\\normalfont\\Large\\bfseries}}%
  \\renewcommand\\subsection{\\leftskip 0pt\\@startsection{subsection}{2}{\\z@}%
                                       {-3.25ex\\@plus -1ex \\@minus -.2ex}%
                                       {1.5ex \\@plus .2ex}%
                                       {\\normalfont\\large\\bfseries}}%

  \\newcommand\\Xsubsection{\\@startsection{subsection}{8}{\\z@}%
                                       {-3.25ex\\@plus -1ex \\@minus -.2ex}%
                                       {1.5ex \\@plus .2ex}%
                                       {\\normalfont\\normalsize\\bfseries\\leftskip 3ex}}%
  \\newcommand\\Xsubsubsection{\\@startsection{subsubsection}{8}{\\z@}%
                                       {-3.25ex\\@plus -1ex \\@minus -.2ex}%
                                       {1.5ex \\@plus .2ex}%
                                       {\\normalfont\\normalsize\\bfseries\\leftskip 6ex}}%

  \\newcommand\\Mysubsection[1]{\\Xsubsection{#1}\\leftskip 4ex}
  \\newcommand\\Mysubsubsection[1]{\\Xsubsubsection{#1}\\leftskip 7ex}
  \\renewcommand{\\labelitemi}{$\\bullet$}
  \\renewcommand{\\labelitemii}{$\\circ$}
  \\renewcommand{\\labelitemiii}{$\\circ$}
  \\renewcommand{\\labelitemiv}{$\\circ$}
  [EXTRA]
  "
                 ;; ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\Mysubsection{%s}")
                 ("\\subsubsection{%s}" . "\\Mysubsubsection{%s}")
                 ("\\paragraph{%s}" . "\\paragraph{%s}")
                 ))


  ;; (setq org-latex-default-class "weiss-abgabe")
#+end_src

** misc
#+begin_src elisp 
  ;; for delete bracket
  (setq weiss-latex-special-markers '("$"))
  ;; Preview
  (setq org-latex-create-formula-image-program 'dvipng)
  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t)
    )
(plist-put org-format-latex-options :scale 1.5)
#+end_src

** keybinding
#+begin_src elisp
  (ryo-modal-keys
   (:mode 'latex-mode)
   ("u" weiss-org-preview-latex-and-image)
   ("<escape> <escape>" (
                         ("i" ignore
                          :name "mathit"
                          :then ((lambda()(weiss--quick-add-latex-style "mathit")))
                          )
                         ("t" ignore
                          :name "texttt"
                          :then ((lambda()(weiss--quick-add-latex-style "texttt")))
                          )
                         ("b" ignore
                          :name "mathbb"
                          :then ((lambda()(weiss--quick-add-latex-style "mathbb")))
                          )
                         ("r" ignore
                          :name "textrm"
                          :then ((lambda()(weiss--quick-add-latex-style "textrm")))
                          )
                         ("s" ignore
                          :name "textsc"
                          :then ((lambda()(weiss--quick-add-latex-style "textsc")))
                          )
                         ("u" ignore
                          :name "underline"
                          :then ((lambda()(weiss--quick-add-latex-style "underline")))
                          )
                         ("f" ignore
                          :name "textbf"
                          :then ((lambda()(weiss--quick-add-latex-style "textbf")))
                          )
                         ("h" ignore
                          :name "hat"
                          :then ((lambda()(weiss--quick-add-latex-style "hat")))
                          )
                         ("c" ignore
                          :name "mathcal"
                          :then ((lambda()(weiss--quick-add-latex-style "mathcal")))
                          )
                         ("RET" ignore
                          :name "new line"
                          :then ((lambda()(weiss-insert-bracket-pair "&" "\\\\")))
                          )
                         ("-" weiss-quick-add-latex-style-sout
                          :name "sout")
                         )
    )
   )

#+end_src

** end
#+begin_src elisp
(provide 'weiss-latex)
#+end_src

* ui
:PROPERTIES:
:header-args: :tangle ui/weiss-ui.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
** window/frame
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  ;; (add-to-list 'display-buffer-alist
    ;; (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
  (winner-mode)
  (if (display-graphic-p)
      (progn
        (setq default-frame-alist weiss-desktop-left-frame-alist)
        (setq initial-frame-alist weiss-desktop-right-frame-alist)
        )
    (progn
      (setq initial-frame-alist '( (tool-bar-lines . 0)))
      (setq default-frame-alist '( (tool-bar-lines . 0)))))

  (use-package popwin 
    ;; :disabled
    :diminish
    :config
    (popwin-mode 1)
    (push '(debugger-mode :height 30) popwin:special-display-config)
    (push '("*Stardict Output*" :height 30) popwin:special-display-config)
    ;; (push '("weiss_abbrevs.el" :height 30) popwin:special-display-config)
    (push '("*quickrun*" :height 10) popwin:special-display-config)
    (push '("*meghanada-typeinfo*" :height 30) popwin:special-display-config)
    ;; *Org Src abgabe-blatt01-AlgoDat.org[ LaTeX environment ]*
    (setq popwin:special-display-config (delete '(occur-mode :noselect t) popwin:special-display-config))
    )

#+end_src

** theme/modeline
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (use-package nyan-mode
    :config
    (nyan-mode))

  (use-package doom-modeline 
    :diminish
    ;; :diminish doom-modeline-mode
    :init
    ;; (setq doom-modeline-modal-icon nil)
    (setq doom-modeline-window-width-limit fill-column
          ;; doom-modeline-project-detection
          ;; doom-modeline-buffer-file-name-style 'relative-to-project
          ;; doom-modeline-bar-width 6
          doom-modeline-window-width-limit 110
          )
    ;; (setq doom-modeline-minor-modes t)
      :hook (after-init . doom-modeline-mode)
    )

  (if weiss-dumped-p 
      (enable-theme 'doom-one-light)
    (load-theme 'doom-one-light t)
    )
#+end_src

*** themes
#+begin_src elisp
  (use-package doom-themes)
#+end_src

** line number
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (line-number-mode -1)
  (use-package display-line-numbers
    :custom
    (display-line-numbers-grow-only t)
    (line-number-display-limit-width 200)
    (display-line-numbers-width 3 "minimum 3 cols used for line num")
    :hook
    (prog-mode . (lambda () (interactive)(display-line-numbers-mode)(setq display-line-numbers 'relative)
                   ) )
    (dired-mode . display-line-numbers-mode)
    ;; (conf-mode . display-line-numbers-mode)
    ;; (text-mode . display-line-numbers-mode)
    )
#+end_src

** highlight
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (use-package highlight-indent-guides 
    ;; :disabled
    :diminish
    :hook
    (python-mode . highlight-indent-guides-mode)
    :config
    ;; (defun my-highlighter (level responsive display)
    ;;   ;; (if (or (< level 2)(= 0 (mod level 2)))
    ;;   ;; (if (= 0 (mod level 2))
    ;;   (if (or (< level 1))
    ;;       nil
    ;;     (highlight-indent-guides--highlighter-default level responsive display)))
    ;; character style
    ;; (setq highlight-indent-guides-method 'character)
    ;; (setq highlight-indent-guides-character ?\>)
    ;; (setq highlight-indent-guides-highlighter-function 'my-highlighter)

    ;; column style
    (setq highlight-indent-guides-auto-enabled nil)
    (setq highlight-indent-guides-method 'character)
    (set-face-attribute 'highlight-indent-guides-character-face nil :foreground "gray")
    ;; (setq highlight-indent-guides-auto-odd-face-perc #a9a9a9)
    ;; (set-face-background 'highlight-indent-guides-odd-face "#a9a9a9")
    ;; (set-face-background 'highlight-indent-guides-even-face "#FAFAFA")
    ;; (setq highlight-indent-guides-auto-even-face-perc 15)
    )

  (use-package rainbow-mode
    :hook
    (prog-mode . rainbow-mode)
    :init
    (setq rainbow-html-colors nil)
    (setq rainbow-html-colors nil)
    (setq rainbow-r-colors nil)
    (setq rainbow-x-colors nil)
    (setq rainbow-ansi-colors nil)
    (setq rainbow-latex-colors nil)
    (setq rainbow-r-colors-alist nil)
    )

  (use-package highlight-parentheses
    :hook (prog-mode . highlight-parentheses-mode)
    :config
    (setq
     hl-paren-highlight-adjacent t
     hl-paren-colors '("#E53E3E" "#383a42" "#383a42" "#383a42")
     )
    (set-face-attribute 'hl-paren-face nil :weight 'bold)
    ;; (setq hl-paren-background-colors '("#E53E3E" "#c9bce9" "#FAFAFA""#FAFAFA"))
    )

  (use-package hl-todo
    :init
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))
    :config
    (defhydra hydra-todo (global-map "M-t")
      "goto-todo"
      ("o" hl-todo-occur "occur")
      ("j" hl-todo-next "next")
      ("k" hl-todo-previous "prev")
      ("i" hl-todo-insert "insert")
      ("q" nil "quit"))
    (global-hl-todo-mode))

  (use-package color-outline
    ;; :disabled 
    :diminish
    :hook (prog-mode . color-outline-mode)
    :load-path "/home/weiss/.emacs.d/local-package/"
    :ensure nil
    )

  (use-package highlight-symbol)

  (use-package anzu 
    :diminish 
    ;; :hook (after-init . )
    :config
    (global-anzu-mode +1)
    )

  (use-package hl-line)
#+end_src

** format/indent
#+begin_src elisp
  (use-package web-beautify)
  (use-package origami)
#+end_src
** font
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (use-package ligature
    ;; :disabled
    :quelpa (ligature 
             :fetcher github 
             :repo mickeynp/ligature.el)
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (let ((ligatures '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                       ":::" "::=" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "-<<"
                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                       "..." "+++" "/==" "_|_" "www" "&&" "^=" "~~" "~="
                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                       "?=" "?." "??" ";;" "/*" "/=" "/>" "__" "~~" "(*" "*)"
                       "://"))
          )
      (ligature-set-ligatures 'prog-mode ligatures)    
      (ligature-set-ligatures 'sgml-mode ligatures)    
      )

    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (when (display-graphic-p)
    ;; Set default font
    (cl-loop for font in '("JetBrainsMono" "Fira Code" "DejaVu Sans Mono" "M+1m" "SF Mono" "iosevka" "Hack" "Source Code Pro" 
                           "Menlo" "Monaco" "Consolas")
             when (font-installed-p font)
             return (set-face-attribute 'default nil
                                        :font font
                                        :height 110))

    ;; Specify font for all unicode characters
    (cl-loop for font in '("Symbola" "Apple Symbols" "Symbol" "icons-in-terminal")
             when (font-installed-p font)
             return (set-fontset-font t 'unicode font nil 'prepend))

    ;; Specify font for Chinese characters
    (cl-loop for font in '("WenQuanYi Micro Hei" "Microsoft Yahei")
             when (font-installed-p font)
             return (set-fontset-font t '(#x4e00 . #x9fff) font)))



#+end_src

** font lock face
:PROPERTIES:
:header-args: :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp 
  (set-face-attribute 'default nil :font "JetBrainsMono")
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono")
  ;; (set-face-attribute 'variable-pitch nil :font "Route159" :height 1.05)
  (set-face-attribute 'variable-pitch nil :font "lato" :height 1.05)

  (set-face-attribute 'font-lock-keyword-face nil :foreground "#5b5e6b" :weight 'extrabold :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil :foreground "#9ca0a4" :weight 'light :slant 'normal)

  (set-face-attribute 'font-lock-doc-face nil :font (font-spec :name "Route159") :weight 'normal :slant 'normal)
  (set-face-attribute 'region nil :background "#cfe4ff")
  (set-face-attribute 'font-lock-builtin-face nil :foreground "#a0522d" :slant 'italic)
  (set-face-attribute 'font-lock-variable-name-face nil :foreground "#383a42" :underline t)

#+end_src
*** elisp 
#+begin_src elisp
  (defvar xah-elisp-ampersand-words nil "List of elisp special syntax, just &optional and &rest,")
  (setq xah-elisp-ampersand-words '( "&optional" "&rest" "t" "nil"))

  (defvar xah-elisp-functions nil "List of elisp functions, those in elisp doc marked as function. (basically, all functions that's not command, macro, special forms.)")
  (setq xah-elisp-functions '(
                              "mouse-on-link-p"
                              "macrop"
                              "run-hooks"
                              "run-hook-with-args"
                              "run-hook-with-args-until-failure"
                              "run-hook-with-args-until-success"
                              "define-fringe-bitmap"
                              "destroy-fringe-bitmap"
                              "set-fringe-bitmap-face"
                              "file-name-directory"
                              "file-name-nondirectory"
                              "file-name-sans-versions"
                              "file-name-extension"
                              "file-name-sans-extension"
                              "file-name-base"
                              "buffer-file-name"
                              "get-file-buffer"
                              "find-buffer-visiting"
                              "make-xwidget"
                              "xwidgetp"
                              "xwidget-plist"
                              "set-xwidget-plist"
                              "xwidget-buffer"
                              "get-buffer-xwidgets"
                              "xwidget-webkit-goto-uri"
                              "xwidget-webkit-execute-script"
                              "xwidget-webkit-execute-script-rv"
                              "xwidget-webkit-get-title"
                              "xwidget-resize"
                              "xwidget-size-request"
                              "xwidget-info"
                              "set-xwidget-query-on-exit-flag"
                              "xwidget-query-on-exit-flag"
                              "split-window"
                              "window-total-height"
                              "window-total-width"
                              "window-total-size"
                              "window-pixel-height"
                              "window-pixel-width"
                              "window-full-height-p"
                              "window-full-width-p"
                              "window-body-height"
                              "window-body-width"
                              "window-body-size"
                              "window-mode-line-height"
                              "window-header-line-height"
                              "window-max-chars-per-line"
                              "window-min-size"
                              "window-edges"
                              "window-body-edges"
                              "window-at"
                              "coordinates-in-window-p"
                              "window-pixel-edges"
                              "window-body-pixel-edges"
                              "window-absolute-pixel-edges"
                              "window-absolute-body-pixel-edges"
                              "window-absolute-pixel-position"
                              "buffer-modified-p"
                              "set-buffer-modified-p"
                              "restore-buffer-modified-p"
                              "buffer-modified-tick"
                              "buffer-chars-modified-tick"
                              "decode-time"
                              "encode-time"
                              "marker-position"
                              "marker-buffer"
                              "create-fontset-from-fontset-spec"
                              "set-fontset-font"
                              "char-displayable-p"
                              "custom-add-frequent-value"
                              "custom-reevaluate-setting"
                              "custom-variable-p"
                              "custom-theme-set-variables"
                              "custom-theme-set-faces"
                              "custom-theme-p"
                              "add-to-list"
                              "add-to-ordered-list"
                              "sin"
                              "cos"
                              "tan"
                              "asin"
                              "acos"
                              "atan"
                              "exp"
                              "log"
                              "expt"
                              "sqrt"
                              "get-char-code-property"
                              "char-code-property-description"
                              "put-char-code-property"
                              "prepare-change-group"
                              "activate-change-group"
                              "accept-change-group"
                              "cancel-change-group"
                              "active-minibuffer-window"
                              "minibuffer-window"
                              "set-minibuffer-window"
                              "window-minibuffer-p"
                              "minibuffer-window-active-p"
                              "define-category"
                              "category-docstring"
                              "get-unused-category"
                              "category-table"
                              "category-table-p"
                              "standard-category-table"
                              "copy-category-table"
                              "set-category-table"
                              "make-category-table"
                              "make-category-set"
                              "char-category-set"
                              "category-set-mnemonics"
                              "modify-category-entry"
                              "memory-limit"
                              "memory-use-counts"
                              "memory-info"
                              "smie-rule-bolp"
                              "smie-rule-hanging-p"
                              "smie-rule-next-p"
                              "smie-rule-prev-p"
                              "smie-rule-parent-p"
                              "smie-rule-sibling-p"
                              "smie-rule-parent"
                              "smie-rule-separator"
                              "lookup-key"
                              "local-key-binding"
                              "global-key-binding"
                              "minor-mode-key-binding"
                              "user-ptrp"
                              "gui-get-selection"
                              "point"
                              "point-min"
                              "point-max"
                              "buffer-end"
                              "buffer-size"
                              "foo"
                              "add-to-history"
                              "car"
                              "cdr"
                              "car-safe"
                              "cdr-safe"
                              "nth"
                              "nthcdr"
                              "last"
                              "safe-length"
                              "caar"
                              "cadr"
                              "cdar"
                              "cddr"
                              "butlast"
                              "nbutlast"
                              "macroexpand"
                              "macroexpand-all"
                              "string-to-syntax"
                              "syntax-after"
                              "syntax-class"
                              "make-finalizer"
                              "unsafep"
                              "set-buffer-multibyte"
                              "string-as-unibyte"
                              "string-as-multibyte"
                              "tabulated-list-init-header"
                              "tabulated-list-print"
                              "ffloor"
                              "fceiling"
                              "ftruncate"
                              "fround"
                              "assoc"
                              "rassoc"
                              "assq"
                              "alist-get"
                              "rassq"
                              "assoc-default"
                              "copy-alist"
                              "assq-delete-all"
                              "rassq-delete-all"
                              "make-serial-process"
                              "serial-process-configure"
                              "make-temp-file"
                              "make-temp-name"
                              "current-time-zone"
                              "key-description"
                              "single-key-description"
                              "text-char-description"
                              "vectorp"
                              "vector"
                              "make-vector"
                              "vconcat"
                              "create-file-buffer"
                              "after-find-file"
                              "buffer-live-p"
                              "transpose-regions"
                              "number-to-string"
                              "string-to-number"
                              "char-to-string"
                              "string-to-char"
                              "makunbound"
                              "boundp"
                              "consp"
                              "atom"
                              "listp"
                              "nlistp"
                              "null"
                              "buffer-base-buffer"
                              "charsetp"
                              "charset-priority-list"
                              "set-charset-priority"
                              "char-charset"
                              "charset-plist"
                              "put-charset-property"
                              "get-charset-property"
                              "decode-char"
                              "encode-char"
                              "map-charset-chars"
                              "x-list-fonts"
                              "x-family-fonts"
                              "momentary-string-display"
                              "frame-char-height"
                              "frame-char-width"
                              "abbrev-symbol"
                              "abbrev-expansion"
                              "abbrev-insert"
                              "setcdr"
                              "fill-context-prefix"
                              "position-bytes"
                              "byte-to-position"
                              "bufferpos-to-filepos"
                              "filepos-to-bufferpos"
                              "multibyte-string-p"
                              "string-bytes"
                              "unibyte-string"
                              "split-window-sensibly"
                              "same-window-p"
                              "get-text-property"
                              "get-char-property"
                              "get-pos-property"
                              "get-char-property-and-overlay"
                              "text-properties-at"
                              "color-defined-p"
                              "defined-colors"
                              "color-supported-p"
                              "color-gray-p"
                              "color-values"
                              "scroll-bar-event-ratio"
                              "scroll-bar-scale"
                              "get-register"
                              "set-register"
                              "register-read-with-preview"
                              "button-start"
                              "button-end"
                              "button-get"
                              "button-put"
                              "button-activate"
                              "button-label"
                              "button-type"
                              "button-has-type-p"
                              "button-at"
                              "button-type-put"
                              "button-type-get"
                              "button-type-subtype-p"
                              "buffer-list"
                              "other-buffer"
                              "last-buffer"
                              "current-frame-configuration"
                              "set-frame-configuration"
                              "funcall"
                              "apply"
                              "apply-partially"
                              "identity"
                              "ignore"
                              "file-name-as-directory"
                              "directory-name-p"
                              "directory-file-name"
                              "abbreviate-file-name"
                              "delete-and-extract-region"
                              "map-y-or-n-p"
                              "message"
                              "message-or-box"
                              "message-box"
                              "display-message-or-buffer"
                              "current-message"
                              "ding"
                              "beep"
                              "x-popup-dialog"
                              "network-interface-list"
                              "network-interface-info"
                              "format-network-address"
                              "floatp"
                              "integerp"
                              "numberp"
                              "natnump"
                              "zerop"
                              "imagemagick-types"
                              "completion-table-dynamic"
                              "completion-table-with-cache"
                              "mouse-position"
                              "set-mouse-position"
                              "mouse-pixel-position"
                              "set-mouse-pixel-position"
                              "mouse-absolute-pixel-position"
                              "set-mouse-absolute-pixel-position"
                              "frame-pointer-visible-p"
                              "tool-bar-add-item"
                              "tool-bar-add-item-from-menu"
                              "tool-bar-local-item-from-menu"
                              "send-string-to-terminal"
                              "insert-and-inherit"
                              "insert-before-markers-and-inherit"
                              "completing-read"
                              "minibuffer-prompt"
                              "minibuffer-prompt-end"
                              "minibuffer-prompt-width"
                              "minibuffer-contents"
                              "minibuffer-contents-no-properties"
                              "windowp"
                              "window-live-p"
                              "window-valid-p"
                              "selected-window"
                              "selected-window-group"
                              "window-resizable"
                              "window-resize"
                              "adjust-window-trailing-edge"
                              "edebug-trace"
                              "frame-live-p"
                              "window-frame"
                              "window-list"
                              "frame-root-window"
                              "window-parent"
                              "window-top-child"
                              "window-left-child"
                              "window-child"
                              "window-combined-p"
                              "window-next-sibling"
                              "window-prev-sibling"
                              "frame-first-window"
                              "window-in-direction"
                              "window-tree"
                              "tty-top-frame"
                              "font-family-list"
                              "bitmap-spec-p"
                              "region-beginning"
                              "region-end"
                              "use-region-p"
                              "default-value"
                              "default-boundp"
                              "set-default"
                              "put-text-property"
                              "add-text-properties"
                              "remove-text-properties"
                              "remove-list-of-text-properties"
                              "set-text-properties"
                              "add-face-text-property"
                              "propertize"
                              "not"
                              "error"
                              "signal"
                              "user-error"
                              "set-marker"
                              "move-marker"
                              "frame-current-scroll-bars"
                              "frame-scroll-bar-width"
                              "frame-scroll-bar-height"
                              "set-window-scroll-bars"
                              "window-scroll-bars"
                              "window-current-scroll-bars"
                              "window-scroll-bar-width"
                              "window-scroll-bar-height"
                              "window-hscroll"
                              "set-window-hscroll"
                              "create-image"
                              "find-image"
                              "image-load-path-for-library"
                              "make-byte-code"
                              "field-beginning"
                              "field-end"
                              "field-string"
                              "field-string-no-properties"
                              "delete-field"
                              "constrain-to-field"
                              "insert-for-yank"
                              "insert-buffer-substring-as-yank"
                              "get-internal-run-time"
                              "eq"
                              "equal"
                              "equal-including-properties"
                              "define-package"
                              "print"
                              "princ"
                              "prin1"
                              "terpri"
                              "write-char"
                              "pp"
                              "set-process-sentinel"
                              "process-sentinel"
                              "waiting-for-user-input-p"
                              "make-char-table"
                              "char-table-p"
                              "char-table-subtype"
                              "char-table-parent"
                              "set-char-table-parent"
                              "char-table-extra-slot"
                              "set-char-table-extra-slot"
                              "char-table-range"
                              "set-char-table-range"
                              "map-char-table"
                              "string-match"
                              "string-match-p"
                              "looking-at"
                              "looking-back"
                              "looking-at-p"
                              "make-syntax-table"
                              "copy-syntax-table"
                              "char-syntax"
                              "set-syntax-table"
                              "syntax-table"
                              "face-remap-add-relative"
                              "face-remap-remove-relative"
                              "face-remap-set-base"
                              "face-remap-reset-base"
                              "keymap-parent"
                              "set-keymap-parent"
                              "make-composed-keymap"
                              "define-key"
                              "substitute-key-definition"
                              "suppress-keymap"
                              "plist-get"
                              "plist-put"
                              "lax-plist-get"
                              "lax-plist-put"
                              "plist-member"
                              "libxml-parse-html-region"
                              "shr-insert-document"
                              "libxml-parse-xml-region"
                              "recenter-window-group"
                              "called-interactively-p"
                              "keywordp"
                              "compare-buffer-substrings"
                              "notifications-notify"
                              "notifications-close-notification"
                              "notifications-get-capabilities"
                              "notifications-get-server-information"
                              "sequencep"
                              "length"
                              "elt"
                              "copy-sequence"
                              "reverse"
                              "nreverse"
                              "sort"
                              "seq-elt"
                              "seq-length"
                              "seqp"
                              "seq-drop"
                              "seq-take"
                              "seq-take-while"
                              "seq-drop-while"
                              "seq-do"
                              "seq-map"
                              "seq-mapn"
                              "seq-filter"
                              "seq-remove"
                              "seq-reduce"
                              "seq-some"
                              "seq-find"
                              "seq-every-p"
                              "seq-empty-p"
                              "seq-count"
                              "seq-sort"
                              "seq-contains"
                              "seq-position"
                              "seq-uniq"
                              "seq-subseq"
                              "seq-concatenate"
                              "seq-mapcat"
                              "seq-partition"
                              "seq-intersection"
                              "seq-difference"
                              "seq-group-by"
                              "seq-into"
                              "seq-min"
                              "seq-max"
                              "stringp"
                              "string-or-null-p"
                              "char-or-string-p"
                              "ewoc-create"
                              "ewoc-buffer"
                              "ewoc-get-hf"
                              "ewoc-set-hf"
                              "ewoc-enter-first"
                              "ewoc-enter-last"
                              "ewoc-enter-before"
                              "ewoc-enter-after"
                              "ewoc-prev"
                              "ewoc-next"
                              "ewoc-nth"
                              "ewoc-data"
                              "ewoc-set-data"
                              "ewoc-locate"
                              "ewoc-location"
                              "ewoc-goto-prev"
                              "ewoc-goto-next"
                              "ewoc-goto-node"
                              "ewoc-refresh"
                              "ewoc-invalidate"
                              "ewoc-delete"
                              "ewoc-filter"
                              "ewoc-collect"
                              "ewoc-map"
                              "indirect-function"
                              "set-network-process-option"
                              "face-spec-set"
                              "substitute-command-keys"
                              "make-progress-reporter"
                              "progress-reporter-update"
                              "progress-reporter-force-update"
                              "progress-reporter-done"
                              "current-buffer"
                              "set-buffer"
                              "minibufferp"
                              "minibuffer-selected-window"
                              "minibuffer-message"
                              "this-command-keys"
                              "this-command-keys-vector"
                              "clear-this-command-keys"
                              "markerp"
                              "integer-or-marker-p"
                              "number-or-marker-p"
                              "make-translation-table"
                              "make-translation-table-from-vector"
                              "make-translation-table-from-alist"
                              "sit-for"
                              "sleep-for"
                              "read-from-minibuffer"
                              "read-string"
                              "read-regexp"
                              "read-no-blanks-input"
                              "frame-visible-p"
                              "make-process"
                              "make-pipe-process"
                              "start-process"
                              "start-file-process"
                              "start-process-shell-command"
                              "start-file-process-shell-command"
                              "find-file-name-handler"
                              "file-local-copy"
                              "file-remote-p"
                              "unhandled-file-name-directory"
                              "match-data"
                              "set-match-data"
                              "overlay-get"
                              "overlay-put"
                              "overlay-properties"
                              "file-name-absolute-p"
                              "file-relative-name"
                              "hack-dir-local-variables"
                              "hack-dir-local-variables-non-file-buffer"
                              "dir-locals-set-class-variables"
                              "dir-locals-set-directory-class"
                              "make-button"
                              "insert-button"
                              "make-text-button"
                              "insert-text-button"
                              "insert-image"
                              "insert-sliced-image"
                              "put-image"
                              "remove-images"
                              "image-size"
                              "insert-file-contents"
                              "insert-file-contents-literally"
                              "format"
                              "format-message"
                              "run-mode-hooks"
                              "cl-call-next-method"
                              "cl-next-method-p"
                              "char-equal"
                              "string-equal"
                              "string-collate-equalp"
                              "string-prefix-p"
                              "string-suffix-p"
                              "string-lessp"
                              "string-greaterp"
                              "string-collate-lessp"
                              "compare-strings"
                              "assoc-string"
                              "display-popup-menus-p"
                              "display-graphic-p"
                              "display-mouse-p"
                              "display-color-p"
                              "display-grayscale-p"
                              "display-supports-face-attributes-p"
                              "display-selections-p"
                              "display-images-p"
                              "display-screens"
                              "display-pixel-height"
                              "display-pixel-width"
                              "display-mm-height"
                              "display-mm-width"
                              "display-backing-store"
                              "display-save-under"
                              "display-planes"
                              "display-visual-class"
                              "display-color-cells"
                              "x-server-version"
                              "x-server-vendor"
                              "define-prefix-command"
                              "insert"
                              "insert-before-markers"
                              "insert-buffer-substring"
                              "insert-buffer-substring-no-properties"
                              "replace-match"
                              "match-substitute-replacement"
                              "set-input-mode"
                              "current-input-mode"
                              "tty-color-define"
                              "tty-color-clear"
                              "tty-color-alist"
                              "tty-color-approximate"
                              "tty-color-translate"
                              "call-process"
                              "process-file"
                              "call-process-region"
                              "call-process-shell-command"
                              "process-file-shell-command"
                              "shell-command-to-string"
                              "process-lines"
                              "current-kill"
                              "kill-new"
                              "kill-append"
                              "symbol-function"
                              "fboundp"
                              "fmakunbound"
                              "fset"
                              "hack-local-variables"
                              "safe-local-variable-p"
                              "risky-local-variable-p"
                              "keymapp"
                              "select-safe-coding-system"
                              "read-coding-system"
                              "read-non-nil-coding-system"
                              "current-time-string"
                              "current-time"
                              "float-time"
                              "seconds-to-time"
                              "set-default-file-modes"
                              "default-file-modes"
                              "read-file-modes"
                              "file-modes-symbolic-to-number"
                              "set-file-times"
                              "set-file-extended-attributes"
                              "set-file-selinux-context"
                              "set-file-acl"
                              "current-left-margin"
                              "current-fill-column"
                              "delete-to-left-margin"
                              "indent-to-left-margin"
                              "sort-subr"
                              "backup-file-name-p"
                              "make-backup-file-name"
                              "find-backup-file-name"
                              "file-newest-backup"
                              "locate-user-emacs-file"
                              "convert-standard-filename"
                              "add-hook"
                              "remove-hook"
                              "error-message-string"
                              "window-point"
                              "set-window-point"
                              "quit-restore-window"
                              "x-parse-geometry"
                              "process-list"
                              "get-process"
                              "process-command"
                              "process-contact"
                              "process-id"
                              "process-name"
                              "process-status"
                              "process-live-p"
                              "process-type"
                              "process-exit-status"
                              "process-tty-name"
                              "process-coding-system"
                              "set-process-coding-system"
                              "process-get"
                              "process-put"
                              "process-plist"
                              "set-process-plist"
                              "keyboard-translate"
                              "execute-kbd-macro"
                              "date-to-time"
                              "format-time-string"
                              "format-seconds"
                              "make-ring"
                              "ring-p"
                              "ring-size"
                              "ring-length"
                              "ring-elements"
                              "ring-copy"
                              "ring-empty-p"
                              "ring-ref"
                              "ring-insert"
                              "ring-remove"
                              "ring-insert-at-beginning"
                              "set-window-combination-limit"
                              "window-combination-limit"
                              "regexp-quote"
                              "regexp-opt"
                              "regexp-opt-depth"
                              "regexp-opt-charset"
                              "provide"
                              "require"
                              "featurep"
                              "backup-buffer"
                              "event-modifiers"
                              "event-basic-type"
                              "mouse-movement-p"
                              "event-convert-list"
                              "read-key-sequence"
                              "read-key-sequence-vector"
                              "file-truename"
                              "file-chase-links"
                              "file-equal-p"
                              "file-in-directory-p"
                              "eval"
                              "frame-parameter"
                              "frame-parameters"
                              "modify-frame-parameters"
                              "set-frame-parameter"
                              "modify-all-frames-parameters"
                              "process-datagram-address"
                              "set-process-datagram-address"
                              "current-window-configuration"
                              "set-window-configuration"
                              "window-configuration-p"
                              "compare-window-configurations"
                              "window-configuration-frame"
                              "window-state-get"
                              "window-state-put"
                              "charset-after"
                              "find-charset-region"
                              "find-charset-string"
                              "abbrev-table-put"
                              "abbrev-table-get"
                              "coding-system-list"
                              "coding-system-p"
                              "check-coding-system"
                              "coding-system-eol-type"
                              "coding-system-change-eol-conversion"
                              "coding-system-change-text-conversion"
                              "find-coding-systems-region"
                              "find-coding-systems-string"
                              "find-coding-systems-for-charsets"
                              "check-coding-systems-region"
                              "detect-coding-region"
                              "detect-coding-string"
                              "coding-system-charset-list"
                              "iter-next"
                              "iter-close"
                              "locate-file"
                              "executable-find"
                              "symbol-name"
                              "make-symbol"
                              "intern"
                              "intern-soft"
                              "mapatoms"
                              "unintern"
                              "current-column"
                              "special-variable-p"
                              "accessible-keymaps"
                              "map-keymap"
                              "where-is-internal"
                              "window-display-table"
                              "set-window-display-table"
                              "redisplay"
                              "force-window-update"
                              "window-start"
                              "window-group-start"
                              "window-end"
                              "window-group-end"
                              "set-window-start"
                              "set-window-group-start"
                              "pos-visible-in-window-p"
                              "pos-visible-in-window-group-p"
                              "window-line-height"
                              "fringe-bitmaps-at-pos"
                              "buffer-name"
                              "get-buffer"
                              "generate-new-buffer-name"
                              "jit-lock-register"
                              "jit-lock-unregister"
                              "file-notify-add-watch"
                              "file-notify-rm-watch"
                              "file-notify-valid-p"
                              "local-variable-p"
                              "local-variable-if-set-p"
                              "buffer-local-value"
                              "buffer-local-variables"
                              "kill-all-local-variables"
                              "eventp"
                              "skip-chars-forward"
                              "skip-chars-backward"
                              "window-parameter"
                              "window-parameters"
                              "set-window-parameter"
                              "recent-keys"
                              "terminal-parameters"
                              "terminal-parameter"
                              "set-terminal-parameter"
                              "memq"
                              "delq"
                              "remq"
                              "memql"
                              "member"
                              "delete"
                              "remove"
                              "member-ignore-case"
                              "delete-dups"
                              "parse-partial-sexp"
                              "get-buffer-create"
                              "generate-new-buffer"
                              "current-global-map"
                              "current-local-map"
                              "current-minor-mode-maps"
                              "use-global-map"
                              "use-local-map"
                              "set-transient-map"
                              "accept-process-output"
                              "skip-syntax-forward"
                              "skip-syntax-backward"
                              "backward-prefix-chars"
                              "vertical-motion"
                              "count-screen-lines"
                              "move-to-window-group-line"
                              "compute-motion"
                              "file-exists-p"
                              "file-readable-p"
                              "file-executable-p"
                              "file-writable-p"
                              "file-accessible-directory-p"
                              "access-file"
                              "file-ownership-preserved-p"
                              "file-modes"
                              "open-network-stream"
                              "undo-boundary"
                              "undo-auto-amalgamate"
                              "primitive-undo"
                              "keyboard-coding-system"
                              "terminal-coding-system"
                              "symbolp"
                              "booleanp"
                              "functionp"
                              "subrp"
                              "byte-code-function-p"
                              "subr-arity"
                              "char-width"
                              "string-width"
                              "truncate-string-to-width"
                              "window-text-pixel-size"
                              "documentation-property"
                              "documentation"
                              "face-documentation"
                              "Snarf-documentation"
                              "match-string"
                              "match-string-no-properties"
                              "match-beginning"
                              "match-end"
                              "coding-system-priority-list"
                              "set-coding-system-priority"
                              "x-popup-menu"
                              "-"
                              "mod"
                              "symbol-file"
                              "command-line"
                              "get-load-suffixes"
                              "defalias"
                              "define-button-type"
                              "custom-set-variables"
                              "custom-set-faces"
                              "interactive-form"
                              "encode-coding-string"
                              "decode-coding-string"
                              "decode-coding-inserted-region"
                              "make-hash-table"
                              "secure-hash"
                              "frame-geometry"
                              "frame-edges"
                              "buffer-narrowed-p"
                              "locale-info"
                              "keymap-prompt"
                              "set-window-margins"
                              "window-margins"
                              "try-completion"
                              "all-completions"
                              "test-completion"
                              "completion-boundaries"
                              "add-to-invisibility-spec"
                              "remove-from-invisibility-spec"
                              "invisible-p"
                              "char-after"
                              "char-before"
                              "following-char"
                              "preceding-char"
                              "bobp"
                              "eobp"
                              "bolp"
                              "eolp"
                              "coding-system-get"
                              "coding-system-aliases"
                              "defvaralias"
                              "make-obsolete-variable"
                              "indirect-variable"
                              "read-file-name"
                              "read-directory-name"
                              "read-shell-command"
                              "select-window"
                              "frame-selected-window"
                              "set-frame-selected-window"
                              "window-use-time"
                              "make-glyph-code"
                              "glyph-char"
                              "glyph-face"
                              "command-remapping"
                              "help-buffer"
                              "help-setup-xref"
                              "downcase"
                              "upcase"
                              "capitalize"
                              "upcase-initials"
                              "redraw-frame"
                              "characterp"
                              "max-char"
                              "get-byte"
                              "float"
                              "truncate"
                              "floor"
                              "ceiling"
                              "round"
                              "window-vscroll"
                              "set-window-vscroll"
                              "selected-frame"
                              "select-frame-set-input-focus"
                              "redirect-frame-focus"
                              "image-multi-frame-p"
                              "image-current-frame"
                              "image-show-frame"
                              "image-animate"
                              "image-animate-timer"
                              "replace-regexp-in-string"
                              "perform-replace"
                              "current-idle-time"
                              "subst-char-in-region"
                              "derived-mode-p"
                              "dom-node"
                              "face-attribute"
                              "face-attribute-relative-p"
                              "face-all-attributes"
                              "merge-face-attribute"
                              "set-face-attribute"
                              "set-face-bold"
                              "set-face-italic"
                              "set-face-underline"
                              "set-face-inverse-video"
                              "face-font"
                              "face-foreground"
                              "face-background"
                              "face-stipple"
                              "face-bold-p"
                              "face-italic-p"
                              "face-underline-p"
                              "face-inverse-video-p"
                              "file-name-all-completions"
                              "file-name-completion"
                              "make-string"
                              "string"
                              "substring"
                              "substring-no-properties"
                              "concat"
                              "split-string"
                              "window-buffer"
                              "set-window-buffer"
                              "get-buffer-window"
                              "get-buffer-window-list"
                              "process-query-on-exit-flag"
                              "set-process-query-on-exit-flag"
                              "process-send-string"
                              "process-send-region"
                              "process-send-eof"
                              "process-running-child-p"
                              "frame-position"
                              "set-frame-position"
                              "frame-pixel-height"
                              "frame-pixel-width"
                              "frame-text-height"
                              "frame-text-width"
                              "frame-height"
                              "frame-width"
                              "set-frame-size"
                              "set-frame-height"
                              "set-frame-width"
                              "recursion-depth"
                              "buffer-substring"
                              "buffer-substring-no-properties"
                              "buffer-string"
                              "filter-buffer-substring"
                              "current-word"
                              "thing-at-point"
                              "bufferp"
                              "random"
                              "processp"
                              "case-table-p"
                              "set-standard-case-table"
                              "standard-case-table"
                              "current-case-table"
                              "set-case-table"
                              "set-case-syntax-pair"
                              "set-case-syntax-delims"
                              "set-case-syntax"
                              "window-prev-buffers"
                              "set-window-prev-buffers"
                              "window-next-buffers"
                              "set-window-next-buffers"
                              "read-passwd"
                              "bindat-unpack"
                              "bindat-get-field"
                              "bindat-length"
                              "bindat-pack"
                              "bindat-ip-to-string"
                              "frame-list"
                              "visible-frame-list"
                              "next-frame"
                              "previous-frame"
                              "face-list"
                              "face-id"
                              "face-equal"
                              "face-differs-from-default-p"
                              "file-symlink-p"
                              "file-directory-p"
                              "file-regular-p"
                              "find-file-noselect"
                              "event-click-count"
                              "fontp"
                              "font-at"
                              "font-spec"
                              "font-put"
                              "find-font"
                              "list-fonts"
                              "font-get"
                              "font-face-attributes"
                              "font-xlfd-name"
                              "font-info"
                              "query-font"
                              "default-font-width"
                              "default-font-height"
                              "window-font-width"
                              "window-font-height"
                              "kbd"
                              "terminal-name"
                              "terminal-list"
                              "get-device-terminal"
                              "delete-terminal"
                              "x-display-list"
                              "x-open-connection"
                              "x-close-connection"
                              "display-monitor-attributes-list"
                              "frame-monitor-attributes"
                              "read-event"
                              "read-char"
                              "read-char-exclusive"
                              "read-key"
                              "read-char-choice"
                              "backtrace-debug"
                              "backtrace-frame"
                              "directory-files"
                              "directory-files-recursively"
                              "directory-files-and-attributes"
                              "file-expand-wildcards"
                              "insert-directory"
                              "scan-lists"
                              "scan-sexps"
                              "forward-comment"
                              "tq-create"
                              "tq-enqueue"
                              "tq-close"
                              "set-window-fringes"
                              "window-fringes"
                              "commandp"
                              "call-interactively"
                              "funcall-interactively"
                              "command-execute"
                              "make-bool-vector"
                              "bool-vector"
                              "bool-vector-p"
                              "bool-vector-exclusive-or"
                              "bool-vector-union"
                              "bool-vector-intersection"
                              "bool-vector-set-difference"
                              "bool-vector-not"
                              "bool-vector-subsetp"
                              "bool-vector-count-consecutive"
                              "bool-vector-count-population"
                              "current-active-maps"
                              "key-binding"
                              "byte-compile"
                              "batch-byte-compile"
                              "tooltip-mode"
                              "tooltip-event-buffer"
                              "gap-position"
                              "gap-size"
                              "fetch-bytecode"
                              "define-key-after"
                              "set-process-filter"
                              "process-filter"
                              "read-minibuffer"
                              "eval-minibuffer"
                              "edit-and-eval-command"
                              "verify-visited-file-modtime"
                              "clear-visited-file-modtime"
                              "visited-file-modtime"
                              "set-visited-file-modtime"
                              "ask-user-about-supersession-threat"
                              "string-to-multibyte"
                              "string-to-unibyte"
                              "byte-to-string"
                              "multibyte-char-to-unibyte"
                              "unibyte-char-to-multibyte"
                              "syntax-ppss"
                              "syntax-ppss-flush-cache"
                              "smie-config-local"
                              "read"
                              "read-from-string"
                              "set-binary-mode"
                              "event-start"
                              "event-end"
                              "posnp"
                              "posn-window"
                              "posn-area"
                              "posn-point"
                              "posn-x-y"
                              "posn-col-row"
                              "posn-actual-col-row"
                              "posn-string"
                              "posn-image"
                              "posn-object"
                              "posn-object-x-y"
                              "posn-object-width-height"
                              "posn-timestamp"
                              "posn-at-point"
                              "posn-at-x-y"
                              "image-flush"
                              "clear-image-cache"
                              "sentence-end"
                              "system-name"
                              "parse-colon-path"
                              "load-average"
                              "emacs-pid"
                              "y-or-n-p"
                              "y-or-n-p-with-timeout"
                              "yes-or-no-p"
                              "hash-table-p"
                              "copy-hash-table"
                              "hash-table-count"
                              "hash-table-test"
                              "hash-table-weakness"
                              "hash-table-rehash-size"
                              "hash-table-rehash-threshold"
                              "hash-table-size"
                              "custom-initialize-delay"
                              "dump-emacs"
                              "define-error"
                              "set-auto-mode"
                              "set-buffer-major-mode"
                              "next-window"
                              "previous-window"
                              "walk-windows"
                              "one-window-p"
                              "get-lru-window"
                              "get-mru-window"
                              "get-largest-window"
                              "get-window-with-predicate"
                              "list-system-processes"
                              "process-attributes"
                              "define-abbrev"
                              "find-auto-coding"
                              "set-auto-coding"
                              "find-operation-coding-system"
                              "listify-key-sequence"
                              "input-pending-p"
                              "discard-input"
                              "messages-buffer"
                              "set"
                              "auto-save-file-name-p"
                              "make-auto-save-file-name"
                              "recent-auto-save-p"
                              "set-buffer-auto-saved"
                              "delete-auto-save-file-if-necessary"
                              "rename-auto-save-file"
                              "abbrev-put"
                              "abbrev-get"
                              "forward-word-strictly"
                              "backward-word-strictly"
                              "advice-add"
                              "advice-remove"
                              "advice-member-p"
                              "advice-mapc"
                              "store-substring"
                              "clear-string"
                              "user-login-name"
                              "user-real-login-name"
                              "user-full-name"
                              "user-real-uid"
                              "user-uid"
                              "group-gid"
                              "group-real-gid"
                              "system-users"
                              "system-groups"
                              "play-sound"
                              "overlays-at"
                              "overlays-in"
                              "next-overlay-change"
                              "previous-overlay-change"
                              "next-property-change"
                              "previous-property-change"
                              "next-single-property-change"
                              "previous-single-property-change"
                              "next-char-property-change"
                              "previous-char-property-change"
                              "next-single-char-property-change"
                              "previous-single-char-property-change"
                              "text-property-any"
                              "text-property-not-all"
                              "symbol-value"
                              "make-abbrev-table"
                              "abbrev-table-p"
                              "clear-abbrev-table"
                              "copy-abbrev-table"
                              "define-abbrev-table"
                              "insert-abbrev-table-description"
                              "advice-function-member-p"
                              "advice-function-mapc"
                              "advice-eval-interactive-spec"
                              "display-buffer-same-window"
                              "display-buffer-reuse-window"
                              "display-buffer-pop-up-frame"
                              "display-buffer-use-some-frame"
                              "display-buffer-pop-up-window"
                              "display-buffer-below-selected"
                              "display-buffer-in-previous-window"
                              "display-buffer-at-bottom"
                              "display-buffer-use-some-window"
                              "display-buffer-no-window"
                              "isnan"
                              "frexp"
                              "ldexp"
                              "copysign"
                              "logb"
                              "file-newer-than-file-p"
                              "file-attributes"
                              "file-nlinks"
                              "barf-if-buffer-read-only"
                              "file-acl"
                              "file-selinux-context"
                              "file-extended-attributes"
                              "zlib-available-p"
                              "zlib-decompress-region"
                              "window-preserve-size"
                              "window-preserved-size"
                              "load"
                              "arrayp"
                              "aref"
                              "aset"
                              "fillarray"
                              "delete-process"
                              "image-mask-p"
                              "interrupt-process"
                              "kill-process"
                              "quit-process"
                              "stop-process"
                              "continue-process"
                              "minibuffer-depth"
                              "gethash"
                              "puthash"
                              "remhash"
                              "clrhash"
                              "maphash"
                              "read-quoted-char"
                              "eql"
                              "max"
                              "min"
                              "abs"
                              "framep"
                              "frame-terminal"
                              "terminal-live-p"
                              "image-type-available-p"
                              "mapcar"
                              "mapc"
                              "mapconcat"
                              "purecopy"
                              "current-bidi-paragraph-direction"
                              "move-point-visually"
                              "bidi-string-mark-left-to-right"
                              "bidi-find-overridden-directionality"
                              "buffer-substring-with-bidi-context"
                              "special-form-p"
                              "type-of"
                              "syntax-ppss-toplevel-pos"
                              "shell-quote-argument"
                              "split-string-and-unquote"
                              "combine-and-quote-strings"
                              "posix-looking-at"
                              "posix-string-match"
                              "smie-setup"
                              "define-hash-table-test"
                              "sxhash"
                              "window-system"
                              "setcar"
                              "read-buffer"
                              "read-command"
                              "read-variable"
                              "force-mode-line-update"
                              "file-locked-p"
                              "lock-buffer"
                              "unlock-buffer"
                              "ask-user-about-lock"
                              "make-display-table"
                              "display-table-slot"
                              "set-display-table-slot"
                              "describe-display-table"
                              "get"
                              "put"
                              "symbol-plist"
                              "setplist"
                              "function-get"
                              "function-put"
                              "process-buffer"
                              "process-mark"
                              "set-process-buffer"
                              "get-buffer-process"
                              "set-process-window-size"
                              "current-indentation"
                              "read-input-method-name"
                              "make-obsolete"
                              "set-advertised-calling-convention"
                              "suspend-tty"
                              "resume-tty"
                              "controlling-tty-p"
                              "overlayp"
                              "make-overlay"
                              "overlay-start"
                              "overlay-end"
                              "overlay-buffer"
                              "delete-overlay"
                              "move-overlay"
                              "remove-overlays"
                              "copy-overlay"
                              "overlay-recenter"
                              "nconc"
                              "expand-file-name"
                              "substitute-in-file-name"
                              "prefix-numeric-value"
                              "lsh"
                              "ash"
                              "logand"
                              "logior"
                              "logxor"
                              "lognot"
                              "display-warning"
                              "lwarn"
                              "warn"
                              "next-button"
                              "previous-button"
                              "font-lock-add-keywords"
                              "font-lock-remove-keywords"
                              "current-justification"
                              "display-completion-list"
                              "make-sparse-keymap"
                              "make-keymap"
                              "copy-keymap"
                              "window-right-divider-width"
                              "window-bottom-divider-width"
                              "autoload"
                              "autoloadp"
                              "autoload-do-load"
                              "syntax-table-p"
                              "standard-syntax-table"
                              "throw"
                              "facep"
                              "x-get-resource"
                              "set-marker-insertion-type"
                              "marker-insertion-type"
                              "format-mode-line"
                              "quietly-read-abbrev-file"
                              "window-dedicated-p"
                              "set-window-dedicated-p"
                              "cancel-timer"
                              "make-network-process"
                              "time-less-p"
                              "time-subtract"
                              "time-add"
                              "time-to-days"
                              "time-to-day-in-year"
                              "date-leap-year-p"
                              "buffer-swap-text"
                              "mark"
                              "mark-marker"
                              "set-mark"
                              "push-mark"
                              "pop-mark"
                              "deactivate-mark"
                              "handle-shift-selection"
                              "cons"
                              "list"
                              "make-list"
                              "append"
                              "copy-tree"
                              "number-sequence"
                              "line-beginning-position"
                              "line-end-position"
                              "count-lines"
                              "line-number-at-pos"
                              "completion-in-region"
                              "make-marker"
                              "point-marker"
                              "point-min-marker"
                              "point-max-marker"
                              "copy-marker"
                              ))

  (defvar xah-elisp-special-forms nil "List of elisp special forms.")
  (setq xah-elisp-special-forms '(
                                  "catch"
                                  "function"
                                  "setq"
                                  "eval-and-compile"
                                  "eval-when-compile"
                                  "defvar"
                                  "defconst"
                                  "if"
                                  "cond"
                                  "track-mouse"
                                  "save-restriction"
                                  "with-no-warnings"
                                  "interactive"
                                  "save-excursion"
                                  "while"
                                  "condition-case"
                                  "quote"
                                  "save-current-buffer"
                                  "let"
                                  "let*"
                                  "and"
                                  "or"
                                  "setq-default"
                                  "unwind-protect"
                                  "count-loop"
                                  "progn"
                                  "prog1"
                                  "prog2"
                                  ))

  (defvar xah-elisp-macros nil "List of elisp macros.")
  (setq xah-elisp-macros '(
                           "defcustom"
                           "deftheme"
                           "provide-theme"
                           "push"
                           "save-match-data"
                           "pop"
                           "defsubst"
                           "define-alternatives"
                           "with-output-to-temp-buffer"
                           "with-temp-buffer-window"
                           "with-current-buffer-window"
                           "with-displayed-buffer-window"
                           "pcase"
                           "pcase-defmacro"
                           "with-temp-message"
                           "declare-function"
                           "edebug-tracing"
                           "defimage"
                           "setf"
                           "with-output-to-string"
                           "with-syntax-table"
                           "seq-doseq"
                           "seq-let"
                           "with-eval-after-load"
                           "defface"
                           "dotimes-with-progress-reporter"
                           "with-current-buffer"
                           "with-temp-buffer"
                           "delay-mode-hooks"
                           "cl-defgeneric"
                           "cl-defmethod"
                           "gv-define-simple-setter"
                           "gv-define-setter"
                           "defmacro"
                           "with-file-modes"
                           "condition-case-unless-debug"
                           "ignore-errors"
                           "with-demoted-errors"
                           "easy-menu-define"
                           "save-window-excursion"
                           "iter-defun"
                           "iter-lambda"
                           "iter-yield"
                           "iter-yield-from"
                           "iter-do"
                           "setq-local"
                           "defvar-local"
                           "define-generic-mode"
                           "with-local-quit"
                           "dolist"
                           "dotimes"
                           "save-mark-and-excursion"
                           "with-coding-priority"
                           "defun"
                           "define-inline"
                           "inline-quote"
                           "inline-letevals"
                           "inline-const-p"
                           "inline-const-val"
                           "inline-error"
                           "define-minor-mode"
                           "define-globalized-minor-mode"
                           "lazy-completion-table"
                           "define-obsolete-variable-alias"
                           "save-selected-window"
                           "with-selected-window"
                           "declare"
                           "with-help-window"
                           "make-help-screen"
                           "define-derived-mode"
                           "when"
                           "unless"
                           "combine-after-change-calls"
                           "with-case-table"
                           "define-obsolete-face-alias"
                           "noreturn"
                           "def-edebug-spec"
                           "while-no-input"
                           "define-advice"
                           "add-function"
                           "remove-function"
                           "lambda"
                           "define-obsolete-function-alias"
                           "with-temp-file"
                           "defgroup"
                           "with-timeout"
                           ))

  (defvar xah-elisp-commands nil "List of elisp commands.")
  (setq xah-elisp-commands '(
                             "debug-on-entry"
                             "cancel-debug-on-entry"
                             "beginning-of-line"
                             "end-of-line"
                             "forward-line"
                             "count-words"
                             "switch-to-buffer"
                             "switch-to-buffer-other-window"
                             "switch-to-buffer-other-frame"
                             "pop-to-buffer"
                             "indent-relative"
                             "indent-relative-maybe"
                             "run-at-time"
                             "write-abbrev-file"
                             "indent-for-tab-command"
                             "indent-according-to-mode"
                             "newline-and-indent"
                             "reindent-then-newline-and-indent"
                             "minibuffer-complete-word"
                             "minibuffer-complete"
                             "minibuffer-complete-and-exit"
                             "minibuffer-completion-help"
                             "fill-paragraph"
                             "fill-region"
                             "fill-individual-paragraphs"
                             "fill-region-as-paragraph"
                             "justify-current-line"
                             "push-button"
                             "forward-button"
                             "backward-button"
                             "append-to-file"
                             "write-region"
                             "universal-argument"
                             "digit-argument"
                             "negative-argument"
                             "suspend-emacs"
                             "suspend-frame"
                             "set-input-method"
                             "indent-to"
                             "describe-current-display-table"
                             "read-color"
                             "smie-close-block"
                             "smie-down-list"
                             "posix-search-forward"
                             "posix-search-backward"
                             "save-buffer"
                             "save-some-buffers"
                             "write-file"
                             "signal-process"
                             "exit-minibuffer"
                             "self-insert-and-exit"
                             "previous-history-element"
                             "next-history-element"
                             "previous-matching-history-element"
                             "next-matching-history-element"
                             "previous-complete-history-element"
                             "next-complete-history-element"
                             "load-file"
                             "load-library"
                             "read-only-mode"
                             "kill-emacs"
                             "indent-region"
                             "indent-rigidly"
                             "indent-code-rigidly"
                             "play-sound-file"
                             "forward-word"
                             "backward-word"
                             "auto-save-mode"
                             "do-auto-save"
                             "package-upload-file"
                             "package-upload-buffer"
                             "other-window"
                             "edebug-display-freq-count"
                             "normal-mode"
                             "fundamental-mode"
                             "getenv"
                             "setenv"
                             "smie-config-guess"
                             "smie-config-save"
                             "smie-config-show-indent"
                             "smie-config-set-indent"
                             "search-forward"
                             "search-backward"
                             "word-search-forward"
                             "word-search-forward-lax"
                             "word-search-backward"
                             "word-search-backward-lax"
                             "base64-encode-region"
                             "base64-decode-region"
                             "compile-defun"
                             "byte-compile-file"
                             "byte-recompile-directory"
                             "execute-extended-command"
                             "backtrace"
                             "make-frame-on-display"
                             "find-file"
                             "find-file-literally"
                             "find-file-other-window"
                             "find-file-read-only"
                             "format-write-file"
                             "format-find-file"
                             "format-insert-file"
                             "enable-command"
                             "disable-command"
                             "switch-to-prev-buffer"
                             "switch-to-next-buffer"
                             "describe-buffer-case-table"
                             "recursive-edit"
                             "exit-recursive-edit"
                             "abort-recursive-edit"
                             "top-level"
                             "replace-buffer-in-windows"
                             "goto-char"
                             "forward-char"
                             "backward-char"
                             "set-face-foreground"
                             "set-face-background"
                             "set-face-stipple"
                             "set-face-font"
                             "invert-face"
                             "translate-region"
                             "run-with-idle-timer"
                             "delete-window"
                             "delete-other-windows"
                             "delete-windows-on"
                             "describe-mode"
                             "select-frame"
                             "handle-switch-frame"
                             "redraw-display"
                             "apropos"
                             "strong>help-command"
                             "describe-prefix-bindings"
                             "Helper-describe-bindings"
                             "Helper-help"
                             "revert-buffer"
                             "narrow-to-region"
                             "narrow-to-page"
                             "widen"
                             "disassemble"
                             "encode-coding-region"
                             "decode-coding-region"
                             "imenu-add-to-menubar"
                             "set-keyboard-coding-system"
                             "set-terminal-coding-system"
                             "move-to-window-line"
                             "display-buffer"
                             "keyboard-quit"
                             "open-dribble-file"
                             "make-local-variable"
                             "make-variable-buffer-local"
                             "kill-local-variable"
                             "rename-buffer"
                             "describe-bindings"
                             "move-to-column"
                             "eval-region"
                             "eval-buffer"
                             "edebug-set-initial-mode"
                             "package-initialize"
                             "insert-buffer"
                             "self-insert-command"
                             "newline"
                             "list-processes"
                             "quit-window"
                             "sort-regexp-fields"
                             "sort-lines"
                             "sort-paragraphs"
                             "sort-pages"
                             "sort-fields"
                             "sort-numeric-fields"
                             "sort-columns"
                             "set-left-margin"
                             "set-right-margin"
                             "move-to-left-margin"
                             "add-name-to-file"
                             "rename-file"
                             "copy-file"
                             "make-symbolic-link"
                             "delete-file"
                             "set-file-modes"
                             "insert-char"
                             "emacs-version"
                             "iconify-frame"
                             "make-frame-visible"
                             "make-frame-invisible"
                             "minibuffer-inactive-mode"
                             "scroll-up"
                             "scroll-down"
                             "scroll-up-command"
                             "scroll-down-command"
                             "scroll-other-window"
                             "recenter"
                             "recenter-top-bottom"
                             "modify-syntax-entry"
                             "describe-syntax"
                             "re-search-forward"
                             "re-search-backward"
                             "emacs-uptime"
                             "emacs-init-time"
                             "delete-horizontal-space"
                             "delete-indentation"
                             "fixup-whitespace"
                             "just-one-space"
                             "delete-blank-lines"
                             "delete-trailing-whitespace"
                             "debug"
                             "scroll-left"
                             "scroll-right"
                             "blink-matching-open"
                             "global-set-key"
                             "global-unset-key"
                             "local-set-key"
                             "local-unset-key"
                             "raise-frame"
                             "lower-frame"
                             "delete-frame"
                             "fit-window-to-buffer"
                             "fit-frame-to-buffer"
                             "shrink-window-if-larger-than-buffer"
                             "balance-windows"
                             "balance-windows-area"
                             "maximize-window"
                             "minimize-window"
                             "delete-minibuffer-contents"
                             "open-termscript"
                             "erase-buffer"
                             "delete-region"
                             "delete-char"
                             "delete-backward-char"
                             "backward-delete-char-untabify"
                             "capitalize-region"
                             "downcase-region"
                             "upcase-region"
                             "capitalize-word"
                             "downcase-word"
                             "upcase-word"
                             "bury-buffer"
                             "unbury-buffer"
                             "make-frame"
                             "view-register"
                             "insert-register"
                             "kill-region"
                             "copy-region-as-kill"
                             "expand-abbrev"
                             "abbrev-prefix-mark"
                             "set-frame-font"
                             "list-charset-chars"
                             "make-indirect-buffer"
                             "clone-indirect-buffer"
                             "make-directory"
                             "copy-directory"
                             "delete-directory"
                             "locate-library"
                             "list-load-path-shadows"
                             "tab-to-tab-stop"
                             "kill-buffer"
                             "back-to-indentation"
                             "backward-to-indentation"
                             "forward-to-indentation"
                             "unload-feature"
                             "read-kbd-macro"
                             "serial-term"
                             "buffer-enable-undo"
                             "buffer-disable-undo"
                             "text-mode"
                             "prog-mode"
                             "special-mode"
                             "beginning-of-buffer"
                             "end-of-buffer"
                             "forward-list"
                             "backward-list"
                             "up-list"
                             "backward-up-list"
                             "down-list"
                             "forward-sexp"
                             "backward-sexp"
                             "beginning-of-defun"
                             "end-of-defun"
                             "gui-set-selection"
                             "undefined"
                             "garbage-collect"
                             "describe-categories"
                             "load-theme"
                             "enable-theme"
                             "disable-theme"
                             "not-modified"
                             "yank"
                             "yank-pop"
                             "split-window-right"
                             "split-window-below"
                             "set-visited-file-name"
                             ))

  (defvar xah-elisp-user-options nil "List of user options.")
  (setq xah-elisp-user-options '(
                                 "switch-to-buffer-in-dedicated-window"
                                 "switch-to-buffer-preserve-window-point"
                                 "transient-mark-mode"
                                 "mark-even-if-inactive"
                                 "mark-ring-max"
                                 "timer-max-repeats"
                                 "abbrev-file-name"
                                 "save-abbrevs"
                                 "custom-unlispify-remove-prefixes"
                                 "tab-always-indent"
                                 "completion-auto-help"
                                 "fill-individual-varying-indent"
                                 "default-justification"
                                 "sentence-end-double-space"
                                 "sentence-end-without-period"
                                 "sentence-end-without-space"
                                 "debug-on-quit"
                                 "default-input-method"
                                 "indent-tabs-mode"
                                 "window-adjust-process-window-size-function"
                                 "create-lockfiles"
                                 "completion-styles"
                                 "completion-category-overrides"
                                 "read-buffer-function"
                                 "read-buffer-completion-ignore-case"
                                 "before-save-hook"
                                 "after-save-hook"
                                 "file-precious-flag"
                                 "require-final-newline"
                                 "warning-minimum-level"
                                 "warning-minimum-log-level"
                                 "warning-suppress-types"
                                 "warning-suppress-log-types"
                                 "inhibit-startup-screen"
                                 "initial-buffer-choice"
                                 "inhibit-startup-echo-area-message"
                                 "initial-scratch-message"
                                 "enable-recursive-minibuffers"
                                 "delete-exited-processes"
                                 "initial-frame-alist"
                                 "minibuffer-frame-alist"
                                 "default-frame-alist"
                                 "indicate-empty-lines"
                                 "indicate-buffer-boundaries"
                                 "overflow-newline-into-fringe"
                                 "backup-by-copying"
                                 "backup-by-copying-when-linked"
                                 "backup-by-copying-when-mismatch"
                                 "backup-by-copying-when-privileged-mismatch"
                                 "case-fold-search"
                                 "case-replace"
                                 "user-mail-address"
                                 "words-include-escapes"
                                 "version-control"
                                 "kept-new-versions"
                                 "kept-old-versions"
                                 "delete-old-versions"
                                 "dired-kept-versions"
                                 "auto-save-visited-file-name"
                                 "auto-save-interval"
                                 "auto-save-timeout"
                                 "auto-save-default"
                                 "delete-auto-save-files"
                                 "auto-save-list-file-prefix"
                                 "message-log-max"
                                 "auto-coding-regexp-alist"
                                 "file-coding-system-alist"
                                 "auto-coding-alist"
                                 "auto-coding-functions"
                                 "only-global-abbrevs"
                                 "package-archives"
                                 "package-archive-upload-base"
                                 "initial-major-mode"
                                 "major-mode"
                                 "mail-host-address"
                                 "page-delimiter"
                                 "paragraph-separate"
                                 "paragraph-start"
                                 "sentence-end"
                                 "smie-config"
                                 "edebug-eval-macro-args"
                                 "echo-keystrokes"
                                 "double-click-fuzz"
                                 "double-click-time"
                                 "find-file-wildcards"
                                 "find-file-hook"
                                 "switch-to-visible-buffer"
                                 "frame-resize-pixelwise"
                                 "completion-ignored-extensions"
                                 "focus-follows-mouse"
                                 "no-redraw-on-reenter"
                                 "help-char"
                                 "help-event-list"
                                 "three-step-help"
                                 "read-file-name-completion-ignore-case"
                                 "insert-default-directory"
                                 "revert-without-query"
                                 "face-font-family-alternatives"
                                 "face-font-selection-order"
                                 "face-font-registry-alternatives"
                                 "scalable-fonts-allowed"
                                 "load-prefer-newer"
                                 "selective-display-ellipses"
                                 "inhibit-eol-conversion"
                                 "display-buffer-alist"
                                 "display-buffer-base-action"
                                 "kill-ring-max"
                                 "void-text-area-pointer"
                                 "exec-suffixes"
                                 "exec-path"
                                 "max-lisp-eval-depth"
                                 "edebug-sit-for-seconds"
                                 "make-backup-files"
                                 "backup-directory-alist"
                                 "make-backup-file-name-function"
                                 "edebug-setup-hook"
                                 "edebug-all-defs"
                                 "edebug-all-forms"
                                 "edebug-save-windows"
                                 "edebug-save-displayed-buffer-points"
                                 "edebug-initial-mode"
                                 "edebug-trace"
                                 "edebug-test-coverage"
                                 "edebug-continue-kbd-macro"
                                 "edebug-unwrap-results"
                                 "edebug-on-error"
                                 "edebug-on-quit"
                                 "edebug-global-break-condition"
                                 "window-combination-limit"
                                 "window-combination-resize"
                                 "edebug-print-length"
                                 "edebug-print-level"
                                 "edebug-print-circle"
                                 "frame-auto-hide-function"
                                 "sort-fold-case"
                                 "sort-numeric-base"
                                 "fill-prefix"
                                 "fill-column"
                                 "left-margin"
                                 "fill-nobreak-predicate"
                                 "enable-local-variables"
                                 "safe-local-variable-values"
                                 "enable-local-eval"
                                 "safe-local-eval-forms"
                                 "frame-inhibit-implied-resize"
                                 "display-mm-dimensions-alist"
                                 "remote-file-name-inhibit-cache"
                                 "read-regexp-defaults-function"
                                 "max-mini-window-height"
                                 "mode-line-format"
                                 "eval-expression-print-length"
                                 "eval-expression-print-level"
                                 "scroll-margin"
                                 "scroll-conservatively"
                                 "scroll-down-aggressively"
                                 "scroll-up-aggressively"
                                 "scroll-step"
                                 "scroll-preserve-screen-position"
                                 "next-screen-context-lines"
                                 "scroll-error-top-bottom"
                                 "recenter-redisplay"
                                 "recenter-positions"
                                 "byte-compile-dynamic-docstrings"
                                 "yank-handled-properties"
                                 "yank-excluded-properties"
                                 "max-specpdl-size"
                                 "term-file-prefix"
                                 "term-file-aliases"
                                 "image-load-path"
                                 "scroll-bar-mode"
                                 "horizontal-scroll-bar-mode"
                                 "blink-matching-paren"
                                 "blink-matching-paren-distance"
                                 "blink-matching-delay"
                                 "underline-minimum-offset"
                                 "x-bitmap-file-path"
                                 "minibuffer-auto-raise"
                                 "window-resize-pixelwise"
                                 "fit-window-to-buffer-horizontally"
                                 "fit-frame-to-buffer"
                                 "fit-frame-to-buffer-margins"
                                 "fit-frame-to-buffer-sizes"
                                 "baud-rate"
                                 "imagemagick-enabled-types"
                                 "imagemagick-types-inhibit"
                                 "visible-bell"
                                 "ring-bell-function"
                                 "site-run-file"
                                 "inhibit-default-init"
                                 "backward-delete-char-untabify-method"
                                 "cursor-in-non-selected-windows"
                                 "x-stretch-cursor"
                                 "blink-cursor-alist"
                                 "truncate-lines"
                                 "truncate-partial-width-windows"
                                 "kill-read-only-ok"
                                 "pop-up-windows"
                                 "split-window-preferred-function"
                                 "split-height-threshold"
                                 "split-width-threshold"
                                 "even-window-sizes"
                                 "pop-up-frames"
                                 "pop-up-frame-function"
                                 "pop-up-frame-alist"
                                 "same-window-buffer-names"
                                 "same-window-regexps"
                                 "debug-on-error"
                                 "debug-ignored-errors"
                                 "eval-expression-debug-on-error"
                                 "debug-on-signal"
                                 "debug-on-event"
                                 "adaptive-fill-mode"
                                 "adaptive-fill-regexp"
                                 "adaptive-fill-first-line-regexp"
                                 "adaptive-fill-function"
                                 "glyphless-char-display-control"
                                 "abbrev-all-caps"
                                 "temp-buffer-show-function"
                                 "temp-buffer-resize-mode"
                                 "temp-buffer-max-height"
                                 "temp-buffer-max-width"
                                 "tab-stop-list"
                                 "buffer-offer-save"
                                 "temporary-file-directory"
                                 "small-temporary-file-directory"
                                 "undo-limit"
                                 "undo-strong-limit"
                                 "undo-outer-limit"
                                 "undo-ask-before-discard"
                                 "parse-sexp-ignore-comments"
                                 "ctl-arrow"
                                 "tab-width"
                                 "defun-prompt-regexp"
                                 "open-paren-in-column-0-is-defun-start"
                                 "history-length"
                                 "history-delete-duplicates"
                                 "selection-coding-system"
                                 "meta-prefix-char"
                                 "garbage-collection-messages"
                                 "gc-cons-threshold"
                                 "gc-cons-percentage"
                                 "resize-mini-windows"
                                 "max-mini-window-height"
                                 "window-min-height"
                                 "window-min-width"
                                 "split-window-keep-point"
                                 ))

  (defvar xah-elisp-variables nil "List elisp variables names (excluding user options).")
  (setq xah-elisp-variables '(
                              "buffer-file-name"
                              "buffer-file-truename"
                              "buffer-file-number"
                              "list-buffers-directory"
                              "yank-undo-function"
                              "header-line-format"
                              "custom-known-themes"
                              "float-e"
                              "float-pi"
                              "unicode-category-table"
                              "char-script-table"
                              "char-width-table"
                              "printable-chars"
                              "post-gc-hook"
                              "memory-full"
                              "gcs-done"
                              "gc-elapsed"
                              "module-file-suffix"
                              "history-add-new-input"
                              "minibuffer-history"
                              "query-replace-history"
                              "file-name-history"
                              "buffer-name-history"
                              "regexp-history"
                              "extended-command-history"
                              "shell-command-history"
                              "read-expression-history"
                              "face-name-history"
                              "beginning-of-defun-function"
                              "end-of-defun-function"
                              "multibyte-syntax-as-symbol"
                              "comment-end-can-be-escaped"
                              "tabulated-list-format"
                              "tabulated-list-entries"
                              "tabulated-list-revert-hook"
                              "tabulated-list-printer"
                              "tabulated-list-sort-key"
                              "font-lock-keywords"
                              "font-lock-keywords-case-fold-search"
                              "unload-feature-special-hooks"
                              "kill-buffer-query-functions"
                              "kill-buffer-hook"
                              "buffer-save-without-query"
                              "load-path"
                              "desktop-save-buffer"
                              "desktop-buffer-mode-handlers"
                              "charset-list"
                              "temp-buffer-setup-hook"
                              "temp-buffer-show-hook"
                              "abbrev-start-location"
                              "abbrev-start-location-buffer"
                              "last-abbrev"
                              "last-abbrev-location"
                              "last-abbrev-text"
                              "abbrev-expand-function"
                              "process-adaptive-read-buffering"
                              "glyphless-char-display"
                              "debug-on-message"
                              "enable-multibyte-characters"
                              "char-property-alias-alist"
                              "default-text-properties"
                              "wrap-prefix"
                              "line-prefix"
                              "register-alist"
                              "cursor-type"
                              "before-make-frame-hook"
                              "after-make-frame-functions"
                              "frame-inherited-parameters"
                              "buffer-list-update-hook"
                              "overlay-arrow-string"
                              "overlay-arrow-position"
                              "overlay-arrow-variable-list"
                              "inhibit-message"
                              "before-init-hook"
                              "after-init-hook"
                              "emacs-startup-hook"
                              "window-setup-hook"
                              "user-init-file"
                              "user-emacs-directory"
                              "image-format-suffixes"
                              "mouse-position-function"
                              "tool-bar-map"
                              "auto-resize-tool-bars"
                              "auto-raise-tool-bar-buttons"
                              "tool-bar-button-margin"
                              "tool-bar-button-relief"
                              "tool-bar-border"
                              "text-property-default-nonsticky"
                              "completing-read-function"
                              "frame-title-format"
                              "icon-title-format"
                              "multiple-frames"
                              "blink-paren-function"
                              "menu-bar-final-items"
                              "menu-bar-update-hook"
                              "vertical-scroll-bar"
                              "horizontal-scroll-bar"
                              "scroll-bar-width"
                              "scroll-bar-height"
                              "cons-cells-consed"
                              "floats-consed"
                              "vector-cells-consed"
                              "symbols-consed"
                              "string-chars-consed"
                              "misc-objects-consed"
                              "intervals-consed"
                              "strings-consed"
                              "tty-setup-hook"
                              "fontification-functions"
                              "search-spaces-regexp"
                              "face-remapping-alist"
                              "other-window-scroll-buffer"
                              "system-key-alist"
                              "x-alt-keysym"
                              "x-meta-keysym"
                              "x-hyper-keysym"
                              "x-super-keysym"
                              "standard-output"
                              "print-quoted"
                              "print-escape-newlines"
                              "print-escape-nonascii"
                              "print-escape-multibyte"
                              "print-length"
                              "print-level"
                              "print-circle"
                              "print-gensym"
                              "print-continuous-numbering"
                              "print-number-table"
                              "float-output-format"
                              "after-load-functions"
                              "text-quoting-style"
                              "minibuffer-setup-hook"
                              "minibuffer-exit-hook"
                              "minibuffer-help-form"
                              "minibuffer-scroll-window"
                              "last-command"
                              "real-last-command"
                              "last-repeatable-command"
                              "this-command"
                              "this-original-command"
                              "last-nonmenu-event"
                              "last-command-event"
                              "last-event-frame"
                              "disable-point-adjustment"
                              "global-disable-point-adjustment"
                              "standard-translation-table-for-decode"
                              "standard-translation-table-for-encode"
                              "translation-table-for-input"
                              "minibuffer-allow-text-properties"
                              "minibuffer-local-map"
                              "minibuffer-local-ns-map"
                              "process-connection-type"
                              "inhibit-file-name-handlers"
                              "inhibit-file-name-operation"
                              "dir-locals-class-alist"
                              "dir-locals-directory-cache"
                              "enable-dir-local-variables"
                              "max-image-size"
                              "minor-mode-list"
                              "change-major-mode-after-body-hook"
                              "after-change-major-mode-hook"
                              "noninteractive"
                              "emacs-build-time"
                              "emacs-version"
                              "emacs-major-version"
                              "emacs-minor-version"
                              "font-lock-keywords-only"
                              "font-lock-syntax-table"
                              "font-lock-syntactic-face-function"
                              "process-file-side-effects"
                              "interprogram-paste-function"
                              "interprogram-cut-function"
                              "inhibit-local-variables-regexps"
                              "file-local-variables-alist"
                              "before-hack-local-variables-hook"
                              "hack-local-variables-hook"
                              "ignored-local-variables"
                              "window-point-insertion-type"
                              "font-lock-defaults"
                              "overwrite-mode"
                              "extra-keyboard-modifiers"
                              "keyboard-translate-table"
                              "executing-kbd-macro"
                              "defining-kbd-macro"
                              "last-kbd-macro"
                              "kbd-macro-termination-hook"
                              "emacs-save-session-functions"
                              "write-region-annotate-functions"
                              "write-region-post-annotation-function"
                              "after-insert-file-functions"
                              "features"
                              "buffer-backed-up"
                              "backup-enable-predicate"
                              "backup-inhibited"
                              "num-input-keys"
                              "values"
                              "buffer-file-coding-system"
                              "save-buffer-coding-system"
                              "last-coding-system-used"
                              "file-name-coding-system"
                              "inhibit-null-byte-detection"
                              "inhibit-iso-escape-detection"
                              "exec-directory"
                              "obarray"
                              "lexical-binding"
                              "buffer-display-table"
                              "standard-display-table"
                              "pre-redisplay-function"
                              "pre-redisplay-functions"
                              "x-pointer-shape"
                              "x-sensitive-text-pointer-shape"
                              "font-lock-mark-block-function"
                              "font-lock-extra-managed-props"
                              "font-lock-fontify-buffer-function"
                              "font-lock-unfontify-buffer-function"
                              "font-lock-fontify-region-function"
                              "font-lock-unfontify-region-function"
                              "font-lock-flush-function"
                              "font-lock-ensure-function"
                              "change-major-mode-hook"
                              "window-persistent-parameters"
                              "ignore-window-parameters"
                              "quit-flag"
                              "inhibit-quit"
                              "most-positive-fixnum"
                              "most-negative-fixnum"
                              "global-map"
                              "minor-mode-map-alist"
                              "minor-mode-overriding-map-alist"
                              "overriding-local-map"
                              "overriding-terminal-local-map"
                              "overriding-local-map-menu-flag"
                              "special-event-map"
                              "emulation-mode-map-alists"
                              "kill-ring"
                              "kill-ring-yank-pointer"
                              "display-buffer-overriding-action"
                              "buffer-undo-list"
                              "undo-auto-current-boundary-timer"
                              "undo-in-progress"
                              "pre-command-hook"
                              "post-command-hook"
                              "imenu-generic-expression"
                              "imenu-case-fold-search"
                              "imenu-syntax-alist"
                              "imenu-prev-index-position-function"
                              "imenu-extract-index-name-function"
                              "imenu-create-index-function"
                              "doc-directory"
                              "coding-system-for-read"
                              "coding-system-for-write"
                              "selective-display"
                              "electric-future-map"
                              "load-history"
                              "command-line-processed"
                              "command-switch-alist"
                              "command-line-args"
                              "command-line-args-left"
                              "command-line-functions"
                              "load-suffixes"
                              "load-file-rep-suffixes"
                              "inhibit-point-motion-hooks"
                              "show-help-function"
                              "command-history"
                              "face-font-rescale-alist"
                              "locale-coding-system"
                              "system-messages-locale"
                              "system-time-locale"
                              "menu-prompt-more-char"
                              "left-margin-width"
                              "right-margin-width"
                              "completion-ignore-case"
                              "completion-regexp-list"
                              "buffer-invisibility-spec"
                              "global-abbrev-table"
                              "local-abbrev-table"
                              "abbrev-minor-mode-table-alist"
                              "fundamental-mode-abbrev-table"
                              "text-mode-abbrev-table"
                              "lisp-mode-abbrev-table"
                              "revert-buffer-in-progress-p"
                              "revert-buffer-function"
                              "revert-buffer-insert-file-contents-function"
                              "before-revert-hook"
                              "after-revert-hook"
                              "buffer-stale-function"
                              "input-method-function"
                              "read-file-name-function"
                              "minibuffer-local-shell-command-map"
                              "glyph-table"
                              "help-map"
                              "help-form"
                              "prefix-help-command"
                              "data-directory"
                              "byte-boolean-vars"
                              "auto-window-vscroll"
                              "focus-in-hook"
                              "focus-out-hook"
                              "query-replace-map"
                              "multi-query-replace-map"
                              "replace-search-function"
                              "replace-re-search-function"
                              "warning-levels"
                              "warning-prefix-function"
                              "warning-series"
                              "warning-fill-prefix"
                              "warning-type-format"
                              "split-string-default-separators"
                              "before-change-functions"
                              "after-change-functions"
                              "first-change-hook"
                              "inhibit-modification-hooks"
                              "buffer-display-count"
                              "buffer-display-time"
                              "command-error-function"
                              "filter-buffer-substring-function"
                              "filter-buffer-substring-functions"
                              "buffer-substring-filters"
                              "ascii-case-table"
                              "disabled-command-function"
                              "format-alist"
                              "buffer-file-format"
                              "buffer-auto-save-file-format"
                              "find-file-not-found-functions"
                              "find-file-literally"
                              "delete-terminal-functions"
                              "num-nonmacro-input-events"
                              "debugger"
                              "debug-on-next-call"
                              "command-debug-status"
                              "insert-directory-program"
                              "font-lock-extend-after-change-region-function"
                              "cursor-in-echo-area"
                              "echo-area-clear-hook"
                              "message-truncate-lines"
                              "fringes-outside-margins"
                              "left-fringe-width"
                              "right-fringe-width"
                              "tooltip-frame-parameters"
                              "tooltip-functions"
                              "byte-compile-dynamic"
                              "standard-input"
                              "read-circle"
                              "image-cache-eviction-delay"
                              "system-configuration"
                              "system-type"
                              "process-environment"
                              "initial-environment"
                              "path-separator"
                              "invocation-name"
                              "invocation-directory"
                              "installation-directory"
                              "tty-erase-char"
                              "buffer-access-fontify-functions"
                              "buffer-access-fontified-property"
                              "input-decode-map"
                              "local-function-key-map"
                              "key-translation-map"
                              "interpreter-mode-alist"
                              "magic-mode-alist"
                              "magic-fallback-mode-alist"
                              "auto-mode-alist"
                              "process-coding-system-alist"
                              "network-coding-system-alist"
                              "default-process-coding-system"
                              "unread-command-events"
                              "last-input-event"
                              "buffer-auto-save-file-name"
                              "auto-save-hook"
                              "buffer-saved-size"
                              "auto-save-list-file-name"
                              "inhibit-field-text-motion"
                              "find-word-boundary-function-table"
                              "default-minibuffer-frame"
                              "init-file-user"
                              "play-sound-functions"
                              "customize-package-emacs-version-alist"
                              "delayed-warnings-list"
                              "delayed-warnings-hook"
                              "fringe-cursor-alist"
                              "indent-region-function"
                              "fringe-indicator-alist"
                              "dynamic-library-alist"
                              "kill-emacs-hook"
                              "kill-emacs-query-functions"
                              "abbrev-table-name-list"
                              "buffer-read-only"
                              "inhibit-read-only"
                              "window-size-fixed"
                              "load-in-progress"
                              "load-file-name"
                              "load-read-function"
                              "image-types"
                              "pure-bytes-used"
                              "purify-flag"
                              "bidi-display-reordering"
                              "bidi-paragraph-direction"
                              "write-file-functions"
                              "write-contents-functions"
                              "window-scroll-functions"
                              "window-size-change-functions"
                              "window-configuration-change-hook"
                              "window-system"
                              "initial-window-system"
                              "font-lock-multiline"
                              "completion-styles-alist"
                              "completion-extra-properties"
                              "current-input-method"
                              "input-method-alist"
                              "suspend-hook"
                              "suspend-resume-hook"
                              "default-directory"
                              "current-prefix-arg"
                              "prefix-arg"
                              "last-prefix-arg"
                              "fill-paragraph-function"
                              "fill-forward-paragraph-function"
                              "use-hard-newlines"
                              "minibuffer-completion-table"
                              "minibuffer-completion-predicate"
                              "minibuffer-completion-confirm"
                              "minibuffer-confirm-exit-commands"
                              "minibuffer-local-completion-map"
                              "minibuffer-local-must-match-map"
                              "minibuffer-local-filename-completion-map"
                              "auto-fill-function"
                              "normal-auto-fill-function"
                              "auto-fill-chars"
                              "generate-autoload-cookie"
                              "generated-autoload-file"
                              "x-resource-class"
                              "x-resource-name"
                              "inhibit-x-resources"
                              "indent-line-function"
                              "abbrevs-changed"
                              "mode-line-mule-info"
                              "mode-line-modified"
                              "mode-line-frame-identification"
                              "mode-line-buffer-identification"
                              "mode-line-position"
                              "vc-mode"
                              "mode-line-modes"
                              "mode-line-remote"
                              "mode-line-client"
                              "mode-name"
                              "mode-line-process"
                              "mode-line-front-space"
                              "mode-line-end-spaces"
                              "mode-line-misc-info"
                              "minor-mode-alist"
                              "global-mode-string"
                              "deactivate-mark"
                              "mark-active"
                              "activate-mark-hook"
                              "deactivate-mark-hook"
                              "mark-ring"
                              "parse-sexp-lookup-properties"
                              "syntax-propertize-function"
                              "syntax-propertize-extend-region-functions"
                              "completion-at-point-functions"
                              ))

  (defvar xah-elisp-all-symbols nil "List of all elisp symbols.")
  (setq xah-elisp-all-symbols nil)

  (defface elisp-attribute-face
    '((nil :background "#F0DFF9"))
    "Face for :xxx."
    :group 'emacs-lisp-mode )

  (font-lock-add-keywords
   'emacs-lisp-mode
   `(
     (,(regexp-opt xah-elisp-ampersand-words 'symbols) . font-lock-builtin-face)
     (,(regexp-opt xah-elisp-functions 'symbols) . font-lock-function-name-face)
     (,(regexp-opt xah-elisp-special-forms 'symbols) . font-lock-keyword-face)
     (,(regexp-opt xah-elisp-macros 'symbols) . font-lock-keyword-face)
     (,(regexp-opt xah-elisp-commands 'symbols) . 'font-lock-function-name-face)
     (,(regexp-opt xah-elisp-user-options 'symbols) . font-lock-variable-name-face)
     (,(regexp-opt xah-elisp-variables 'symbols) . font-lock-variable-name-face)
     (":[a-z\\-]+\\b" . 'elisp-attribute-face)
     ))

#+end_src
*** snails
#+begin_src elisp
  (when (featurep 'snails)
    (set-face-attribute 'snails-header-line-face nil :inherit 'variable-pitch :foreground "#a626a4" :underline t :weight 'normal :slant 'italic :height 1.2)
    (set-face-attribute 'snails-header-index-face nil :inherit 'snails-header-line-face :height 0.7 :slant 'italic)
    (set-face-attribute 'snails-candiate-content-face nil :inherit 'variable-pitch :weight 'light :slant 'normal)
    (set-face-attribute 'snails-input-buffer-face nil :inherit 'variable-pitch :font (font-spec :name "lato") :height 200)
    (set-face-attribute 'snails-content-buffer-face nil :inherit 'variable-pitch :font (font-spec :name "lato") :height 150)
    )
#+end_src
*** java
#+begin_src elisp
  (font-lock-add-keywords
   'java-mode
   '(
     ("[a-z]<[a-zA-Z]+>"  . 'font-lock-type-face)
     ))
  (add-hook 'java-mode-hook 'weiss-java-face)

  (defun weiss-java-face ()
    (interactive)
    (face-remap-add-relative
     ;; 'font-lock-function-name-face '((:foreground "#383a42" :box '(:line-width 1))) font-lock-function-name-face)
     'font-lock-function-name-face '((:foreground "#383a42" :background "#f8eed4")) font-lock-function-name-face)
    (face-remap-add-relative
     'font-lock-variable-name-face '((:foreground "#383a42" :underline t)) font-lock-variable-name-face)
    (face-remap-add-relative
     'c-annotation-face '((:foreground "#A9AAAE")))
    (face-remap-add-relative
     'font-lock-type-face '((:foreground "#737C79" :background "#F7EBFC")))
    )
#+end_src
*** org
#+begin_src elisp
  (when (featurep 'org)
    (add-hook 'org-mode-hook (lambda ()
                               (variable-pitch-mode)
                               ))
    ;; fix indentation when variable-pitch-mode is called
    (require 'org-indent)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))  

    (set-face-attribute 'bold  nil
                        :weight 'demibold
                        :slant 'normal
                        :underline 'nil
                        :foreground "#f5355e"
                        :background nil)
    (set-face-attribute 'italic nil
                        :weight 'normal
                        :underline 'nil
                        :slant 'italic
                        :height 0.95
                        :foreground "#606060"
                        :background nil)
    (set-face-attribute 'underline nil
                        :weight 'normal
                        :underline 'nil
                        :foreground "medium sea green"
                        :background nil)
    (set-face-attribute 'org-link nil
                        :height 1.1
                        :inherit nil
                        :underline t
                        )
    (set-face-attribute 'org-block-begin-line nil
                        :weight 'normal
                        :slant 'normal
                        :extend t
                        :underline 'nil
                        :foreground "#999999"
                        :background "#FAFAFA")
    (set-face-attribute 'org-checkbox nil
                        :font "JetBrainsMono"
                        :extend nil
                        )
    (set-face-attribute 'org-table nil
                        :font "JetBrainsMono"
                        :extend nil
                        )

    (set-face-attribute 'org-block nil
                        :font "JetBrainsMono"
                        :extend nil
                        :background "#FAFAFA")

    (set-face-attribute 'org-drawer nil
                        :foreground "#999999"
                        :slant 'normal
                        :weight 'light
                        :background nil)
    (set-face-attribute 'org-special-keyword nil
                        :height 'unspecified
                        :foreground 'unspecified
                        :weight 'bold
                        :slant 'normal
                        :inherit 'org-drawer)
    (set-face-attribute 'org-property-value nil
                        :weight 'normal
                        :slant 'normal
                        :height 1.0
                        :inherit 'org-special-keyword)
    (set-face-attribute 'org-headline-done nil
                        :strike-through t
                        :weight 'normal)

    (set-face-attribute 'org-level-1 nil
                        :height 1.35
                        :foreground "#ff5a19"
                        :weight 'bold)
    (set-face-attribute 'org-level-2 nil
                        :height 0.95
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-1)
    (set-face-attribute 'org-level-3 nil
                        :height 0.95
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-2)
    (set-face-attribute 'org-level-4 nil
                        :height 0.95
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-3)
    (set-face-attribute 'org-level-5 nil
                        :height 1.0
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-4)
    (set-face-attribute 'org-level-6 nil
                        :height 1.0
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-5)
    (set-face-attribute 'org-level-7 nil
                        :height 1.0
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-6)
    (set-face-attribute 'org-level-8 nil
                        :height 1.0
                        :foreground "#040404"
                        :weight 'normal
                        :inherit 'org-level-7)

    (font-lock-add-keywords 'org-mode
                            '(("^.*:Frage:.*$" 0 'font-lock-keyword-face)))

    (add-to-list 'org-tag-faces '("Frage" . (:foreground "red"  :weight 'bold)))
    )
#+end_src
*** org-roam
#+begin_src elisp
  (set-face-attribute 'org-roam-tag nil :italic t :foreground "#808080" :weight 'light)
#+end_src
*** python
#+begin_src elisp
  (add-hook 'python-mode-hook '(lambda ()
                                 (face-remap-add-relative
                                  'font-lock-variable-name-face
                                  '((:foreground "#383a42" :underline t))
                                  font-lock-variable-name-face)
                                 (face-remap-add-relative
                                  'default
                                  '((:weight normal))
                                  )))

#+end_src

** face
:PROPERTIES:
:header-args: :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

#+begin_src elisp
  (set-face-attribute 'hl-line nil :inherit nil :box nil :background "#ffe8e8" :extend nil)
  (defface box-hl-line
    '((t (:inherit nil :extend nil :box (:line-width (-1 . -2) :color "#ededed" :style nil))))
    "highlight the current line with box"
    )
  ;; (set (make-local-variable 'hl-line-face) 'box-hl-line)

  (defface normal-hl-line
    '((t :box nil :extend nil :background "#ffe8e8"))
    "highlight the current line with background"
    )

  (defface emphasis-hl-line
    '((t :box nil :extend nil :background "#ffb5ff"))
    "highlight the current line with background"
    )

#+end_src

#+RESULTS:

** Functions
#+begin_src elisp
  (defvar weiss/disable-hl-mode-list '(snails-mode pdf-view-mode))

  (defun weiss-toggle-hl-line ()
    "toggle hl line using weiss-enable-hl-line"
    (interactive)
    (if hl-line-mode
        (hl-line-mode -1)
      (weiss-enable-hl-line)
      )
    )

  (defun weiss-enable-hl-line ()
    "change hl line face by major-mode"
    (interactive)
    (unless (member major-mode weiss/disable-hl-mode-list)
      (hl-line-mode -1)
      (cond
       (weiss-dired-single-handed-mode
        (set (make-local-variable 'hl-line-face) 'emphasis-hl-line)
        )
       ((eq major-mode 'dired-mode)
        (set (make-local-variable 'hl-line-face) 'normal-hl-line)
        )
       ((eq major-mode 'org-agenda-mode)
        (set (make-local-variable 'hl-line-face) 'normal-hl-line)
        )
       (t (set (make-local-variable 'hl-line-face) 'box-hl-line))
       )
      (hl-line-mode 1)
      )
    )
#+end_src
** icons
#+begin_src elisp
  ;; NOTE: Must run `M-x all-the-icons-install-fonts', and install fonts manually 
  (use-package all-the-icons 
    :diminish
    :if (display-graphic-p)
    :config
    (add-to-list 'all-the-icons-mode-icon-alist '(xah-elisp-mode all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-purple))
    (add-to-list 'all-the-icons-mode-icon-alist '(eaf-mode all-the-icons-alltheicon "atom" :height 1.0 :v-adjust -0.2 :face all-the-icons-purple))
    (add-to-list 'all-the-icons-mode-icon-alist '(debugger-mode all-the-icons-faicon "bug" :height 1.0 :v-adjust -0.2 :face all-the-icons-purple))
    (add-to-list 'all-the-icons-mode-icon-alist '(telega-root-mode all-the-icons-fileicon "telegram" :height 1.0 :v-adjust -0.2 :face all-the-icons-purple))
    (add-to-list 'all-the-icons-mode-icon-alist '(telega-chat-mode all-the-icons-material "chat" :height 1.0 :v-adjust -0.2 :face all-the-icons-purple))
    (with-no-warnings
      (defun all-the-icons-reset ()
        "Reset (unmemoize/memoize) the icons."
        (interactive)
        (dolist (f '(all-the-icons-icon-for-file
                     all-the-icons-icon-for-mode
                     all-the-icons-icon-for-url
                     all-the-icons-icon-family-for-file
                     all-the-icons-icon-family-for-mode
                     all-the-icons-icon-family))
          (ignore-errors
            (memoize-restore f)
            (memoize f)))
        (message "Reset all-the-icons"))))
#+end_src
** eldoc
#+begin_src elisp
  (defconst weiss--eldoc-commands
    '(
      weiss-right-key
      weiss-up-key
      weiss-down-key
      weiss-left-key
      xah-backward-left-bracket
      xah-forward-right-bracket
      )
    "A list commands trigger eldoc.")

  (setq eldoc-display-functions '(eldoc-display-in-echo-area weiss-show-eldoc))

  (apply #'eldoc-add-command weiss--eldoc-commands)

  (global-set-key (kbd "M-e") 'eldoc)

  (defun weiss-show-eldoc (docs _interactive)
    "just the main part of eldoc-display-in-echo-area"
    (interactive)
    (let*
          ((width (1- (window-width (minibuffer-window))))
           (val (if (and (symbolp eldoc-echo-area-use-multiline-p)
                         eldoc-echo-area-use-multiline-p)
                    max-mini-window-height
                  eldoc-echo-area-use-multiline-p))
           (available (cl-typecase val
                        (float (truncate (* (frame-height) val)))
                        (integer val)
                        (t 'just-one-line)))
           single-doc single-doc-sym)
        (let ((echo-area-message
               (cond
                (;; To output to the echo area, we handle the
                 ;; `truncate-sym-name-if-fit' special case first, by
                 ;; checking for a lot of special conditions.
                 (and
                  (eq 'truncate-sym-name-if-fit eldoc-echo-area-use-multiline-p)
                  (null (cdr docs))
                  (setq single-doc (caar docs))
                  (setq single-doc-sym
                        (format "%s" (plist-get (cdar docs) :thing)))
                  (< (length single-doc) width)
                  (not (string-match "\n" single-doc))
                  (> (+ (length single-doc) (length single-doc-sym) 2) width))
                 single-doc)
                ((and (numberp available)
                      (cl-plusp available))
                 ;; Else, given a positive number of logical lines, we
                 ;; format the *eldoc* buffer, using as most of its
                 ;; contents as we know will fit.
                 (with-current-buffer (eldoc--format-doc-buffer docs)
                   (save-excursion
                     (eldoc--echo-area-substring available))))
                (t ;; this is the "truncate brutally" situation
                 (let ((string
                        (with-current-buffer (eldoc--format-doc-buffer docs)
                          (buffer-substring (goto-char (point-min))
                                            (line-end-position 1)))))
                   (if (> (length string) width)  ; truncation to happen
                       (unless (eldoc--echo-area-prefer-doc-buffer-p t)
                         (truncate-string-to-width string width))
                     (unless (eldoc--echo-area-prefer-doc-buffer-p nil)
                       string)))))))
          (when echo-area-message
            (eldoc--message echo-area-message))))
    )
#+end_src
** misc
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (setq inhibit-startup-screen t)

  (use-package command-log-mode)

  ;; there are some problems to set face attribute before dump
  (set-face-attribute 'cursor '((nil (:background weiss/cursor-color))))
  (set-face-attribute 'mc/cursor-bar-face nil :background weiss/cursor-color)
  (set-cursor-color weiss/cursor-color)
  (use-package emojify 
    :diminish
    ;; :hook (after-init . global-emojify-mode)
    )
#+end_src
** end
#+begin_src elisp
  (provide 'weiss-ui)
#+end_src

** out of use
#+begin_src elisp
  (use-package rainbow-blocks
    :disabled
    :hook (xah-elisp-mode . rainbow-blocks-mode)
    :config  
    )

  (use-package elispfl 
    :diminish
    :disabled
    :quelpa (elispfl :type git
                     :host github
                     :repo "cireu/elispfl")
    :hook (elisp-mode . elispfl-mode))

  (use-package rainbow-delimiters
    :disabled
    :hook (prog-mode . (lambda () (interactive) (unless (eq major-mode 'java-mode) (rainbow-delimiters-mode-enable)))))

  (use-package hideshow 
    :disabled
    :diminish
    :ensure nil
    :diminish hs-minor-mode
    :bind (:map prog-mode-map
                ("C-c TAB" . hs-toggle-hiding)
                ("M-+" . hs-show-all))
    :hook (prog-mode . hs-minor-mode)
    :custom
    (hs-special-modes-alist
     (mapcar 'purecopy
             '((c-mode "{" "}" "/[*/]" nil nil)
               (c++-mode "{" "}" "/[*/]" nil nil)
               (rust-mode "{" "}" "/[*/]" nil nil)))))
#+end_src

* lsp
:PROPERTIES:
:header-args: :tangle lsp/weiss-lsp.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** lsp-mode
*** start, hook, bind
#+begin_src elisp
  (use-package lsp-mode
    ;; :disabled
    :diminish
    :commands lsp
    :hook (
           (java-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp-deferred)))
           (c++-mode . lsp-deferred)
           )
    :bind (:map lsp-mode-map
                ("M-p" . lsp-describe-thing-at-point)
                ([remap xref-find-definitions] . lsp-find-definition)
                ([remap xref-find-references] . lsp-find-references))
#+end_src

*** init
#+begin_src elisp
  :init
#+end_src

**** variable

#+begin_src elisp
  (setq
   lsp-clients-python-library-directories '("/usr/local/" "/usr/")
   lsp-log-io nil                       ;; enable log only for debug
   lsp-headerline-breadcrumb-enable nil
   lsp-response-timeout 100
   lsp-completion-enable-additional-text-edit t
   lsp-prefer-flymake nil
   lsp-diagnostic-package :flycheck
   lsp-auto-guess-root t        ; Detect project root
   lsp-keep-workspace-alive nil ; Auto-kill LSP server
   lsp-enable-indentation t
   flymake-fringe-indicator-position 'right-fringe
   ;; lsp-auto-configure nil
   lsp-ui-doc-enable nil
   lsp-enable-symbol-highlighting nil
   lsp-flycheck-live-reporting nil
   lsp-enable-links nil                 ;; no clickable links
   lsp-enable-folding nil               ;; use `hideshow' instead
   lsp-enable-snippet nil               ;; no snippet
   lsp-enable-file-watchers nil         ;; turn off for better performance
   lsp-enable-text-document-color nil   ;; as above
   lsp-enable-semantic-highlighting nil ;; as above
   lsp-enable-symbol-highlighting nil   ;; as above
   lsp-enable-on-type-formatting nil    ;; disable formatting on the fly
   lsp-modeline-code-actions-enable nil ;; keep modeline clean
   lsp-modeline-diagnostics-enable t  ;; as above
   lsp-idle-delay 0.1                   ;; lazy refresh
   ;; lsp-diagnostics-provider :flycheck   ;; prefer `flycheck'
   lsp-lens-enable nil                    ;; disable lens
   lsp-auto-guess-root t                ;; auto guess root
   lsp-keep-workspace-alive nil         ;; auto kill lsp server
   lsp-eldoc-enable-hover t           ;; disable eldoc hover
   lsp-signature-auto-activate t        ;; show function signature
   lsp-signature-doc-lines 2            ;; but dont take up more lines
   lsp-restart 'auto-restart  ;; auto restart lsp
   lsp-enable-completion-at-point t    ;; Please note `company-lsp' is automatically enabled if installed
   ;; lsp-completion-provider :capf
   lsp-prefer-capf t
   )
#+end_src

**** lsp-ui
#+begin_src elisp
  (use-package lsp-ui
      ;; :disabled
      :commands lsp-ui-mode
      :bind (:map lsp-mode-map
                  ("M-d" . 'lsp-ui-doc-show))
      :init (setq lsp-ui-doc-enable nil
                  lsp-ui-doc-use-webkit nil
                  lsp-ui-doc-delay 0.2
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-position 'at-point
                  lsp-ui-doc-border (face-foreground 'default)
                  lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer

                  lsp-ui-sideline-enable t
                  lsp-ui-sideline-show-hover nil
                  lsp-ui-sideline-show-diagnostics nil
                  lsp-ui-sideline-update-mode 'line
                  lsp-ui-sideline-delay 1
                  lsp-ui-sideline-show-code-actions nil
                  lsp-ui-sideline-ignore-duplicate nil
                  )
      )
#+end_src

**** lsp-java

#+begin_src elisp
  (use-package lsp-java
    ;; :disabled
    :hook (java-mode . (lambda ()
                         (require 'lsp-java)
                         (make-local-variable 'lsp-diagnostic-package)
                         (setq lsp-diagnostic-package :flycheck)
                         (lsp-completion-mode)
                         ;; (lsp-ui-flycheck-enable t)
                         ;; (lsp-ui-sideline-mode)
                         ))
    :requires (lsp-ui-flycheck lsp-ui-sideline)
    :init
    ;; (add-hook 'java-mode-hook 'lsp-completion-mode)
    ;; (setq lsp-java-jdt-download-url  "https://download.eclipse.org/jdtls/milestones/0.57.0/jdt-language-server-0.57.0-202006172108.tar.gz")
    (setq
     lsp-java-format-enabled t
     ;; lsp-java-format-comments-enabled nil
     ;; lsp-java-format-settings-profile "GoogleStyle"
     ;; java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
     lsp-java-format-settings-url " https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
     ;; lsp-java-format-settings-url "/home/weiss/Documents/Vorlesungen/Compiler-and-Language-Processing-Tools/bai-bozhou/rules.xml"
     )
    :ryo
    (:mode 'java-mode)
    ("u" lsp-rename)
    ("t" (
          ("a" lsp-execute-code-action)
          ("t" lsp-java-generate-to-string)
          ("f" weiss-format-current-java-file)
          ("F" weiss-format-current-java-dir)
          ("j" weiss-add-javadoc)
          ("e" lsp-java-generate-equals-and-hash-code)
          ("o" lsp-java-generate-overrides)
          ("g" lsp-java-generate-getters-and-setters)             
          ))    
    :config
    (defun async-shell-command-no-window (command)
      (interactive)
      (let
          ((display-buffer-alist
            (list
             (cons
              "\\*Async Shell Command\\*.*"
              (cons #'display-buffer-no-window nil)))))
        (async-shell-command
         command)))
    (defun weiss--format-java (dir)
      "DOCSTRING"
      (save-buffer)
      (message "start format file")
      (let ((display-buffer-alist (list (cons "\\*Async Shell Command\\*.*"
                                              (cons #'display-buffer-no-window nil))))
            )
        (async-shell-command-no-window
         (concat
          "/home/weiss/idea/idea-IU-201.6668.121/bin/idea.sh format -s /home/weiss/weiss/Bai-JavaCodeStyle.xml "
          (if dir 
              (concat "-r " default-directory)
            (buffer-file-name)))))

      )

    (defun weiss-format-current-java-file ()
      "format current java file using idea"
      (interactive)
      (weiss--format-java nil))
    (defun weiss-format-current-java-dir ()
      "format current directory using idea"
      (interactive)
      (weiss--format-java t))

    (defun weiss-javadoc--get-param (line)
      "get the param in the `line', for `weiss-add-javadoc'"
      (interactive)
      (when (string-match ".*(\\(.+\\)).*" line)
        (setq params (split-string (match-string 1 line) ","))
        (mapcar (lambda (x)
                   (setq x (s-trim x))
                   (when-let ((i (string-match " " x)))
                     (substring x (1+ i)) 
                     )
                   )
                params
                )
        )                
      )

    (defun weiss-add-javadoc ()
      "add java doc using imenu"
      (interactive)
      (let* ((imenu-auto-rescan t)
             (index (imenu--make-index-alist t))
             (l (snails-backend-imenu-build-candidates (delete (assoc "*Rescan*" index) index)))
             )
        (dolist (x l) 
          (let* ((info (split-string (car x) ":"))
                 (f (s-trim (car info)))
                 (p (cdr x))
                 (i (string-match "\(" f))
                 (doc)
                 )
            (goto-char p)
            (ignore-errors (previous-line))
            (when (string= "" (s-trim (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
              (goto-char p)
              (beginning-of-line)
              (setq doc "/**\n* ")
              (when i
                (setq doc (concat doc (substring f 0 i) "."))
                (when-let
                    ((params (weiss-javadoc--get-param (buffer-substring-no-properties
                                                        (line-beginning-position)
                                                        (line-end-position)))))
                  (dolist (x params) 
                    (setq doc (concat doc "\n* @param " x "  "))
                    )
                  )
                (when (not (string= (s-trim (cadr info))  "void"))
                  (setq doc (concat doc "\n* @return  "))
                  )              
                )
              (insert (concat doc "\n*/\n"))
              )
            )
          )
        (indent-region (point-min) (point-max))
        )  
      )
    )
#+end_src

**** python
#+begin_src elisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . yas-minor-mode)
    ) 
#+end_src

**** C/C++/Objective-C
#+begin_src elisp
  ;; C/C++/Objective-C support
  (use-package ccls
    :disabled
    :defines projectile-project-root-files-top-down-recurring
    :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls) (lsp)))
    :init
    ;; (setq ccls-executable "/home/weiss/c++/ccls")
    (setq ccls-executable "/usr/bin/ccls")
    ;; use  "bsd"  "java"  "k&r"  "stroustrup"  "whitesmith"  "banner"  "gnu"  "linux"   "horstmann"
    (setq c-default-style "linux"
          indent-tabs-mode nil
          c-basic-offset 4)
    ;; align a continued string under the one it continues
    (c-set-offset 'statement-cont 'c-lineup-string-cont)
    ;; align or indent after an assignment operator 
    (c-set-offset 'statement-cont 'c-lineup-math)
    ;; align closing brace/paren with opening brace/paren
    (c-set-offset 'arglist-close 'c-lineup-close-paren)
    (c-set-offset 'brace-list-close 'c-lineup-close-paren)
    ;; align current argument line with opening argument line 
    (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist)
    ;; don't change indent of java 'throws' statement in method declaration
    ;;     and other items after the function argument list
    (c-set-offset 'func-decl-cont 'c-lineup-dont-change)  
    ;; not Indent Namespaces
    (c-set-offset  'namespace-open 0)
    (c-set-offset  'namespace-close 0)
    (c-set-offset  'innamespace 0)
    ;; Indent Classes
    (c-set-offset  'class-open 0)
    (c-set-offset  'class-close 0)
    (c-set-offset  'inclass 16)
    :config
    (with-eval-after-load 'projectile
      (setq projectile-project-root-files-top-down-recurring
            (append '("compile_commands.json" ".ccls")
                    projectile-project-root-files-top-down-recurring)))

    ;; compile_commands.json
    ;; cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
    ;; ln -s Debug/compile_commands.json       
    )
#+end_src

*** config
#+begin_src elisp
  :config
  (dolist (x '(go-mode python-mode java-mode)) 
    (ryo-modal-keys
     ("t i" lsp-organize-imports :mode x)
     ("t d" lsp-describe-thing-at-point :mode x)
     ("u" lsp-rename :mode x)            
     )
    )

  ;; (:mode 'go-mode)
  ;; ("u" lsp-rename)
  ;; (:mode 'python-mode)
  ;; ("t" lsp-describe-thing-at-point)
  ;; ("u" lsp-rename)

#+end_src

*** out of use

#+begin_src elisp :tangle no
  (use-package lsp-mssql
    :disabled
    :quelpa (lsp-mssql
             :fetcher github
             :repo "emacs-lsp/lsp-mssql"
             )
    (setq lsp-mssql-connections
          [(:server "localhost"
                    :database "uni"
                    :user "weiss"
                    )])
    )

  (use-package dap-mode
    :disabled
    :ensure t :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  (use-package lsp-pyright
    :disabled
    :quelpa ( lsp-pyright
              :fetcher github 
              :repo emacs-lsp/lsp-pyright)
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           ;; (setq flycheck-checker 'python-pylint
                           ;;       python-mode-skeleton-abbrev-table nil
                           ;;       ;; python-skeleton-autoinsert t
                           ;;       )
                           ;; (face-remap-add-relative
                           ;;  'font-lock-variable-name-face
                           ;;  '((:foreground "#383a42" :underline t))
                           ;;  font-lock-variable-name-face)
                           ;; (face-remap-add-relative
                           ;;  'default
                           ;;  '((:weight normal))
                           ;;  )
                           (lsp-deferred)
                           ))
    )

  (use-package lsp-python-ms
    :disabled
    :init
    (setq lsp-python-ms-auto-install-server t)
    (when (executable-find "python3")
      (setq lsp-python-ms-python-executable-cmd "python3"))
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp-deferred)))
    )

  (use-package lsp-fsharp
    :disabled                           
    :quelpa (lsp-fsharp
             :fetcher github
             :repo "emacs-lsp/lsp-mode")
    :hook (fsharp-mode . (lambda () (require 'lsp-fsharp)))
    :init
    (setq lsp-fsharp-server-install-dir "~/.emacs.d/lsp-fsharp")
    )
#+end_src

**** company-lsp
#+begin_src elisp
  (use-package company-lsp
    :disabled
    :after  company
    :ensure t
    :config
    (add-hook 'java-mode-hook (lambda () (push 'company-lsp company-backends)))
    (setq company-lsp-enable-snippet t
          company-lsp-cache-candidates t)
    (push 'java-mode company-global-modes))
#+end_src

*** end
#+begin_src elisp
)
#+end_src
** nox
#+begin_src elisp
  (use-package nox
    :disabled
    :quelpa (nox
             :fetcher github
             :repo manateelazycat/nox)
    ;; :ensure nil
    ;; :load-path "/home/weiss/.emacs.d/local-package/nox/"
    :init
    (defvar is-nox-activate-p nil)
    ;; (advice-add 'nox-ensure :after (lambda () (interactive) (make-local-variable 'is-nox-activate-p) (setq is-nox-activate-p t)))
    (setq nox-python-server "mspyls")
    ;; (setq nox-python-server "pyls")
    (setq nox-optimization-p nil)

    ;; :hook (
           ;; (python-mode . nox-ensure)
           ;; (go-mode . nox-ensure)
           ;; (nox-managed-mode-hook . ryo-modal-restart)
           ;; )
    :bind (:map nox-mode-map
                ("M-d" . nox-show-doc)
                )
    :ryo
    (:mode 'python-mode)
    ("u" nox-rename)
    ("t" nox-show-doc)
    ;; (:mode 'go-mode)
    ;; ("u" nox-rename)
    ;; ("t" nox-show-doc)  
    :config
    (setq nox-doc-tooltip-font-size "12"
          nox-doc-tooltip-border-width 3)
    ;; (setq nox-python-server 'pyls)
    )
#+end_src
** end
#+begin_src elisp
(provide 'weiss-lsp)
#+end_src
* edit
:PROPERTIES:
:header-args: :tangle edit/weiss-edit.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** multiple-cursors                                                

#+begin_src elisp 
  (use-package multiple-cursors
    :init
    ;; (add-hook 'multiple-cursors-mode-hook 'ryo-modal-restart)
    (setq mc/always-run-for-all t)
    :hook
    (multiple-cursors-mode . (lambda () (interactive)
                               (if multiple-cursors-mode
                                   (progn
                                     (weiss-overriding-define-key
                                      '(
                                        ("n" mc/mark-more-like-this-extended)

                                        ("-" mc/insert-numbers)
                                        ("A" mc/insert-letters)
                                        ("1" mc/cycle-backward)
                                        ("2" mc/cycle-forward)

                                        ("e" weiss-mc-safty-delete)

                                        ("j" next-line)
                                        ("k" previous-line)
                                        ("l" right-char)
                                        ("i" left-char)
                                        ("s" set-mark-command)
                                        ("S" mc/sort-regions)
                                        ("R" mc/reverse-regions)

                                        (";" mc-hide-unmatched-lines-mode)
                                        ("<up>" mc/mark-previous-like-this)
                                        ("K" mc/skip-to-previous-like-this)
                                        ("M-k" mc/unmark-previous-like-this)
                                        ("<down>" mc/mark-next-like-this)
                                        ("J" mc/skip-to-next-like-this)
                                        ("M-j" mc/unmark-next-like-this)
                                        ;; ("<up>" mc/mark-previous-like-this)
                                        )
                                      )
                                     (weiss-overriding-ryo-mode t)
                                     )
                                 (weiss-overriding-ryo-mode -1)
                                 )
                               ))
    :config
    (defun weiss-mc-safty-delete ()
      "if now is at the beginning of line, do nothing"
      (interactive)
      (deactivate-mark)
      (while (string= (char-to-string (char-before)) " ") (delete-char -1))
      (unless (looking-back "^")
        (delete-char -1)
        )
      )

    (global-unset-key (kbd "S-<down-mouse-1>"))
    (global-set-key (kbd "S-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C-c n") 'mc/mark-more-like-this-extended)
    (define-key mc/keymap (kbd "<return>") nil)
    ;; (defconst right-char-maybe
    ;;   '(menu-item "" right-char
    ;;               :filter (lambda (cmd) (and ryo-modal-mode cmd)))
    ;;   )
    ;; (global-set-key (kbd "C-n") right-char-maybe)
    )
#+end_src

#+RESULTS:
: t
** rotate-text
#+begin_src elisp
(use-package rotate-text
  :quelpa (rotate-text
           :fetcher github
           :repo nschum/rotate-text.el
           )
  :diminish
  :config
  (setq rotate-text-words '(("true" "false")
                            ("nil" "t")
                            ("car" "cdr")
                            ("add" "remove")
                            ("width" "height")
                            ("left" "right")
                            ("top" "bottom")                            
                            ("Background" "Foreground")
                            ("background" "foreground")
                            ("next" "previous")
                            ("beginning" "end")
                            ("below" "above")
                            ("up" "down")
                            ("Up" "Down")
                            ("forward" "backward")
                            ("downward" "upward")
                            ("expand" "contract")
                            ("enable" "disable")
                            ("increase" "decrease")
                            ("shrink" "enlarge")
                            ("copy" "yank")
                            ("show" "hide")
                            ("start" "end")
                            ("min" "max")
                            ("on" "off")
                            ("ON" "OFF")
                            ("when" "unless")
                            ("even" "odd")
                            ("columns" "rows")
                            ("after" "before")
                            ;; Germany Language
                            ("der" "das" "die")
                            )))
#+end_src
** casease
#+begin_src elisp
  (use-package casease
    :quelpa (casease 
             :fetcher github 
             :repo DogLooksGood/casease)
    :config
    (advice-add 'weiss--ahf-indent :after #'casease--end)
    (advice-add 'weiss--ahf :after #'casease--end)
    (casease-setup
     :hook java-mode-hook
     :separator ?-
     :entries
     ((pascal "\\(=\\)[a-z]" "[A-Z]")
      (camel "[a-z]")))
    (casease-setup
     :hook c++-mode-hook
     :separator ?-
     :entries
     ((camel "[a-z]")))
    (casease-setup
     :hook go-mode-hook
     :separator ?-
     :entries
     ((pascal "\\(=\\)[a-z]" "[A-Z]")
      (camel "[a-z]")))
    (casease-setup
     :hook python-mode-hook
     :separator ?-
     :entries
     ((pascal "\\(=\\)[a-z]" "[A-Z]")
      (snake "[a-z]")))
    )
#+end_src

#+RESULTS:

** misc
#+begin_src elisp
  (use-package rg)

  (use-package shiftless 
    :diminish
    :load-path "/home/weiss/.emacs.d/local-package/shiftless.el"
    :ensure nil
    :config
    (shiftless-programming)
    (setq shiftless-delay 0.6)
    (setq shiftless-interval 0.08)
    ;; (advice-add 'sp--post-self-insert-hook-handler :around #'shiftless--prevent-advice)
    (shiftless-mode 1)
    )

  (use-package pcre2el
    :disabled
    :config
    )

  (use-package expand-region)
#+end_src

** end
#+begin_src elisp
(provide 'weiss-edit)
#+end_src

* completion
:PROPERTIES:
:header-args: :tangle completion/weiss-completion.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  ;;; yasnippet
  (use-package company
    :hook (company-mode . company-tng-mode)
    :bind
    (:map company-active-map
          ("<tab>" . 'company-complete-common-or-cycle)
          ("TAB" . 'company-complete-common-or-cycle)
          ("9" . 'weiss-company-select-next-or-toggle-main-frame)
          ("8" . (lambda () (interactive) (company-complete-common-or-cycle -1)))
          ("<escape>")
          ("RET")
          ("<return>")
          ("SPC"))
    (:map company-template-nav-map
          ("RET" . 'company-template-forward-field)
          ("<return>" . 'company-template-forward-field)
          ("TAB")
          ("<tab>"))
    :init
    (require 'company-template)
    :hook
    ((prog-mode . company-mode)
     (conf-mode . company-mode)
     (eshell-mode . company-mode)
     (org-mode . company-mode))
    :custom
    (company-tng-auto-configure nil)
    (company-frontends '(company-tng-frontend
                         company-pseudo-tooltip-frontend
                         company-echo-metadata-frontend))
    (company-begin-commands
     '(
       self-insert-command
       delete-backward-char
       org-self-insert-command
       org-delete-backward-char
       weiss-disable-abbrev-and-activate-insert-mode
       kill-line
       weiss-delete-forward-with-region
       weiss-delete-backward-with-region
       weiss-cut-line-or-delete-region
       delete-backward-char
       weiss-before-insert-mode
       ))
    (company-idle-delay 0.1)
    (company-tooltip-limit 10)
    (company-tooltip-align-annotations t)
    (company-tooltip-width-grow-only t)
    (company-tooltip-idle-delay 0.1)
    (company-minimum-prefix-length 3)
    (company-dabbrev-downcase nil)
    (company-abort-manual-when-too-short t)
    (company-require-match nil)
    (company-global-modes '(not dired-mode dired-sidebar-mode))
    (company-tooltip-margin 1)
    :config
    (setq-mode-local
     org-mode
     company-backends
     '(company-bbdb company-semantic company-cmake company-clang company-files
                    (company-dabbrev-code company-gtags company-etags company-keywords)
                    company-oddmuse company-dabbrev))
    (defun weiss-company-select-next-or-toggle-main-frame ()
      "DOCSTRING"
      (interactive)
      (if ryo-modal-mode
          (weiss-switch-to-otherside-top-frame)
        (company-complete-common-or-cycle 1)
        ))
    (defun weiss-company-select-previous-other-window ()
      "DOCSTRING"
      (interactive)
      (if ryo-modal-mode
          (weiss-switch-buffer-or-otherside-frame-without-top)
        (company-select-previous)
        ))
    (use-package company-box
      :hook (company-mode . company-box-mode)
      :config
      (setq company-box-enable-icon nil)
      )
    )

  (use-package yasnippet
    :disabled
    :bind
    (:map
     yas-keymap
     ("<escape>")
     ("RET" . 'yas-next-field-or-maybe-expand)
     ("<return>" . 'yas-next-field-or-maybe-expand)
     ("M-RET" . 'yas-expand-snippet)
     ("M-<return>" . 'yas-expand-snippet)
     ("S-<return>" . 'yas-prev-field)
     ("TAB")
     ("S-TAB")
     ("<tab>"))
    :config
    (let ((inhibit-message t)) (yas-reload-all))
    :init
    (add-hook 'prog-mode-hook #'yas-minor-mode))


  (provide 'weiss-completion)
#+end_src

* lang
:PROPERTIES:
:header-args: :tangle lang/weiss-lang.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** python
#+begin_src elisp
  (use-package python
    ;; :disabled
    :ensure nil
    ;; :load-path "/home/weiss/.emacs.d/local-package"
    :hook ((inferior-python-mode . (lambda ()
                                     (process-query-on-exit-flag
                                      (get-process "Python"))))
           ;; (python-mode . (lambda ()
           ;; (setq flycheck-checker 'python-pylint
           ;; python-mode-skeleton-abbrev-table nil
           ;; python-skeleton-autoinsert t
           ;; )
           )
    :ryo
    (:mode 'python-mode)
    ("8" weiss-execute-buffer-python)
    ("t e" weiss-ein-execute-all-cells-above-inclusively)
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    ;; (setq python-skeleton-autoinsert t)
    :config
    (defun weiss-ein-execute-all-cells-above-inclusively ()
      "execute all cells above inclusive current cell"
      (interactive)
      (call-interactively 'ein:worksheet-execute-all-cells-above)
      (call-interactively 'ein:worksheet-execute-cell)
      )
    (defun weiss-execute-buffer-python ()
      "execute cell if in jupyter otherwise execute buffer"
      (interactive)
      (if ein:notebook-mode
          (call-interactively 'ein:worksheet-execute-cell) 
        (weiss-execute-buffer))
      )
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))
    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))
    ;; Live Coding in Python
    ;; (use-package live-py-mode)

    ;; Format using YAPF
    ;; Install: pip install yapf
    (use-package yapfify
      :diminish yapf-mode
      :hook (python-mode . yapf-mode))
    )
#+end_src

** html
#+begin_src elisp
  (use-package http
    :config
    (use-package auto-rename-tag)
  
    (ryo-modal-keys
     (:mode 'sgml-mode)
     ("<escape> <escape>" (
                           ("b" ignore
                            :name "<b>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<b>" "</b>" quick-insert-new-line)))
                            )
                           ("i" ignore
                            :name "<i>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<i>" "</i>" quick-insert-new-line)))
                            )
                           ("u" ignore
                            :name "<u>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<u>" "</u>" quick-insert-new-line)))
                            )

                           ("p" ignore
                            :name "<p>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<p>" "</p>" quick-insert-new-line)))
                            )
                           ("l" ignore
                            :name "<li>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<li>" "</li>" quick-insert-new-line)))
                            )
                           ("m" ignore
                            :name "<span block>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<span class=\"block\">" "</span>" quick-insert-new-line)))
                            )
                           ("s" ignore
                            :name "<span>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<span >" "</span>" quick-insert-new-line)))
                            )

                           ("d" ignore
                            :name "<div>"
                            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<div >" "</div>" quick-insert-new-line)))
                            )
                           )
      )
     )
    )
#+end_src

** c++
#+begin_src elisp
  (use-package ccls
    :disabled
    :defines projectile-project-root-files-top-down-recurring
    :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls) (lsp)))
    :init
    ;; (setq ccls-executable "/home/weiss/c++/ccls")
    ;; use  "bsd"  "java"  "k&r"  "stroustrup"  "whitesmith"  "banner"  "gnu"  "linux"   "horstmann"
    (setq c-default-style "linux"
          indent-tabs-mode nil
          c-basic-offset 4)
    ;; align a continued string under the one it continues
    (c-set-offset 'statement-cont 'c-lineup-string-cont)
    ;; align or indent after an assignment operator 
    (c-set-offset 'statement-cont 'c-lineup-math)
    ;; align closing brace/paren with opening brace/paren
    (c-set-offset 'arglist-close 'c-lineup-close-paren)
    (c-set-offset 'brace-list-close 'c-lineup-close-paren)
    ;; align current argument line with opening argument line 
    (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist)
    ;; don't change indent of java 'throws' statement in method declaration
    ;;     and other items after the function argument list
    (c-set-offset 'func-decl-cont 'c-lineup-dont-change)  
    ;; not Indent Namespaces
    (c-set-offset  'namespace-open 0)
    (c-set-offset  'namespace-close 0)
    (c-set-offset  'innamespace 0)
    ;; Indent Classes
    (c-set-offset  'class-open 0)
    (c-set-offset  'class-close 0)
    (c-set-offset  'inclass 16)
    :config
    (with-eval-after-load 'projectile
      (setq projectile-project-root-files-top-down-recurring
            (append '("compile_commands.json" ".ccls")
                    projectile-project-root-files-top-down-recurring)))

    ;; compile_commands.json
    ;; cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
    ;; ln -s Debug/compile_commands.json       
    )
#+end_src

** misc
#+begin_src elisp
  (use-package llvm-mode)
  (use-package markdown-mode
    :ensure t
    :ryo
    (:mode 'markdown-mode)
    ("u" markdown-toggle-inline-images)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))

  ;; (use-package jflex-mode
  ;;   :load-path "/home/weiss/.emacs.d/local-package/"
  ;;   :after lsp-java 
  ;;   :mode (("\\.flex\\'" . jflex-mode))
  ;;   )

  (use-package cup-java-mode
    :load-path "/home/weiss/.emacs.d/local-package/"
    :mode (("\\.cup\\'" . cup-java-mode))
    )

  (use-package jastadd-ast-mode
    :mode "\\.ast\\'")

  (use-package php-mode)
  (use-package quickrun
    :config
    (setq quickrun-timeout-seconds 100)
    ;; (quickrun-add-command
    ;;   "go/go"
    ;;   '((:exec . ((lambda ()
    ;;                 (cond
    ;;                  ((string-match-p "_test\\.go\\'" (or (buffer-file-name)
    ;;                                                       (buffer-name)))
    ;;                   "%c test %o")
    ;;                  ((string-match-p "main\\.go\\'" (or (buffer-file-name)
    ;;                                                      (buffer-name)))
    ;;                   "%c run %o %s %a")
    ;;                  (t
    ;;                   ;; if the current filename is not main.go, then find the main.go in this project and run it.
    ;;                   (format "go run %smain.go" (projectile-acquire-root))
    ;;                   )
    ;;                  )
    ;;                 ))))
    ;;   :override t)
    )
#+end_src

** go
#+begin_src elisp
  (use-package go-mode
    :functions (go-packages-gopkgs go-update-tools)
    :bind (:map go-mode-map
                ("C-c R" . go-remove-unused-imports)
                ("<f1>" . godoc-at-point))
    :config
    (ryo-modal-keys
     (:mode 'go-mode)
     ("8" weiss-execute-buffer)
     )
    (setq-mode-local go-mode completion-ignore-case t)

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-envs '("GOPATH" "GO111MODULE" "GOPROXY")))

    ;; Install or update tools
    (defvar go--tools '("golang.org/x/tools/cmd/goimports"
                        "github.com/go-delve/delve/cmd/dlv"
                        "github.com/josharian/impl"
                        "github.com/cweill/gotests/..."
                        "github.com/fatih/gomodifytags"
                        "github.com/davidrjenni/reftools/cmd/fillstruct")
      "All necessary go tools.")

    ;; Do not use the -u flag for gopls, as it will update the dependencies to incompatible versions
    ;; https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation
    (defvar go--tools-no-update '("golang.org/x/tools/gopls@latest")
      "All necessary go tools without update the dependencies.")

    (defun go-update-tools ()
      "Install or update go tools."
      (interactive)
      (unless (executable-find "go")
        (user-error "Unable to find `go' in `exec-path'!"))

      (message "Installing go tools...")
      (let ((proc-name "go-tools")
            (proc-buffer "*Go Tools*"))
        (dolist (pkg go--tools-no-update)
          (message ": %s" pkg)
          (set-process-sentinel
           (start-process proc-name proc-buffer "go" "get" "-v" pkg)
           (lambda (proc _)
             (let ((status (process-exit-status proc)))
               (if (= 0 status)
                   (message "Installed %s" pkg)
                 (message "Failed to install %s: %d" pkg status))))))

        (dolist (pkg go--tools)
          (set-process-sentinel
           (start-process proc-name proc-buffer "go" "get" "-u" "-v" pkg)
           (lambda (proc _)
             (let ((status (process-exit-status proc)))
               (if (= 0 status)
                   (message "Installed %s" pkg)
                 (message "Failed to install %s: %d" pkg status))))))))

    ;; Try to install go tools if `gopls' is not found
    (unless (executable-find "gopls")
      (go-update-tools))

    ;; Misc
    (use-package go-dlv)
    (use-package go-fill-struct)
    (use-package go-impl)

    ;; Install: See https://github.com/golangci/golangci-lint#install
    (use-package flycheck-golangci-lint
      :if (executable-find "golangci-lint")
      :after flycheck
      :defines flycheck-disabled-checkers
      :hook (go-mode . (lambda ()
                         "Enable golangci-lint."
                         (setq flycheck-disabled-checkers '(go-gofmt
                                                            go-golint
                                                            go-vet
                                                            go-build
                                                            go-test
                                                            go-errcheck))
                         (flycheck-golangci-lint-setup))))

    (use-package go-tag
      :bind (:map go-mode-map
                  ("C-c t t" . go-tag-add)
                  ("C-c t T" . go-tag-remove))
      :init (setq go-tag-args (list "-transform" "camelcase")))

    (use-package go-gen-test
      :bind (:map go-mode-map
                  ("C-c t g" . go-gen-test-dwim)))

    (use-package gotest
      :bind (:map go-mode-map
                  ("C-c t a" . go-test-current-project)
                  ("C-c t m" . go-test-current-file)
                  ("C-c t ." . go-test-current-test)
                  ("C-c t x" . go-run))))
#+end_src

** dockerfile
#+begin_src elisp
  (use-package dockerfile-mode
    :config
    (setq-mode-local dockerfile-mode completion-ignore-case t)
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    )
#+end_src
** out of use
#+begin_src elisp :tangle no
  ;;;; Java
  ;;;; Golang

  ;; (use-package go-mode
  ;;   :disabled
  ;;   :functions (go-packages-gopkgs go-update-tools)
  ;;   :config
  ;;   ;; Env vars
  ;;   (with-eval-after-load 'exec-path-from-shell
  ;;     (exec-path-from-shell-copy-envs '("GOPATH" "GO111MODULE" "GOPROXY")))

  ;;   ;; Install or update tools
  ;;   (defvar go--tools '("golang.org/x/tools/cmd/goimports"
  ;;                       "github.com/go-delve/delve/cmd/dlv"
  ;;                       "github.com/josharian/impl"
  ;;                       "github.com/cweill/gotests/..."
  ;;                       "github.com/fatih/gomodifytags"
  ;;                       "github.com/davidrjenni/reftools/cmd/fillstruct")
  ;;     "All necessary go tools.")

  ;;   ;; Do not use the -u flag for gopls, as it will update the dependencies to incompatible versions
  ;;   ;; https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation
  ;;   (defvar go--tools-no-update '("golang.org/x/tools/gopls@latest")
  ;;     "All necessary go tools without update the dependencies.")

  ;;   (defun go-update-tools ()
  ;;     "Install or update go tools."
  ;;     (interactive)
  ;;     (unless (executable-find "go")
  ;;       (user-error "Unable to find `go' in `exec-path'!"))

  ;;     (message "Installing go tools...")
  ;;     (let ((proc-name "go-tools")
  ;;           (proc-buffer "*Go Tools*"))
  ;;       (dolist (pkg go--tools-no-update)
  ;;         (set-process-sentinel
  ;;          (start-process proc-name proc-buffer "go" "get" "-v" pkg)
  ;;          (lambda (proc _)
  ;;            (let ((status (process-exit-status proc)))
  ;;              (if (= 0 status)
  ;;                  (message "Installed %s" pkg)
  ;;                (message "Failed to install %s: %d" pkg status))))))

  ;;       (dolist (pkg go--tools)
  ;;         (set-process-sentinel
  ;;          (start-process proc-name proc-buffer "go" "get" "-u" "-v" pkg)
  ;;          (lambda (proc _)
  ;;            (let ((status (process-exit-status proc)))
  ;;              (if (= 0 status)
  ;;                  (message "Installed %s" pkg)
  ;;                (message "Failed to install %s: %d" pkg status))))))))

  ;;   ;; Try to install go tools if `gopls' is not found
  ;;   (unless (executable-find "gopls")
  ;;     (go-update-tools))

  ;;   ;; Misc
  ;;   (use-package go-dlv)
  ;;   (use-package go-fill-struct)
  ;;   (use-package go-impl)
  ;;   )


  (use-package emacs-google-java-format
    :disabled
    :quelpa (emacs-google-java-format
             :fetcher github
             :repo sideshowcoder/emacs-google-java-format)
    :hook (java-mode . emacs-google-java-format-indention-settings))
  (use-package meghanada
    :disabled
    :init
    (font-lock-add-keywords
     'java-mode
     '(
       ("[a-z]<[a-zA-Z]+>"  . 'font-lock-type-face)
       ))
    :hook (java-mode . (lambda ()
                         (unless (eq major-mode 'org-mode)
                           (google-set-c-style)
                           (google-make-newline-indent)
                           (setq indent-tabs-mode nil)
                           (setq tab-width 4)
                           (setq c-basic-offset 4)
                           (meghanada-mode t)
                           (flycheck-mode +1)
                           (rainbow-delimiters-mode nil)
                           ;; (highlight-symbol-mode t)
                           (weiss-java-face)
                           ;; (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)
                           )))
    :config
    (defun weiss-java-face ()
      (interactive)
      (face-remap-add-relative
       'font-lock-function-name-face '((:foreground "#383a42" :box '(:line-width 1))) font-lock-function-name-face)
      (face-remap-add-relative
       'font-lock-variable-name-face '((:foreground "#383a42" :underline t)) font-lock-variable-name-face)
      (face-remap-add-relative
       'c-annotation-face '((:foreground "#A9AAAE")))
      (face-remap-add-relative
       'font-lock-type-face '((:foreground "#737C79" :background "#F7EBFC")))
      )
    (use-package google-c-style
      :defer t
      :ensure t
      :commands
      (google-set-c-style))
    (use-package realgud
      :disabled
      :ensure t)
    (use-package autodisass-java-bytecode)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")





    :commands
    (meghanada-mode))


  ;;;; ESS/R
  ;; (use-package ess)
  ;; (use-package company-ess
  ;; :hook (ess-mode . (lambda ()
  ;; (set (make-local-variable 'company-backends) '(company-ess))
  ;; (company-mode)))
  ;; :config
                                          ; Enabling the backend :
                                          ; Globally - company ess-backend checks ess mode 
  ;; (add-to-list 'company-backends 'company-ess-backend)

                                          ; OR locally to ess mode
                                          ;(add-hook 'ess-mode-hook  
  ;; )

#+end_src

** end
#+begin_src elisp
  (provide 'weiss-lang)
#+end_src

* jupyter
:PROPERTIES:
:header-args: :tangle jupyter/weiss-jupyter.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package jupyter
    :disabled
    :init
    (use-package zmq))


  (use-package ein
    :config
    (setq ein:output-area-inlined-images t)
    (with-eval-after-load 'ein-notebook
      (define-key ein:notebook-mode-map [remap save-buffer] 'ein:notebook-save-notebook-command)      
      (define-key ein:notebook-mode-map [remap weiss-execute-buffer] 'ein:worksheet-execute-all-cells-above)      
      )
      (defun xor-preview-md-cell-latex ()
      "Preview LaTeX from the current markdown cell in a separate buffer."
      ;; https://github.com/millejoh/emacs-ipython-notebook/issues/88
      (interactive)
      (let* ((cell (ein:worksheet-get-current-cell))
             (buffer (if (ein:markdowncell-p cell)
                         (get-buffer-create " *ein: LaTeX in Markdown preview*")
                       (error "Not on a markdown cell"))))
        (with-current-buffer buffer
          (when buffer-read-only
            (toggle-read-only))
          (unless (= (point-min) (point-max))
            (delete-region (point-min) (point-max)))
          (insert (slot-value cell :input))
          (goto-char (point-min))
          (org-mode)
          (org-toggle-latex-fragment 16)
          (special-mode)
          (unless buffer-read-only
            (toggle-read-only))
          (display-buffer
           buffer
           '((display-buffer-below-selected display-buffer-at-bottom)
             (inhibit-same-window . t)))
          (fit-window-to-buffer (window-in-direction 'below)))))

    ;; (ryo-modal-keys
    ;; ("u" xor-preview-md-cell-latex :mode 'ein:markdown-mode))
    :ryo
    (:mode 'ein:markdown-mode)
    ("u" xor-preview-md-cell-latex)
    )

  (provide 'weiss-jupyter)

  ;;; weiss_jupyter.el ends here

#+end_src

* shell or terminal
:PROPERTIES:
:header-args: :tangle shell-or-terminal/weiss-shell-or-terminal.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package aweshell
    ;; :disabled                             
    :quelpa (aweshell
             :fetcher github
             :repo "manateelazycat/aweshell"))

  (use-package vterm
    :disabled
    :config
    (setq vterm-shell "zsh")
    (add-hook 'vterm-set-title-functions 'vterm--rename-buffer-as-title))

  ;; (defun vterm--rename-buffer-as-title (title)
  ;; (rename-buffer (format "vterm @ %s" title) t))

  (defun weiss--goto-failed-test (forward)
    "DOCSTRING"
    (let ((search-string "^.* > .+\\[.+\\] FAILED$")
          (pulse-iterations 1)
          (pulse-delay 0.3)
          )
      (if forward
          (re-search-forward search-string nil t)
        (re-search-backward search-string nil t)        
        )
      (pulse-momentary-highlight-one-line (point) 'region)
      )
    (recenter nil t)
    )

  (defun weiss-goto-backward-failed-test ()
    "DOCSTRING"
    (interactive)
    (weiss--goto-failed-test nil)
    )

  (defun weiss-goto-forward-failed-test ()
    "DOCSTRING"
    (interactive)
    (weiss--goto-failed-test t)
    )

  (defun weiss-send-last-command ()
    "DOCSTRING"
    (interactive)
    (aweshell-clear-buffer)
    (eshell-previous-matching-input-from-input 1)
    (eshell-send-input)
    )

  (ryo-modal-keys
   (:mode 'eshell-mode)
   ("8" weiss-send-last-command)
   ("u" weiss-goto-backward-failed-test)
   ("t" weiss-goto-forward-failed-test)
   )

  (provide 'weiss-shell-or-terminal)

#+end_src

** after dump
#+begin_src elisp 
(use-package emacs-yakuake
  :load-path "/home/weiss/.emacs.d/local-package/dropdown-remote/"
  :ensure nil
  :config
  (defun weiss-dired-rsync ()
    "DOCSTRING"
    (interactive)
    (let ((marked-files (dired-get-marked-files))
          (target-path (or (car (dired-dwim-target-next)) "/home/weiss/Downloads/")))
      (cond
       ((string-prefix-p "/ssh:" (car marked-files))
        (dolist (x marked-files)
          (let ((file-paths (split-string x ":")))            
            (yakuake-run-command-in-session
             (yakuake-add-session)
             (format "rsync -PaAXv -e ssh \"%s:%s\" %s"
                     (nth 1 file-paths)
                     (nth 2 file-paths)
                     target-path)))          
          )
        )
       ((string-prefix-p "/docker:" (car marked-files))
        (dolist (x marked-files)
          (let ((file-paths (split-string x ":")))            
            (yakuake-run-command-in-session
             (yakuake-add-session)
             (format "docker cp \"%s:%s\" %s"
                     (nth 1 file-paths)
                     (nth 2 file-paths)
                     target-path)))          
          )
        )

       ((string-prefix-p "/docker:" target-path)
        (let* ((parse-path (split-string target-path ":"))
               (docker-path (format "%s:%s" (nth 1 parse-path) (nth 2 parse-path))))          
          (dolist (x marked-files)
            (yakuake-run-command-in-session (yakuake-add-session) (format "docker cp %s %s" (format "\"%s\"" x) docker-path))          
            ))        
        )
       (t (yakuake-run-command-in-session (yakuake-add-session) (format "rsync -aAXv %s %s" (format "\"%s\"" (mapconcat 'identity marked-files "\" \"")) target-path)))
       )      
      )
    (yakuake-toggle-window)        
    )

  (defun weiss-dired-git-clone ()
    "DOCSTRING"
    (interactive)
    (let* ((session (yakuake-add-session))
           (git-path (current-kill 0 t))
           (command (format "cd \"%s\" & git clone %s" (file-truename default-directory) git-path)))
      (if (string-prefix-p  "git@" git-path)
          (yakuake-run-command-in-session session command)
        (message "check your clipboard!" ))      
      ))
  )
#+end_src

* sql
:PROPERTIES:
:header-args: :tangle sql/weiss-sql.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package sql
    :hook (sql-mode . (lambda () 
                        (linum-mode -1)
                        ;; (make-local-variable 'display-line-numbers)
                        ;; (setq display-line-numbers 'relative)
                        ))
    :bind
    (
     :map sql-mode-map
     ("<backtab>" . weiss-indent-paragraph)
     )
    :ryo
    (:mode 'sql-mode)
    ("<backtab>"  weiss-indent-paragraph)
    ("t" weiss-sql-send-paragraph-or-region)
    ("u" weiss-insert-semicolon)
    :config
    (setq sql-postgres-login-params
          '((user :default "weiss")
            (database :default "quizzes")
            (server :default "localhost")
            ))

    ;; (defalias 'sql-get-login 'ignore)
    (defun sql-send-string-no-popup (str)
      "Send the string STR to the SQL process."
      (interactive "sSQL Text: ")

      (let ((comint-input-sender-no-newline nil)
            (s (replace-regexp-in-string "[[:space:]\n\r]+\\'" "" str)))
        (if (sql-buffer-live-p sql-buffer)
            (progn
              ;; Ignore the hoping around...
              (save-excursion
                ;; Set product context
                (with-current-buffer sql-buffer
                  (when sql-debug-send
                    (message ">>SQL> %S" s))

                  ;; Send the string (trim the trailing whitespace)
                  (sql-input-sender (get-buffer-process (current-buffer)) s)

                  ;; Send a command terminator if we must
                  (sql-send-magic-terminator sql-buffer s sql-send-terminator)

                  (when sql-pop-to-buffer-after-send-region
                    (message "Sent string to buffer %s" sql-buffer))))

              ;; Display the sql buffer
              ;; (sql-display-buffer sql-buffer)
              )

          ;; We don't have no stinkin' sql
          (user-error "No SQL process started"))))


    (defun weiss-sql-send-paragraph-or-region ()
      "if current-prefix-arg then send region else send paragraph, add ; to the end to show the Result in new line"
      (interactive)
      (let ((start)
            (end))      
        (if (or weiss-select-mode (and current-prefix-arg (use-region-p)))           
            (setq start (region-beginning)
                  end (region-end))            
          (setq start (save-excursion
                        (backward-paragraph)
                        (point))
                end (save-excursion
                      (forward-paragraph)
                      (point)))        
          )
        (sql-send-string-no-popup (buffer-substring-no-properties start end)))
      )

    (use-package sql-indent
      ;; :disabled
      :quelpa (emacs-sql-indent
               :fetcher github
               :repo "alex-hhh/emacs-sql-indent")
      :config
      (defvar my-sql-indentation-offsets-alist
        `(
          (in-block +)
          (in-begin-block 0)
          (block-start 0)
          (block-end 0)
          ;; put new syntactic symbols here, and add the default ones at the end.
          ;; If there is no value specified for a syntactic symbol, the default
          ;; will be picked up.
          ,@sqlind-default-indentation-offsets-alist))

      (setq my-sql-indentation-offsets-alist
            `(
              (in-block ++)
              (in-begin-block +)
              (block-start ++)
              (block-end 0)

              ;; (in-select-clause sqlind-lineup-to-clause-end
              ;;                   sqlind-adjust-operator
              ;;                   sqlind-left-justify-logical-operator
              ;;                   sqlind-lone-semicolon)
              ;; put new syntactic symbols here, and add the default ones at the end.
              ;; If there is no value specified for a syntactic symbol, the default
              ;; will be picked up.
              ,@sqlind-default-indentation-offsets-alist))

      ;; Arrange for the new indentation offset to be set up for each SQL buffer.
      (add-hook 'sqlind-minor-mode-hook
                (lambda ()
                  (setq sqlind-indentation-offsets-alist
                        my-sql-indentation-offsets-alist)))
      )

    (use-package sql-smie-mode
      :disabled
      :quelpa (sql-smie-mode
               :fetcher github
               :repo "deactivated/sql-smie-mode"))
    )

  (provide 'weiss-sql)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; weiss_sql.el ends here

#+end_src

* pdf
:PROPERTIES:
:header-args: :tangle pdf/weiss-pdf.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package org-noter
    :after org
    :bind (:map org-noter-notes-mode-map
                ("M-o" . org-metaleft)
                ("M-i" . org-shiftmetaleft)
                ("M-k" . org-metaup)
                ("M-j" . org-metadown)
                ("M-l" . org-shiftmetaright)
                ("M-o" . org-metaleft)
                ("M-p" . org-metaright))
    :config
    (set-face-attribute 'org-noter-notes-exist-face nil
                        :height 1.0
                        :foreground "medium violet red"
                        :weight 'bold)

    (setq
     org-noter-insert-note-no-questions 't
     org-noter-auto-save-last-location 't
     ;; org-noter-notes-window-behavior '(start)
     org-noter-notes-window-location 'other-frame
     org-noter-always-create-frame nil
     )

    (defun org-noter-select-noter-frame ()
      "DOCSTRING"
      (interactive)
      (select-frame-set-input-focus (window-frame (org-noter--get-notes-window 'force))))

    (defun weiss-direct-annot-and-insert-note()
      (interactive)
      (let ((pdfBuffer (buffer-name))
            (markedText (org-noter--get-precise-info))
            (list (pdf-view-active-region))
            )
        (pdf-annot-add-markup-annotation list 'highlight)
        (org-noter-insert-precise-note)
        (org-up-element)
        (org-set-tags ":Frage:")
        )
      ;; (xah-fly-command-mode-activate)
      )

    (defun weiss-direct-insert-note()
      "direct annot and insert note with selected text"
      (interactive)
      (let ((pdfBuffer (buffer-name))
            (markedText (org-noter--get-precise-info))
            )
        (org-noter-insert-precise-note)
        )
      ;; (xah-fly-command-mode-activate)
      )
    )

  (use-package pdf-tools
    ;; need to M-x pdf-tools-install
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :after org-noter
    :ryo
    (:mode 'pdf-view-mode)
    ("," ignore
     :then '((lambda()(interactive)(image-previous-line 2)))
     :name "scroll down"
     )
    ("." ignore
     :then '((lambda()(interactive)(image-next-line 2)))
     :name "scroll up"
     )
    ("="  pdf-view-scale-reset)
    ("["  pdf-view-shrink )
    ("]"  pdf-view-enlarge)
    ("1"  weiss-pdf-view-previous-page-quickly)
    ("2"  weiss-pdf-view-next-page-quickly)
    ;; ("a"  weiss-direct-annot-and-insert-note)
    ("c"  pdf-view-kill-ring-save)
    ;; ("d"  weiss-direct-insert-note)
    ("h"  pdf-view-fit-height-to-window)
    ("i"  image-backward-hscroll)
    ("j"  pdf-view-next-page-command :then '((lambda() (image-set-window-vscroll 0))))
    ("k"  pdf-view-previous-page-command :then '((lambda() (image-set-window-vscroll 0))))
    ("l"  image-forward-hscroll)
    ("n"  isearch-forward)
    ("p"  pdf-view-fit-page-to-window)
    ("w"  pdf-view-fit-width-to-window)    
    :config
    (setq-default pdf-view-display-size 'fit-page
                  pdf-view-use-scaling t
                  pdf-view-use-imagemagick nil)

    ;; The mode-line does serve any useful purpose is annotation windows
    (add-hook 'pdf-annot-list-mode-hook #'hide-mode-line-mode)

    ;; Sets up `pdf-tools-enable-minor-modes', `pdf-occur-global-minor-mode' and
    ;; `pdf-virtual-global-minor-mode'.
    (pdf-tools-install-noverify)

    (defun weiss-pdf-view-previous-page-quickly ()
      (interactive)
      (pdf-view-previous-page-command 5))

    (defun weiss-pdf-view-next-page-quickly ()
      (interactive)
      (pdf-view-next-page-command 5))

    (use-package pdf-view-restore
      :after pdf-tools
      :init
      (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")
      :config
      (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
    )

  (defun weiss-pdf-mode-setup()
    (interactive)
    (linum-mode -1)
    (setq-local cursor-type nil)
    (pdf-annot-minor-mode)
    (setq
     display-line-numbers 'nil)
    )

  (add-hook 'pdf-view-mode-hook 'weiss-pdf-mode-setup)


  (provide 'weiss-pdf)

#+end_src

* flycheck
:PROPERTIES:
:header-args: :tangle flycheck/weiss-flycheck.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package flycheck
    :diminish
    ;; :hook (after-init . global-flycheck-mode)
    :hook (
           (python-mode . flycheck-mode)
           (java-mode . flycheck-mode)
           )
    :init
    (setq 
     ;; Only check while saving and opening files
     flycheck-check-syntax-automatically '(mode-enabled save)
     ;; flycheck-temp-prefix ".flycheck"
     ;; flycheck-emacs-lisp-load-path 'inherit
     )
    :config
    ;; (when (fboundp 'define-fringe-bitmap)
    ;; (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    ;; [16 48 112 240 112 48 16] nil nil 'center))

    ;; Display Flycheck errors in GUI tooltips
    (if (display-graphic-p)
        (use-package flycheck-posframe
          :custom-face (flycheck-posframe-border-face ((t (:inherit default))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :init (setq flycheck-posframe-border-width 1
                      flycheck-posframe-inhibit-functions
                      '((lambda (&rest _) (bound-and-true-p company-backend)))))

      (use-package flycheck-popup-tip
        :hook (flycheck-mode . flycheck-popup-tip-mode)))
    )

  (provide 'weiss-flycheck)

#+end_src

* flyspell
:PROPERTIES:
:header-args: :tangle flycheck/weiss-flyspell.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

#+begin_src elisp
  (use-package wucuo
    :init
    (add-hook 'text-mode-hook #'wucuo-start)
    )
  (use-package flyspell
    ;; :disabled
    :ensure nil
    ;; :hook (((text-mode outline-mode org-mode) . flyspell-mode))
    :init
    (setq flyspell-issue-message-flag nil
          ispell-program-name "hunspell"
          ispell-extra-args '("--sug-mode=ultra" "--run-together"))
    (setq ispell-dictionary "de_DE,en_US")
    :config
    ;; ispell-set-spellchecker-params has to be called
    ;; before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "de_DE,en_US")
    (defun weiss-flyspell-save-word ()
      "From https://stackoverflow.com/questions/22107182/in-emacs-flyspell-mode-how-to-add-new-word-to-dictionary"
      (interactive)
      (let ((current-location (point))
            (word (flyspell-get-word)))
        (when (consp word)    
          (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
    )


  (provide 'weiss-flyspell)
#+end_src

* dired
** dired
:PROPERTIES:
:header-args: :tangle dired/weiss-dired.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package dired
    :ensure nil
#+end_src

*** hook
#+begin_src elisp
  :hook
  (dired-mode . (lambda () (interactive)
                  (dired-hide-details-mode 1)
                  (dired-collapse-mode)
                  (dired-utils-format-information-line-mode)
                  ;; (all-the-icons-dired-mode)
                  (dired-omit-mode)
                  (setq dired-auto-revert-buffer 't)
                  ))

#+end_src

*** config
#+begin_src elisp
  :config
#+end_src
**** functions
#+begin_src elisp
  (defun weiss-check-cursor-type ()
    "disable cursor in dired-mode"
    (interactive)
    (when (eq major-mode 'dired-mode)
      (setq cursor-type nil)
      )
    ;; (unless (eq major-mode 'snails-mode) 
    ;;   (if (eq major-mode 'dired-mode)
    ;;       (setq cursor-type nil)
    ;;     (setq cursor-type t)    
    ;;     )      
    ;;   )
    )

  (defun ora-ediff-files ()
    (interactive)
    (let ((files (dired-get-marked-files))
          (wnd (current-window-configuration)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "file: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (ediff-files file2 file1)
              (ediff-files file1 file2))
            (add-hook 'ediff-after-quit-hook-internal
                      (lambda ()
                        (setq ediff-after-quit-hook-internal nil)
                        (set-window-configuration wnd))))
        (error "no more than 2 files should be marked"))))

  (defun weiss-dired-copy-file-name ()
    "copy file name or copy path with prefix-arg"
    (interactive)
    (if current-prefix-arg
        (let ((current-prefix-arg 0))
          (dired-copy-filename-as-kill)
          )
      (let ((current-prefix-arg nil))
        (dired-copy-filename-as-kill)      
        )
      ))

  (defun weiss-exit-wdired-mode ()
    "exit wdired mode"
    (interactive)
    (wdired-finish-edit)
    (dired-revert)
    (ryo-modal-restart))

  (defun weiss-dired-delete-files-force ()
    "delete files without ask"
    (interactive)
    (dired-delete-file weiss-dired-marked-files)
    ;; (dired-delete-file "/home/weiss/Downloads/mp1.pdf")
    ;; (message "%s" "123")
    )
  ;; (dired-get-marked-files)

  (defun weiss-revert-all-dired-buffer ()
    "DOCSTRING"
    (interactive)
    (dolist (x (buffer-list) nil)
      (when (string-match "dired" (format "%s" (with-current-buffer x major-mode)))
        (with-current-buffer x
          (revert-buffer))
        ))
    )

  (defun weiss-show-icons-in-dired ()
    "Don't show icons in some Dir due to low performance"
    (interactive)
    (let ((dired-icons-blacklist '("ssh:" "porn" "/lib/" "/lib64/" "/etc/" "/usr/share/texmf-dist/tex/latex/" "/usr/"))
          r)
      (unless (dolist (x dired-icons-blacklist r)
                (when (string-match x dired-directory) (setq r t)))
        (all-the-icons-dired-mode))
      )
    )

  (with-eval-after-load 'emacs-yakuake
    (defun weiss-dired-rsync ()
      "DOCSTRING"
      (interactive)
      (let ((marked-files (dired-get-marked-files))
            (target-path (or (car (dired-dwim-target-next)) "/home/weiss/Downloads/")))
        (cond
         ((string-prefix-p "/ssh:" (car marked-files))
          (dolist (x marked-files)
            (let ((file-paths (split-string x ":")))            
              (yakuake-run-command-in-session
               (yakuake-add-session)
               (format "rsync -PaAXv -e ssh \"%s:%s\" %s"
                       (nth 1 file-paths)
                       (nth 2 file-paths)
                       target-path)))          
            )
          )
         ((string-prefix-p "/docker:" (car marked-files))
          (dolist (x marked-files)
            (let ((file-paths (split-string x ":")))            
              (yakuake-run-command-in-session
               (yakuake-add-session)
               (format "docker cp \"%s:%s\" %s"
                       (nth 1 file-paths)
                       (nth 2 file-paths)
                       target-path)))          
            )
          )

         ((string-prefix-p "/docker:" target-path)
          (let* ((parse-path (split-string target-path ":"))
                 (docker-path (format "%s:%s" (nth 1 parse-path) (nth 2 parse-path))))          
            (dolist (x marked-files)
              (yakuake-run-command-in-session (yakuake-add-session) (format "docker cp %s %s" (format "\"%s\"" x) docker-path))          
              ))        
          )
         (t (yakuake-run-command-in-session (yakuake-add-session) (format "rsync -aAXv %s %s" (format "\"%s\"" (mapconcat 'identity marked-files "\" \"")) target-path)))
         )      
        )
      (yakuake-toggle-window)        
      )

    (defun weiss-dired-git-clone ()
      "DOCSTRING"
      (interactive)
      (let* ((session (yakuake-add-session))
             (git-path (current-kill 0 t))
             (command (format "cd \"%s\" & git clone %s" (file-truename default-directory) git-path)))
        (if (string-prefix-p  "git@" git-path)
            (yakuake-run-command-in-session session command)
          (message "check your clipboard!" ))      
        )))
#+end_src
**** variable
#+begin_src elisp
  (setq
   dired-dwim-target t
   dired-recursive-deletes 'always
   dired-recursive-copies (quote always)
   dired-auto-revert-buffer t
   dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'|\\|.*aria2$\\|^.*frag-master.*$\\|^\\."
   dired-listing-switches "-altGh"
   )
#+end_src
**** ui
#+begin_src elisp
  (add-to-list 'weiss/after-major-mode-function-list 'weiss-check-cursor-type)

  ;; Colourful dired
  (use-package diredfl
    ;; :disabled
    :init (diredfl-global-mode 1))

  ;; Shows icons
  (use-package all-the-icons-dired
    ;; :disabled
    :diminish
    :hook (dired-mode . weiss-show-icons-in-dired) 
    :config
    (with-no-warnings
      (advice-add #'dired-do-create-files :around #'all-the-icons-dired--refresh-advice)
      (advice-add #'dired-create-directory :around #'all-the-icons-dired--refresh-advice)
      (advice-add #'wdired-abort-changes :around #'all-the-icons-dired--refresh-advice))

    (with-no-warnings
      (defun my-all-the-icons-dired--refresh ()
        "Display the icons of files in a dired buffer."
        (all-the-icons-dired--remove-all-overlays)
        ;; NOTE: don't display icons it too many items
        (if (<= (count-lines (point-min) (point-max)) 600)
            (save-excursion
              (goto-char (point-min))
              (while (not (eobp))
                (when (dired-move-to-filename nil)
                  (let ((file (file-local-name (dired-get-filename 'relative 'noerror))))
                    (when file
                      (let ((icon (if (file-directory-p file)
                                      (all-the-icons-icon-for-dir file
                                                                  :face 'all-the-icons-dired-dir-face
                                                                  :height 0.9
                                                                  :v-adjust all-the-icons-dired-v-adjust)
                                    (all-the-icons-icon-for-file file :height 0.9 :v-adjust all-the-icons-dired-v-adjust))))
                        (if (member file '("." ".."))
                            (all-the-icons-dired--add-overlay (point) "  \t")
                          (all-the-icons-dired--add-overlay (point) (concat icon "\t")))))))
                (forward-line 1)))
          (message "Not display icons because of too many items.")))
      (advice-add #'all-the-icons-dired--refresh :override #'my-all-the-icons-dired--refresh))
    ;; :hook (dired-mode . (lambda () (interactive) (message "path: %s" (string-match "x" dired-directory))))
    )

#+end_src
**** misc packages
#+begin_src elisp

  (use-package dired-hacks-utils)

  (use-package dired-avfs)

  (use-package dired-collapse)

  (use-package dired-quick-sort)

  (use-package peep-dired ;preview files
    ;; :diminish "2"
    ;; :disabled
    :init
    ;; (setq peep-dired-cleanup-eagerly t)
    ;; (setq peep-dired-enable-on-directories t)
    (setq
     peep-dired-cleanup-on-disable t
     peep-dired-ignored-extensions nil
     peep-dired-max-size (* 10 1024 1024)))

  (require 'weiss-dired-filter)
  (require 'weiss-dired-single-handed-mode)

#+end_src
**** keybinding 
#+begin_src elisp
  (ryo-modal-keys
   (:mode 'dired-mode)
   ("SPC" (
           ("l" (
                 ("r" dired-toggle-read-only
                  :first (revert-buffer)
                  :then (ryo-modal-restart)  
                  )
                 ("v" weiss-dired-single-handed-mode)
                 )))
    )
   ("e" ora-ediff-files)
   ("g" (
         ("d" ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/Downloads")))
          :name "Downloads"
          )
         ("v"  ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/Documents/Vorlesungen")))
          :name "Vorlesungen"
          )
         ("m"  ignore
          :then ((lambda()(interactive)(find-file "/run/media/weiss")))
          :name "usb"
          )
         ("p"  ignore
          :then ((lambda()(interactive)(find-file "/run/media/weiss/Seagate_Backup/porn/")))
          :name "Seagate_Backup"
          )
         ("c"  ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/.config")))
          :name "config"
          )
         ("h"  ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/")))
          :name "home"
          )
         ("t"  ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/.telega/cache/")))
          :name "telega"
          )
         ("s"  ignore
          :then ((lambda()(interactive)(find-file "/ssh:root@95.179.243.76:/usr/config/.aria2c/downloads/")))
          :name "vultr"
          )
         ("k"  ignore
          :then ((lambda()(interactive)(find-file "/docker:14a4442774f8:/home/ubuntu/catkin_ws/src/")))
          :name "catkin_ws"
          )
         ("e"  ignore
          :then ((lambda()(interactive)(find-file "/home/weiss/.emacs.d")))       
          :name ".emacs.d"        
          )))
   ("RET" dired-find-file)
   (","  beginning-of-buffer)
   ("."  end-of-buffer)
   (";"  dired-maybe-insert-subdir)
   ("5"  revert-buffer)
   ("8"  dired-hide-details-mode)
   ("a"  dired-sort-toggle-or-edit)
   ("A"  hydra-dired-filter-actress/body)
   ("c"  dired-do-copy)
   ("C"  weiss-dired-rsync)
   ("d"  dired-do-delete)
   ("f"  dired-toggle-read-only :exit t :first '(revert-buffer))
   ("j"  dired-next-line)
   ("h"  dired-omit-mode)
   ("k"  dired-previous-line)
   ("i"  ignore
    :then '((lambda()(interactive)(find-alternate-file "..")))
    :name "up directory")
   ("l"  dired-find-alternate-file)
   ("L"  dired-do-symlink)
   ("m"  dired-mark)
   ("o"  xah-open-in-external-app)
   ;; ("O"  eaf-open-this-from-dired)
   ("p"  peep-dired)
   ("q"  quit-window)
   ("r"  dired-do-rename)
   ("S"  hydra-dired-quick-sort/body)
   ("t"  dired-toggle-marks)
   ("u"  dired-unmark)
   ("U"  dired-unmark-all-marks :then '(revert-buffer))
   ("v"  weiss-dired-git-clone)
   ("w"  weiss-dired-copy-file-name)
   ("x"  dired-do-flagged-delete)
   ("z"  dired-do-compress)
   ("Z"  dired-do-compress-to)
   )
  (with-eval-after-load 'wdired
    (define-key wdired-mode-map (kbd "C-q") 'weiss-exit-wdired-mode))
#+end_src

*** end
#+begin_src elisp
  )
  (provide 'weiss-dired)
#+end_src
** weiss-dired-single-handed-mode
:PROPERTIES:
:header-args: :tangle dired/weiss-dired-single-handed-mode.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (define-minor-mode weiss-dired-single-handed-mode
    "weiss-dired-single-handed-mode"
    :lighter " single-hand"
    :group 'weiss-dired-single-handed-mode
    (if weiss-dired-single-handed-mode
        (progn
          (weiss-overriding-define-key
           '(
             ("x" hydra-dired-quick-sort/body)
             ("d" next-line)
             ("e" previous-line)
             ("f" xah-open-in-external-app)
             ("g" (lambda()(interactive)(dired-find-alternate-file)(weiss-dired-single-handed-mode)))
             ("q" weiss-dired-single-handed-mode)
             ("s" (lambda()(interactive)(find-alternate-file "..")(weiss-dired-single-handed-mode)))
             ("v" hydra-dired-filter-actress/body)
             ("c" hydra-dired-filter-tag/body)
             )
           )
          ;; (make-local-variable cursor-type)
          ;; (setq cursor-type nil)
          ;; (hl-line-mode nil)
          ;; (set (make-local-variable 'hl-line-face) 'emphasis-hl-line)
          ;; (hl-line-mode t)
          (set-face-background 'hl-line "#ffb5ff")
          (set-face-background 'normal-hl-line "#ffb5ff")
          (weiss-overriding-ryo-mode 1)
          )
      ;; (setq cursor-type t)
      ;; (hl-line-mode -1)
      (set-face-background 'hl-line "#ffe8e8")
      (set-face-background 'normal-hl-line "#ffe8e8")
      (weiss-overriding-ryo-mode -1)    
      )
    )

  (provide 'weiss-dired-single-handed-mode)
#+end_src
** out of use
#+begin_src elisp :tangle no
(use-package tmtxt-async-tasks
  :disabled
  :load-path "/home/weiss/.emacs.d/local-package/tmtxt-async-tasks/"
  :ensure nil
  :config
  (setq-default tat/window-close-delay "0")
  (setq-default tat/window-height 8)
  (defun tat/close-window-handler (process event)
    "Close the window"
    (when (equal (process-status process) 'exit)
      ;; get the current async buffer and window
      (tat/close-window process)
      (when weiss-dired-marked-files
        (dolist (x weiss-dired-marked-files) (dired-delete-file x))        
        (setq weiss-dired-marked-files nil)
        )
      (weiss-revert-all-dired-buffer)
      ))
  (use-package tmtxt-dired-async
    :load-path "/home/weiss/.emacs.d/local-package/tmtxt-dired-async/"
    :ensure nil
    :config
    (setq-default tda/unzip-command "/usr/bin/unzip")
    (setq-default tda/unzip-argument "")
    (defun weiss-async-move-file ()
      "DOCSTRING"
      (interactive)
      (setq weiss-dired-marked-files (dired-get-marked-files))
      (call-interactively 'tda/rsync)
      )
    (defun weiss-async-move-file-sudo ()
      "DOCSTRING"
      (interactive)
      (setq weiss-dired-marked-files (dired-get-marked-files))
      (call-interactively 'tda/rsync-sudo)
      )
    )  
  )
#+end_src
* cal
:PROPERTIES:
:header-args: :tangle cal/weiss-cal.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  ;; use maxima-git to avoid latex-error
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
  (autoload 'maxima-mode "maxima" "Maxima mode" t)
  (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
  (autoload 'maxima "maxima" "Maxima interaction" t)
  (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
  (setq imaxima-use-maxima-mode-flag t)
  (add-to-list 'auto-mode-alist '("\\.ma[cx]\\'" . maxima-mode))

  (advice-add 'inferior-maxima-check-and-send-line :before 'weiss-add-semicolon)
  (defun weiss-add-semicolon ()
    "insert semicolon at the end of line then send line"
    (interactive)
    (beginning-of-line)
    (unless (string-match-p ";" (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
      (end-of-line)
      (insert ";")
      )
    )

  (provide 'weiss-cal)

#+end_src

* rime
:PROPERTIES:
:header-args: :tangle rime/weiss-rime.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package rime
    :load-path "/home/weiss/.emacs.d/emacs-rime/"
    :ensure nil
    :custom
    (default-input-method "rime")
    :config
    (define-key global-map (kbd "<home>") 'toggle-input-method)

    (defun +rime-predicate-current-uppercase-letter-p ()
      "If the current charactor entered is a uppercase letter.
  Can be used in `rime-disable-predicates' and `rime-inline-predicates'."
      (and rime--current-input-key
           (>= rime--current-input-key ?A)
           (<= rime--current-input-key ?Z)))

    (defun +rime-predicate-current-input-punctuation-p ()
      "If the current charactor entered is a punctuation.
  Can be used in `rime-disable-predicates' and `rime-inline-predicates'."
      (and rime--current-input-key
           (or (and (<= #x21 rime--current-input-key) (<= rime--current-input-key #x2f))
               (and (<= #x3a rime--current-input-key) (<= rime--current-input-key #x40))
               (and (<= #x5b rime--current-input-key) (<= rime--current-input-key #x60))
               (and (<= #x7b rime--current-input-key) (<= rime--current-input-key #x7f)))))

    (defun +rime-predicate-punctuation-after-space-cc-p ()
      "If input a punctuation after a Chinese charactor with whitespace.
  Can be used in `rime-disable-predicates' and `rime-inline-predicates'.\""
      (and (> (point) (save-excursion (back-to-indentation) (point)))
           (+rime-predicate-current-input-punctuation-p)
           (looking-back "\\cc +" 2)))

    (defun +rime-predicate-after-special-punctuation-p ()
      "If the cursor is after a string prefixed a special punctuation.
  Can be used in `rime-disable-predicates' and `rime-inline-predicates'."
      (and (> (point) (save-excursion (back-to-indentation) (point)))
           (looking-back "[@:/][a-zA-Z0-9-_]*" 1)))

    (defun weiss-rime-predicate-after-word-and-char-p ()
      "If the cursor is after [an ascii-word + space + an ascii-char]"
      (and (> (point) (save-excursion (back-to-indentation) (point)))
           (looking-back "[a-zA-Z] " 1)))

    (defun weiss-ryo-modal-mode-p ()
      "DOCSTRING"
      (interactive)
      ryo-modal-mode
      )

    (setq
     rime-show-candidate 'minibuffer
     rime-translate-keybindings  '("C-f" "C-b" "C-n" "C-p" "C-g")
     rime-inline-ascii-trigger 'control-r
     )

    (setq rime-disable-predicates
          '(
            weiss-ryo-modal-mode-p
            rime-predicate-after-alphabet-char-p
            rime-predicate-auto-english-p
            rime-predicate-punctuation-line-begin-p
            +rime-predicate-punctuation-after-space-cc-p
            +rime-predicate-after-special-punctuation-p
            ))

    (setq enter-rime-inline-predicates
          '(
            ;; rime-predicate-auto-english-p
            ;; rime--after-alphabet-char-p
            weiss-rime-predicate-after-word-and-char-p
            )
          )

    (defun enter-rime--should-inline-ascii-p ()
      "If we should toggle to inline ascii mode."
      (seq-find 'funcall enter-rime-inline-predicates))



    (defun weiss-rime-return ()
      "DOCSTRING"
      (interactive)
      (if (and (enter-rime--should-inline-ascii-p)
               (not (rime--ascii-mode-p))
               )
          (rime-inline-ascii)
        (rime--return)
        )
      )

    (define-key rime-active-mode-map (kbd "<return>") 'weiss-rime-return)

    (define-key rime-mode-map (kbd "C-n") 'rime-force-enable)

    ;; (add-hook 'telega-chat-mode-hook '(lambda () (set-input-method "rime")))
    ;; (remove-hook 'snails-mode-hook '(lambda () (set-input-method "")))
    ;; (add-hook 'eaf-edit-mode-hook '(lambda () (set-input-method "rime")))
    ;; (add-hook 'org-mode-hook '(lambda () (set-input-method "rime")))
    ;; (add-hook 'switch-buffer-functions 'weiss-activate-rime)
    )

  ;; (weiss-activate-rime)

  ;; (define-key global-map (kbd "<f4>") 'rime-send-keybinding)

  (provide 'weiss-rime)

#+end_src

* telega
:PROPERTIES:
:header-args: :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package telega
    :hook
    ('telega-chat-mode . (lambda ()
                           (set (make-local-variable 'company-backends)
                                (append '(telega-company-emoji
                                          telega-company-username
                                          telega-company-hashtag)
                                        (when (telega-chat-bot-p telega-chatbuf--chat)
                                          '(telega-company-botcmd))))
                           (company-mode 1)
                           (linum-mode -1)
                           (emojify-mode)
                           )
                       )
    ('telega-root-mode . (lambda () 
                           (emojify-mode)
                           (linum-mode -1)
                           ))

    :config
    (defun weiss-get-telega-marked-text ()
      "Delete marked messages in chatbuf.
  If `\\[universal-argument]' is specified, then kill
  messages (delete for me only), otherwise revoke message (delete
  for everyone).
  If chatbuf is supergroups, channels or secret chat, then always revoke."
      (interactive)
      (when-let ((marked-messages (or (reverse telega-chatbuf--marked-messages)
                                      (when-let ((msg-at-point (telega-msg-at (point))))
                                        (list msg-at-point)))))
        ;; (message ": %s" (length marked-messages))
        (mapconcat (lambda (msg) (telega-tl-str (plist-get msg :content) :text)) marked-messages "\n\n")    
        ))

    (defun weiss-roam-telega-capture ()
      "DOCSTRING"
      (interactive)
      (let* ((content (format "* TODO %%?\n%s :fleeting:" (weiss-get-telega-marked-text)))
             (org-roam-dailies-capture-templates
              `(
                ("f" "Fleeting notes" entry #'org-roam-capture--get-point
                 ,content
                 :file-name "daily/Ʀd-%<%Y-%m-%d>"
                 :head "#+title: Daily-%<%Y-%m-%d>\n#+roam_tags: Daily\n"
                 :olp ("Fleeting notes")
                 )             
                )
              ))
        (org-roam-dailies-capture-today)
        ))
    (define-key telega-chat-mode-map [remap org-roam-dailies-capture-today] #'weiss-roam-telega-capture)
    (setq telega-open-file-function 'org-open-file)
    ;; (setq telega-server-libs-prefix "/usr/lib")
    (telega-notifications-mode 1)
    ;; :ryo
    ;; (:mode 'telega)
    ;; ("g" telega-chat-with)
    ;; ("n" next-line)
    ;; ("p" previous-line)
    )

  ;; (require 'telega)

  (provide 'weiss-telega)

#+end_src

* projectile
:PROPERTIES:
:header-args: :tangle project/weiss-project.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (use-package projectile
    :bind
    (:map
     projectile-mode-map
     ("C-c C-p" . 'projectile-command-map))
    :init
    (projectile-global-mode 1)
    :config
    (projectile-register-project-type 'go '("go.mod")
                                      :compile "go build"
                                      :test "go test"
                                      :run "go run")
    )

  (provide 'weiss-project) 

#+end_src

* vcs
:PROPERTIES:
:header-args: :tangle vcs/weiss-vcs.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  ;; Git
  (use-package magit
    :init
    (setq magit-log-section-commit-count 15)

    ;; open magit in current window
    (setq magit-display-buffer-function
          (lambda (buffer)
            (display-buffer
             buffer (if (and (derived-mode-p 'magit-mode)
                             (memq (with-current-buffer buffer major-mode)
                                   '(magit-process-mode
                                     magit-revision-mode
                                     magit-diff-mode
                                     magit-stash-mode
                                     magit-status-mode)))
                        nil
                      '(display-buffer-same-window)))))
    :config
    ;; Access Git forges from Magit
    ;; (when (executable-find "cc")
    ;; (use-package forge :demand))

    ;; ;; Show TODOs in magit
    ;; (use-package magit-todos
    ;;   :init
    ;;   (setq magit-todos-nice (if (executable-find "nice") t nil))
    ;;   (magit-todos-mode 1)))

    ;; Walk through git revisions of a file
    (use-package git-timemachine
      :defer t
      :custom-face
      (git-timemachine-minibuffer-author-face ((t (:inherit success))))
      (git-timemachine-minibuffer-detail-face ((t (:inherit warning))))
      :bind (:map vc-prefix-map
                  ("t" . git-timemachine)))

    ;; Pop up last commit information of current line
    (use-package git-messenger
      :defer t
      :bind (:map vc-prefix-map
                  ("p" . git-messenger:popup-message)
                  :map git-messenger-map
                  ("m" . git-messenger:copy-message))
      :init (setq git-messenger:show-detail t
                  git-messenger:use-magit-popup t)
      :config

      (with-no-warnings
        (defun my-git-messenger:format-detail (vcs commit-id author message)
          (if (eq vcs 'git)
              (let ((date (git-messenger:commit-date commit-id))
                    (colon (propertize ":" 'face 'font-lock-comment-face)))
                (concat
                 (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                         (propertize "Commit" 'face 'font-lock-keyword-face) colon
                         (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                         (propertize "Author" 'face 'font-lock-keyword-face) colon
                         (propertize author 'face 'font-lock-string-face)
                         (propertize "Date" 'face 'font-lock-keyword-face) colon
                         (propertize date 'face 'font-lock-string-face))
                 (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
                 message
                 (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
            (git-messenger:format-detail vcs commit-id author message)))
        (advice-add #'git-messenger:popup-close :override #'ignore)
        (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))
    )

  ;; Open github/gitlab/bitbucket page
  (use-package browse-at-remote
    :defer t
    :bind (:map vc-prefix-map
                ("B" . browse-at-remote)))

  ;; Git related modes
  (use-package gitattributes-mode
    )
  (use-package gitconfig-mode
    )
  (use-package gitignore-mode
    )

  (provide 'weiss-vcs)
  ;; vcs:1 ends here
#+end_src

* ivy
:PROPERTIES:
:header-args: :tangle ivy/weiss-ivy.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  ;;; init-ivy.el --- Initialize ivy configurations.	-*- lexical-binding: t -*-

  ;;; Code:
  (use-package rg)

  (use-package counsel
    :diminish ivy-mode counsel-mode
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :init
    (setq enable-recursive-minibuffers t) ; Allow commands in minibuffers

    (setq ivy-use-selectable-prompt t
          ivy-use-virtual-buffers t    ; Enable bookmarks and recentf
          ivy-height 10
          ivy-fixed-height-minibuffer t
          ivy-count-format "(%d/%d) "
          ivy-on-del-error-function nil
          ivy-initial-inputs-alist nil)

    (setq swiper-action-recenter t)

    (setq counsel-find-file-at-point t
          counsel-yank-pop-separator "\n────────\n")

    ;; Use the faster search tool: ripgrep (`rg')
    (when (executable-find "rg")
      (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never %s %s")
      )
    :config
    (with-no-warnings
      ;; Display an arrow with the selected item
      (defun my-ivy-format-function-arrow (cands)
        "Transform CANDS into a string for minibuffer."
        (ivy--format-function-generic
         (lambda (str)
           (concat (if (display-graphic-p)
                       (all-the-icons-octicon "chevron-right" :height 0.8 :v-adjust -0.05)
                     ">")
                   (propertize " " 'display `(space :align-to 2))
                   (ivy--add-face str 'ivy-current-match)))
         (lambda (str)
           (concat (propertize " " 'display `(space :align-to 2)) str))
         cands
         "\n"))
      ;; (setf (alist-get 't ivy-format-functions-alist) #'my-ivy-format-function-arrow)

      ;; Pre-fill search keywords
      ;; @see https://www.reddit.com/r/emacs/comments/b7g1px/withemacs_execute_commands_like_marty_mcfly/
      (defvar my-ivy-fly-commands
        '(query-replace-regexp
          flush-lines keep-lines ivy-read
          swiper swiper-backward swiper-all
          swiper-isearch swiper-isearch-backward
          lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol
          counsel-grep-or-swiper counsel-grep-or-swiper-backward
          counsel-grep counsel-ack counsel-ag counsel-rg counsel-pt))
      (defvar-local my-ivy-fly--travel nil)

      (defun my-ivy-fly-back-to-present ()
        (cond ((and (memq last-command my-ivy-fly-commands)
                    (equal (this-command-keys-vector) (kbd "M-p")))
               ;; repeat one time to get straight to the first history item
               (setq unread-command-events
                     (append unread-command-events
                             (listify-key-sequence (kbd "M-p")))))
              ((or (memq this-command '(self-insert-command
                                        ivy-forward-char end-of-line mwim-end-of-line
                                        mwim-end-of-code-or-line mwim-end-of-line-or-code
                                        yank ivy-yank-word counsel-yank-pop))
                   (equal (this-command-keys-vector) (kbd "M-n")))
               (unless my-ivy-fly--travel
                 (delete-region (point) (point-max))
                 (when (memq this-command '(ivy-forward-char
                                            end-of-line mwim-end-of-line
                                            mwim-end-of-code-or-line
                                            mwim-end-of-line-or-code ))
                   (insert (ivy-cleanup-string ivy-text)))
                 (setq my-ivy-fly--travel t)))))

      (defun my-ivy-fly-time-travel ()
        (when (memq this-command my-ivy-fly-commands)
          (let* ((kbd (kbd "M-n"))
                 (cmd (key-binding kbd))
                 (future (and cmd
                              (with-temp-buffer
                                (when (ignore-errors
                                        (call-interactively cmd) t)
                                  (buffer-string))))))
            (when future
              (save-excursion
                (insert (propertize (replace-regexp-in-string
                                     "\\\\_<" ""
                                     (replace-regexp-in-string
                                      "\\\\_>" ""
                                      future))
                                    'face 'shadow)))
              (add-hook 'pre-command-hook 'my-ivy-fly-back-to-present nil t)))))

      (add-hook 'minibuffer-setup-hook #'my-ivy-fly-time-travel)
      (add-hook 'minibuffer-exit-hook
                (lambda ()
                  (remove-hook 'pre-command-hook 'my-ivy-fly-back-to-present t)))

      ;; Improve search experience of `swiper' and `counsel'
      ;; @see https://emacs-china.org/t/swiper-swiper-isearch/9007/12
      (defun my-swiper-toggle-counsel-rg ()
        "Toggle `counsel-rg' and `swiper-isearch' with the current input."
        (interactive)
        (ivy-quit-and-run
          (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
              (counsel-rg ivy-text default-directory)
            (swiper-isearch ivy-text))))
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg swiper-map)
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg counsel-ag-map)

      (with-eval-after-load 'rg
        (defun my-swiper-toggle-rg-dwim ()
          "Toggle `rg-dwim' with the current input."
          (interactive)
          (ivy-quit-and-run
            (rg-dwim default-directory)))
        (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
        (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map))

      (defun my-swiper-toggle-swiper-isearch ()
        "Toggle `swiper' and `swiper-isearch' with the current input."
        (interactive)
        (ivy-quit-and-run
          (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
              (swiper ivy-text)
            (swiper-isearch ivy-text))))
      (bind-key "<S-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

      (defun my-counsel-find-file-toggle-fzf ()
        "Toggle `counsel-fzf' with the current `counsel-find-file' input."
        (interactive)
        (ivy-quit-and-run
          (counsel-fzf (or ivy-text "") default-directory)))
      (bind-key "<C-return>" #'my-counsel-find-file-toggle-fzf counsel-find-file-map)

      ;; Prettify `counsel-imenu'
      (defun my-counsel-imenu-get-candidates-from (alist &optional prefix)
        "Create a list of (key . value) from ALIST.
  PREFIX is used to create the key."
        (cl-mapcan
         (lambda (elm)
           (if (imenu--subalist-p elm)
               (counsel-imenu-get-candidates-from
                (cl-loop for (e . v) in (cdr elm) collect
                         (cons e (if (integerp v) (copy-marker v) v)))
                ;; pass the prefix to next recursive call
                (concat prefix (if prefix ".") (car elm)))
             (let ((key (concat
                         (when prefix
                           (if (display-graphic-p)
                               (progn
                                 (pcase prefix
                                   ("Packages"
                                    (setq prefix (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-silver)))
                                   ((or "Types" "Type")
                                    (setq prefix (all-the-icons-faicon "wrench" :height 0.9 :v-adjust -0.05)))
                                   ((or "Functions" "Function")
                                    (setq prefix (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple)))
                                   ((or "Variables" "Variable")
                                    (setq prefix (all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue)))
                                   ("Class"
                                    (setq prefix (all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange))))
                                 (concat prefix "\t"))
                             (concat
                              (propertize prefix 'face 'ivy-grep-info)
                              ": ")))
                         (car elm))))
               (list (cons key
                           (cons key (if (overlayp (cdr elm))
                                         (overlay-start (cdr elm))
                                       (cdr elm))))))))
         alist))
      (advice-add #'counsel-imenu-get-candidates-from :override #'my-counsel-imenu-get-candidates-from)

      ;; Integration with `magit'
      (with-eval-after-load 'magit
        (setq magit-completing-read-function 'ivy-completing-read)))

    ;; Enhance M-x
    (use-package amx
      :init (setq amx-history-length 20))

    ;; Better sorting and filtering
    (use-package prescient
      :commands prescient-persist-mode
      :init
      (setq prescient-filter-method '(literal regexp initialism fuzzy))
      :config
      (prescient-persist-mode 1))

    (use-package ivy-prescient
      :commands ivy-prescient-re-builder
      :custom-face
      (ivy-minibuffer-match-face-1 ((t (:inherit font-lock-doc-face :foreground nil))))
      :init
      (defun ivy-prescient-non-fuzzy (str)
        "Generate an Ivy-formatted non-fuzzy regexp list for the given STR.
  This is for use in `ivy-re-builders-alist'."
        (let ((prescient-filter-method '(literal regexp)))
          (ivy-prescient-re-builder str)))

      (setq ivy-prescient-retain-classic-highlighting t
            ivy-re-builders-alist
            '((counsel-ag . ivy-prescient-non-fuzzy)
              (counsel-rg . ivy-prescient-non-fuzzy)
              (org-refile . ivy-prescient-non-fuzzy)
              (org-roam-find-file . ivy-prescient-non-fuzzy)
              (org-roam-insert . ivy-prescient-non-fuzzy)
              (counsel-recentf . ivy-prescient-non-fuzzy)
              (counsel-bookmark . ivy-prescient-non-fuzzy)
              (counsel-pt . ivy-prescient-non-fuzzy)
              (counsel-grep . ivy-prescient-non-fuzzy)
              (counsel-imenu . ivy-prescient-non-fuzzy)
              (counsel-org-goto . ivy-prescient-non-fuzzy)
              (counsel-org-goto-all . ivy-prescient-non-fuzzy)
              ;; (counsel-M-x . ivy-prescient-non-fuzzy)
              (counsel-yank-pop . ivy-prescient-non-fuzzy)
              (swiper . ivy-prescient-non-fuzzy)
              (swiper-isearch . ivy-prescient-non-fuzzy)
              (swiper-all . ivy-prescient-non-fuzzy)
              (ivy-switch-buffer . ivy-prescient-non-fuzzy)
              (lsp-ivy-workspace-symbol . ivy-prescient-non-fuzzy)
              (lsp-ivy-global-workspace-symbol . ivy-prescient-non-fuzzy)
              (insert-char . ivy-prescient-non-fuzzy)
              (counsel-unicode-char . ivy-prescient-non-fuzzy)
              (t . ivy-prescient-re-builder))
            ivy-prescient-sort-commands
            '(:not swiper swiper-isearch ivy-switch-buffer
                   counsel-grep counsel-git-grep counsel-ag counsel-imenu
                   counsel-yank-pop counsel-recentf counsel-buffer-or-recentf))

      (ivy-prescient-mode 1))

    ;; Integrate yasnippet
    (use-package ivy-yasnippet
      :commands ivy-yasnippet--preview
      :bind ("C-c C-y" . ivy-yasnippet)
      :config (advice-add #'ivy-yasnippet--preview :override #'ignore))

    ;; Select from xref candidates with Ivy
    (use-package ivy-xref
      :init
      (when (boundp 'xref-show-definitions-function)
        (setq xref-show-definitions-function #'ivy-xref-show-defs))
      (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

    ;; Correcting words with flyspell via Ivy
    (use-package flyspell-correct-ivy
      :after flyspell
      :bind (:map flyspell-mode-map
                  ([remap flyspell-correct-word-before-point] . flyspell-correct-previous-word-generic)))

    ;; Display world clock using Ivy
    (use-package counsel-world-clock
      :bind (:map counsel-mode-map
                  ("C-c c k" . counsel-world-clock)))


    )

  ;; More friendly display transformer for Ivy
  (use-package ivy-rich
    :hook ((ivy-mode . ivy-rich-mode)
           (ivy-rich-mode . (lambda ()
                              (setq ivy-virtual-abbreviate
                                    (or (and ivy-rich-mode 'abbreviate) 'name)))))
    :init
    ;; For better performance
    (setq ivy-rich-parse-remote-buffer nil)

    ;; Setting tab size to 1, to insert tabs as delimiters
    (add-hook 'minibuffer-setup-hook
              (lambda ()
                (setq tab-width 1)))

    (with-no-warnings
      (defun ivy-rich-bookmark-name (candidate)
        (car (assoc candidate bookmark-alist)))

      (defun ivy-rich-buffer-icon (candidate)
        "Display buffer icons in `ivy-rich'."
        (when (display-graphic-p)
          (let* ((buffer (get-buffer candidate))
                 (buffer-file-name (buffer-file-name buffer))
                 (major-mode (buffer-local-value 'major-mode buffer))
                 (icon (with-current-buffer buffer (all-the-icons-icon-for-buffer))))
            (if (symbolp icon)
                (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0)
              icon))))

      (defun ivy-rich-file-icon (candidate)
        "Display file icons in `ivy-rich'."
        (when (display-graphic-p)
          (let* ((path (concat ivy--directory candidate))
                 (file (file-name-nondirectory path))
                 (icon (cond
                        ((file-directory-p path)
                         (all-the-icons-icon-for-dir path nil ""))
                        ((string-match "^/.*:$" path)
                         (all-the-icons-octicon "radio-tower" :height 1.0 :v-adjust 0.01))
                        ((not (string-empty-p file))
                         (all-the-icons-icon-for-file file :v-adjust -0.05)))))
            (if (symbolp icon)
                (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0)
              icon))))

      (defun ivy-rich-project-icon (_candidate)
        "Display project icons in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-octicon "file-directory" :height 1.0 :v-adjust 0.01)))

      (defun ivy-rich-mode-icon (_candidate)
        "Display mode icons in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-blue)))

      (defun ivy-rich-function-icon (_candidate)
        "Display function icons in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple)))

      (defun ivy-rich-variable-icon (_candidate)
        "Display the variable icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue)))

      (defun ivy-rich-symbol-icon (_candidate)
        "Display the symbol icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-octicon "gear" :height 0.9 :v-adjust -0.05)))

      (defun ivy-rich-theme-icon (_candidate)
        "Display the theme icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-material "palette" :height 1.0 :v-adjust -0.2)))

      (defun ivy-rich-keybinding-icon (_candidate)
        "Display the keybindings icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-material "keyboard" :height 0.9 :v-adjust -0.15)))

      (defun ivy-rich-library-icon (_candidate)
        "Display the library icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-material "view_module" :height 1.0 :v-adjust -0.225 :face 'all-the-icons-lblue)))

      (defun ivy-rich-package-icon (_candidate)
        "Display the package icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-silver)))

      (defun ivy-rich-font-icon (_candidate)
        "Display the font icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "font" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (defun ivy-rich-world-clock-icon (_candidate)
        "Display the world clock icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "globe" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (defun ivy-rich-tramp-icon (_candidate)
        "Display the tramp icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-octicon "radio-tower" :height 0.9 :v-adjust 0.01)))

      (defun ivy-rich-git-branch-icon (_candidate)
        "Display the git branch icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-octicon "git-branch" :height 1.0 :v-adjust -0.05 :face 'all-the-icons-green)))

      (defun ivy-rich-process-icon (_candidate)
        "Display the process icon in `ivy-rich'."
        (when (display-graphic-p)
          (all-the-icons-faicon "bolt" :height 1.0 :v-adjust -0.05 :face 'all-the-icons-lblue)))

      (when (display-graphic-p)
        (defun my-ivy-rich-bookmark-type (candidate)
          (let ((filename (ivy-rich-bookmark-filename candidate)))
            (cond ((null filename)
                   (all-the-icons-material "block" :height 1.0 :v-adjust -0.2 :face 'warning))  ; fixed #38
                  ((file-remote-p filename)
                   (all-the-icons-octicon "radio-tower" :height 0.9 :v-adjust 0.01))
                  ((not (file-exists-p filename))
                   (all-the-icons-material "block" :height 1.0 :v-adjust -0.2 :face 'error))
                  ((file-directory-p filename)
                   (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust -0.05))
                  (t (all-the-icons-icon-for-file (file-name-nondirectory filename) :height 0.9 :v-adjust -0.05)))))
        (advice-add #'ivy-rich-bookmark-type :override #'my-ivy-rich-bookmark-type)))

    (setq ivy-rich-display-transformers-list
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand))
             :delimiter "\t")
            ivy-switch-buffer-other-window
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand))
             :delimiter "\t")
            counsel-switch-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand))
             :delimiter "\t")
            counsel-switch-buffer-other-window
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand))
             :delimiter "\t")
            persp-switch-to-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand))
             :delimiter "\t")
            counsel-M-x
            (:columns
             ((ivy-rich-function-icon)
              (counsel-M-x-transformer (:width 50))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((ivy-rich-function-icon)
              (counsel-describe-function-transformer (:width 50))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((ivy-rich-variable-icon)
              (counsel-describe-variable-transformer (:width 50))
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
            counsel-set-variable
            (:columns
             ((ivy-rich-variable-icon)
              (counsel-describe-variable-transformer (:width 50))
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
            counsel-apropos
            (:columns
             ((ivy-rich-symbol-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-info-lookup-symbol
            (:columns
             ((ivy-rich-symbol-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-descbinds
            (:columns
             ((ivy-rich-keybinding-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-find-file
            (:columns
             ((ivy-rich-file-icon)
              (ivy-read-file-transformer))
             :delimiter "\t")
            counsel-file-jump
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-dired
            (:columns
             ((ivy-rich-file-icon)
              (ivy-read-file-transformer))
             :delimiter "\t")
            counsel-dired-jump
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-el
            (:columns
             ((ivy-rich-symbol-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-fzf
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-git
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-recentf
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate (:width 0.8))
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
             :delimiter "\t")
            counsel-buffer-or-recentf
            (:columns
             ((ivy-rich-file-icon)
              (counsel-buffer-or-recentf-transformer (:width 0.8))
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
             :delimiter "\t")
            counsel-bookmark
            (:columns
             ((ivy-rich-bookmark-type)
              (ivy-rich-bookmark-name (:width 40))
              (ivy-rich-bookmark-info))
             :delimiter "\t")
            counsel-bookmarked-directory
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-package
            (:columns
             ((ivy-rich-package-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-fonts
            (:columns
             ((ivy-rich-font-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-major
            (:columns
             ((ivy-rich-function-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-find-library
            (:columns
             ((ivy-rich-library-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-load-library
            (:columns
             ((ivy-rich-library-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-load-theme
            (:columns
             ((ivy-rich-theme-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-world-clock
            (:columns
             ((ivy-rich-world-clock-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-tramp
            (:columns
             ((ivy-rich-tramp-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-git-checkout
            (:columns
             ((ivy-rich-git-branch-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-list-processes
            (:columns
             ((ivy-rich-process-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-projectile-switch-project
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            counsel-projectile-find-file
            (:columns
             ((ivy-rich-file-icon)
              (counsel-projectile-find-file-transformer))
             :delimiter "\t")
            counsel-projectile-find-dir
            (:columns
             ((ivy-rich-project-icon)
              (counsel-projectile-find-dir-transformer))
             :delimiter "\t")
            counsel-minor
            (:columns
             ((ivy-rich-mode-icon)
              (ivy-rich-candidate))
             :delimiter "\t")
            treemacs-projectile
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))
             :delimiter "\t"))))

  (provide 'weiss-ivy)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; weiss_ivy.el ends here

#+end_src

#+RESULTS:
: weiss-ivy

* translation
:PROPERTIES:
:header-args: :tangle translation/weiss-translation.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp 
  (use-package youdao-dictionary
    :disabled
    :config
    ;; Enable Cache
    (setq url-automatic-caching t)
    )

  (use-package chinese-yasdcv
    :load-path "/home/weiss/.emacs.d/local-package/chinese-yasdcv/"
    :config
    (setq yasdcv-sdcv-dicts
          '(
            ("Duden" "Duden" "duden" t)
            ("新德汉词典" "新德汉词典" "xindehan" t)
            ("牛津现代英汉双解词典" "牛津现代英汉双解词典" nil t)
            ("niujing"    "牛津高阶英汉双解"  "oald" t)
            ("21shiji"    "21世纪英汉汉英双向词典" "21cen" t)
            ("21shjikj"   "21世纪双语科技词典"  nil t)))
    (setq yasdcv-wiktionary-lang '("de" "en"))
    )

  (provide 'weiss-translation)

  ;; computer 

#+end_src

* org
:PROPERTIES:
:header-args: :tangle org/weiss-org.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
#+begin_src elisp
  (defvar weiss/org-file-path "/home/weiss/Documents/OrgFiles/")
  (defvar weiss/org-img-path "/home/weiss/Documents/OrgFiles/Bilder/")
  (defun weiss--get-org-file-path (path)
    "get org-file path according to weiss/org-file-path"
    (interactive)
    (concat weiss/org-file-path path)
    )
  (use-package org
#+end_src
** weiss-org-sp-mode
:PROPERTIES:
:header-args: :tangle org/weiss-org-sp-mode.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
*** define mode
#+begin_src elisp
  (defvar weiss-org-sp-mode-map (make-sparse-keymap))

  (define-minor-mode weiss-org-sp-mode
    "weiss-org-sp-mode"
    :keymap weiss-org-sp-mode-map
    (if weiss-org-sp-mode
        (progn
          (weiss-overriding-ryo-push-map weiss-org-sp-mode weiss-org-sp-mode-map)
          (add-hook 'ryo-modal-mode-hook 'weiss-org-sp--push-keymap)
          )
      (setq minor-mode-overriding-map-alist (assq-delete-all 'weiss-org-sp-mode minor-mode-overriding-map-alist))
      (remove-hook 'ryo-modal-mode 'weiss-org-sp--push-keymap)
      )
    )

  (defun weiss-org-sp--push-keymap ()
    "DOCSTRING"
    (interactive)
    (when ryo-modal-mode
      (weiss-overriding-ryo-push-map weiss-org-sp-mode weiss-org-sp-mode-map))  
    )

  ;; only work in special position
  (let ((key-cmd-list '(
                        ("j" weiss-org-sp-down)
                        ("k" weiss-org-sp-up)
                        ("i" weiss-org-sp-left)
                        ("l" weiss-org-sp-right)
                        ("r" weiss-org-refile)
                        ("v" org-paste-special)
                        ("w" org-narrow-to-subtree)
                        ))
        (fun (lambda (cmd) (interactive) (when (and ryo-modal-mode (weiss-org-sp--special-p))  cmd))))
    (weiss-overriding-ryo-define-key weiss-org-sp-mode-map key-cmd-list fun)  
    )

  ;; only work in heading or #+ block begin and there is no region
  (let ((key-cmd-list '(
                        ("c" weiss-org-sp-copy)
                        ("d" weiss-org-sp-cut)
                        ))
        (fun (lambda (cmd) (interactive)
               (when (and ryo-modal-mode
                          (not (use-region-p))
                          (or (org-at-heading-p) (looking-at-p weiss-org-sp-sharp-begin))) cmd))))
    (weiss-overriding-ryo-define-key weiss-org-sp-mode-map key-cmd-list fun)  
    )
#+end_src
*** predicate

#+begin_src elisp
  (defvar weiss-org-sp-sharp "^\\(?:#\\+\\(?:\\(?:begin\\|end\\)_src\\)\\)"
    "Shortcut for the org's #+ regex.")

  (defvar weiss-org-sp-sharp-begin "^#\\+begin_src"
    "Shortcut for the org's #+ regex.")

  (defvar weiss-org-sp-sharp-end "^#\\+end_src"
    "Shortcut for the org's #+ regex.")

  (defvar weiss-org-sp-regex "^\\(?:\\*\\)"
    "Shortcut for weiss-org-sp's special regex.")
  (setq weiss-org-sp-regex "^\\(?:#\\+\\(?:\\(?:begin\\|end\\)_src\\)\\|\\*\\)" )


  (defvar weiss-org-sp-regex-full "^\\(?:\\*+ \\|:\\)"
    "Shortcut for weiss-org-sp's special regex.")

  (defun weiss-org-sp--special-p ()
    "Return t if point is special.
  When point is special, alphanumeric keys call commands instead of
  calling `self-insert-command'."
    (and (bolp)
         (or
          (looking-at weiss-org-sp-regex)
          (looking-at weiss-org-sp-sharp)
          (weiss-org-sp--at-property-p)
          (looking-back "^\\*+" (line-beginning-position))
          (looking-at "CLOCK:"))))

  (defun weiss-org-sp--ensure-visible ()
    "Remove overlays hiding point."
    (let ((overlays (overlays-at (point)))
          ov expose)
      (while (setq ov (pop overlays))
        (if (and (invisible-p (overlay-get ov 'invisible))
                 (setq expose (overlay-get ov 'isearch-open-invisible)))
            (funcall expose ov)))))

  (defun weiss-org-sp--at-property-p ()
    "Return t if point is at property."
    (looking-at "^:"))

  (defun weiss-org-sp--invisible-p ()
    "Test if point is hidden by an `org-block' overlay."
    (cl-some (lambda (ov) (memq (overlay-get ov 'invisible)
                                '(org-hide-block outline)))
             (overlays-at (point))))
#+end_src
*** functions
#+begin_src elisp
  (defun weiss-org-sp-up ()
    "Move ARG headings up."
    (interactive)
    (let ((p (point))
          (case-fold-search t))
      (cond ((weiss-org-sp--at-property-p)
             (weiss-org-sp--prev-property)
             )
            ((looking-at weiss-org-sp-sharp-begin)           
             (previous-line))
            ((looking-at weiss-org-sp-sharp-end)           
             (weiss-org-sp--sharp-up))
            (t
             (org-backward-heading-same-level 1 t)
             ))
      (if (eq p (point))
          (weiss-org-sp-backward)
        ))  
    )

  (defun weiss-org-sp--prev-property ()
    "Move to the previous property line."
    (interactive)
    (let ((bnd (weiss-org-sp--bounds-subtree)))
      (while (and (> (point) (car bnd))
                  (re-search-backward "^:" (car bnd) t)
                  (weiss-org-sp--invisible-p)))
      ;; (org-speed-move-safe 'outline-previous-visible-heading)
      ))

  (defun weiss-org-sp--sharp-up ()
    "Move up to the next #+."
    (let ((pt (point)))
      (while (and (re-search-backward weiss-org-sp-sharp (car (weiss-org-sp--bounds-subtree)) t)
                  (weiss-org-sp--invisible-p)))
      (cond ((weiss-org-sp--invisible-p)
             (prog1 nil
               (goto-char pt)))
            ((= pt (point))
             nil)
            (t
             (goto-char
              (match-beginning 0))))))

  (defun weiss-org-sp-down ()
    "Move ARG headings down."
    (interactive)
    (let ((p (point))
          (case-fold-search t))
      (cond ((weiss-org-sp--at-property-p)
             (weiss-org-sp--next-property))
            ((looking-at weiss-org-sp-sharp-begin)           
             (weiss-org-sp--sharp-down))
            ((looking-at weiss-org-sp-sharp-end)           
             (weiss-org-sp-forward))
            (t
             (org-forward-heading-same-level 1 t)
             ))
      (when (eq p (point))
        (next-line)
        (beginning-of-line)
        ))    
    )

  (defun weiss-org-sp--next-property ()
    "Move to the next property line."
    (interactive)
    (let ((bnd (weiss-org-sp--bounds-subtree))
          (pt (point))
          (success nil))
      (forward-char 1)
      (while (and (null success)
                  (< (point) (cdr bnd))
                  (re-search-forward "^:" (cdr bnd) t))
        (backward-char 1)
        (if (weiss-org-sp--invisible-p)
            (forward-char 1)
          (setq success t)))
      (unless success
        (goto-char pt))))

  (defun weiss-org-sp--sharp-down ()
    "Try to find the next visible #+, else find the next special position"
    (interactive)
    (let ((pt (point))
          (bnd (weiss-org-sp--bounds-subtree))
          )
      (forward-char 2)
      (unless (and (re-search-forward weiss-org-sp-sharp (cdr bnd) t)
                   (not (weiss-org-sp--invisible-p)))
        (goto-char pt)
        (while (and (weiss-org-sp-forward)
                    (weiss-org-sp--invisible-p)))
        )
      )
    )

  (defun weiss-org-sp-backward ()
    "Go backwards to closest special position."
    (interactive)
    (re-search-backward weiss-org-sp-regex-full nil t)
    (while (or (weiss-org-sp--invisible-p)
               (not (looking-at "[*#]"))
               (not (bolp)))
      (weiss-org-sp-backward)))

  (defun weiss-org-sp-forward ()
    "Go forwards to closest special position, return t if found"
    (interactive)
    (forward-char 1)
    (when (re-search-forward weiss-org-sp-regex-full nil t)
      (beginning-of-line) t
      )  
    )

  (defun weiss-org-sp-right ()
    "If cursor is at the begin of #+ block, edit it, otherwise go to the child element, if there is no more child:
  if on a: 
  todo keyword: cycle it between todo and done
  link: follow it
  otherwise, go to next special position
  "
    (interactive)
    (if (looking-at-p weiss-org-sp-sharp-begin)
        (org-edit-special)  
      (let ((pt (point))
            result)
        (save-restriction
          (org-narrow-to-subtree)
          (forward-char)
          (if (re-search-forward weiss-org-sp-regex nil t)
              (progn
                (goto-char (match-beginning 0))
                (setq result t))
            (widen)
            (re-search-forward " ")
            (let* ((context (org-element-context))
                   (type (org-element-type context)))
              (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
                (setq context (org-element-property :parent context)
                      type (org-element-type context)))
              (pcase type
                (`headline
                 (when (or (org-element-property :todo-type context)
                           (org-element-property :scheduled context))
                   (org-todo
                    (if (eq (org-element-property :todo-type context) 'done)
                        '"TODO"
                      '"DONE")))
                 )
                (`link
                 (let* ((lineage (org-element-lineage context '(link) t))
                        (path (org-element-property :path lineage)))
                   (cond
                    ((or (equal (org-element-property :type lineage) "img")
                         (and path (image-type-from-file-name path)))
                     (+org--toggle-inline-images-in-subtree
                      (org-element-property :begin lineage)
                      (org-element-property :end lineage))
                     )
                    ((and
                      (ignore-errors (string-prefix-p "Ʀ" (file-name-nondirectory (buffer-file-name))))
                      (not (one-window-p)))
                     (delete-other-windows)
                     (org-open-at-point)
                     (split-window-below)
                     (org-mark-ring-goto)
                     (beginning-of-line)
                     (recenter nil t)
                     )
                    (t
                     (org-open-at-point)                   
                     )
                    )
                   ))
                (_ ignore)
                )
              (goto-char pt)
              )))
        (weiss-org-sp--ensure-visible)
        result
        ))
    )


  (defun weiss-org-sp-left ()
    "Move one level up backwards."
    (interactive)
    (if (looking-at weiss-org-sp-sharp)
        (goto-char (car (weiss-org-sp--bounds-subtree)))
      (ignore-errors
        (org-up-heading-safe))))


  (defun weiss-org-sp-switch ()
    "Switch between special position and normal position"
    (interactive)
    (if (weiss-org-sp--special-p)
        (re-search-forward " ")
      (weiss-org-sp-backward)
      )
    )

  (defun weiss-org-sp--cut-or-copy-sharp (&optional is-copy)
    "try to cut or copy the all #+ block, else return nil"
    (interactive)
    (when (looking-at weiss-org-sp-sharp-begin)
      (save-excursion
        (let ((p1 (point))
              p2)
          (when (re-search-forward weiss-org-sp-sharp-end (cdr (weiss-org-sp--bounds-subtree)) t)
            (end-of-line)
            (setq p2 (point))
            (if is-copy
                (copy-region-as-kill p1 p2)          
              (kill-region p1 p2))
            t)
          ))    
      )
    )

  (defun weiss-org-sp-cut ()
    "Cut #+ block or subtree"
    (interactive)
    (if (looking-at weiss-org-sp-sharp-begin)
        (weiss-org-sp--cut-or-copy-sharp)
      (org-cut-special)
      )
    )

  (defun weiss-org-sp-copy ()
    "Cut #+ block or subtree"
    (interactive)
    (if (looking-at weiss-org-sp-sharp-begin)
        (weiss-org-sp--cut-or-copy-sharp t)
      (org-copy-special)
      )
    )

  (defun weiss-org-sp--bounds-subtree ()
    "Return bounds of the current subtree as a cons."
    (save-excursion
      (save-match-data
        (condition-case e
            (cons
             (progn
               (org-back-to-heading t)
               (point))
             (progn
               (org-end-of-subtree t t)
               (when (and (org-at-heading-p)
                          (not (eobp)))
                 (backward-char 1))
               (point)))
          (error
           (if (string-match
                "^Before first headline"
                (error-message-string e))
               (cons (point-min)
                     (or (ignore-errors
                           (org-speed-move-safe 'outline-next-visible-heading)
                           (point))
                         (point-max)))
             (signal (car e) (cdr e))))))))
#+end_src

#+RESULTS:
: weiss-org-sp--bounds-subtree

*** addvices
#+begin_src elisp
  (advice-add 'xah-open-file-at-cursor
              :before
              '(lambda () (interactive)
                 (ignore-errors
                   (when (or (weiss-org-sp--at-property-p)
                             (looking-at weiss-org-sp-sharp-begin))
                     (re-search-forward ":tangle " (line-end-position) t)
                     ))
                 ))
#+end_src
*** end
#+begin_src elisp
  (provide 'weiss-org-sp-mode)
#+end_src
** hooks
#+begin_src elisp
  :hook ((org-mode . (lambda ()
                       ;; (company-mode -1)
                       (if (eq major-mode 'org-mode)
                           (weiss-org-sp-mode 1)
                         (weiss-org-sp-mode -1)                           
                         )
                       (when ryo-modal-mode
                         (ryo-modal-mode -1)
                         (ryo-modal-mode 1)
                         )
                       (make-local-variable 'company-minimum-prefix-length)
                       (setq company-minimum-prefix-length 5)
                       (linum-mode -1)
                       (display-line-numbers-mode nil)
                       (iimage-mode)
                       (diminish 'iimage-mode)
                       (emojify-mode)
                       (make-local-variable 'shiftless-upper-rules)
                       (shiftless-Umlaut)
                       (make-local-variable 'display-line-numbers)
                       (visual-line-mode)
                       (diminish 'visual-line-mode)
                       (setq
                        display-line-numbers 'nil)
                       ;; (let ((current-prefix-arg '(16)))
                       ;;   (call-interactively 'org-latex-preview)
                       ;;   )

                       "Beautify org symbols."

                       ;; (push '("[ ]" . ?☐) prettify-symbols-alist)
                       ;; (push '("[X]" . ?☑) prettify-symbols-alist)
                       ;; (push '("[-]" . ?⛝) prettify-symbols-alist)

                       ;; (push '("#+ARCHIVE:" . ?📦) prettify-symbols-alist)
                       ;; ;; (push '("#+AUTHOR:" . ?👤) prettify-symbols-alist)
                       ;; ;; (push '("#+CREATOR:" . ?💁) prettify-symbols-alist)
                       ;; (push '("#+DATE:" . ?📆) prettify-symbols-alist)
                       ;; (push '("#+DESCRIPTION:" . ?⸙) prettify-symbols-alist)
                       ;; (push '("#+EMAIL:" . ?🖂) prettify-symbols-alist)
                       ;; (push '("#+OPTIONS:" . ?⛭) prettify-symbols-alist)
                       ;; (push '("#+SETUPFILE:" . ?⛮) prettify-symbols-alist)
                       ;; (push '("#+TAGS:" . ?🏷) prettify-symbols-alist)
                       ;; ;; (push '("#+TITLE:" . ?📓) prettify-symbols-alist)

                       ;; (push '("#+BEGIN_SRC" . ?✎) prettify-symbols-alist)
                       ;; (push '("#+begin_src" . ?✎) prettify-symbols-alist)
                       ;; (push '("#+END_SRC" . ?⬝) prettify-symbols-alist)
                       ;; (push '("#+end_src" . ?⬝) prettify-symbols-alist)
                       ;; (push '("#+BEGIN_QUOTE" . ?») prettify-symbols-alist)
                       ;; (push '("#+END_QUOTE" . ?«) prettify-symbols-alist)
                       ;; (push '("#+HEADERS" . ?☰) prettify-symbols-alist)
                       ;; (push '("#+RESULTS:" . ?💻) prettify-symbols-alist)

                       ;; (prettify-symbols-mode 1)
                       ))

         (org-indent-mode . (lambda()
                              (diminish 'org-indent-mode)
                              ;; WORKAROUND: Prevent text moving around while using brackets
                              ;; @see https://github.com/seagle0128/.emacs.d/issues/88
                              (make-variable-buffer-local 'show-paren-mode)
                              (setq show-paren-mode nil))))
#+end_src
** init
#+begin_src elisp
  :init
  (advice-add 'org-edit-special
              :after
              '(lambda () (interactive)
                 (maximize-window)
                 (weiss-shrink-window-if-larger-than-buffer nil (/ (frame-height) 3))))
  (require 'weiss-org-sp-mode)
  (provide 'org-version)
  (fset 'org-agenda-done "td")
 
#+end_src
*** variables
#+begin_src elisp
  (setq
   org-directory "~/Documents/OrgFiles/"
   org-agenda-files '("~/Dropbox/Org-roam/daily/")
   org-agenda-todo-ignore-scheduled t
   org-agenda-prefix-format "%t %s " ;hide files name
   org-tag-alist '(("China" . ?c)("shoppingList" . ?s)("board-game" . ?b)("emacs" . ?e) ("video" . ?v)("misc" . ?m)("article" . ?a) ("eaf") ("snails") ("dired")("roam"))

   org-todo-keywords '((sequence "INPROGRESS(i)" "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c@)"))
   ;; (sequence "⚑(T)" "🏴(I)" "❓(H)" "|" "✔(D)" "✘(C)"))
   org-extend-today-until 4
   org-cycle-max-level 15
   org-agenda-skip-scheduled-if-done t
   org-hide-leading-stars nil
   org-export-allow-bind-keywords t
   org-indent-mode-turns-on-hiding-stars nil
   org-list-description-max-indent 4
   org-startup-indented t
   org-startup-folded t
   org-log-done 'time
   org-fast-tag-selection-single-key t
   org-agenda-include-diary t
   org-agenda-window-setup 'current-window
   org-src-window-setup 'split-window-below

    ;;;;; Export

   org-export-preserve-breaks nil
   org-export-with-creator nil
   org-export-with-author t
   org-export-with-section-numbers nil
   org-export-with-toc nil
   org-export-with-latex "imagemagick"
   org-export-with-date nil


   org-refile-targets
   `((,(weiss--get-org-file-path "Kenntnisse.org")   :level . 1)
     (,(weiss--get-org-file-path "todo.org"):maxlevel . 2)                            
     (,(weiss--get-org-file-path "Vorlesungen.org"):maxlevel . 2)
     (,(weiss--get-org-file-path "Einsammlung.org"):maxlevel . 2)
     (,(weiss--get-config-file-path "emacs-config.org"):maxlevel . 2)
     )

   org-refile-use-outline-path nil

   org-agenda-custom-commands
   '(
     ("c" "Custom agenda"
      ((agenda ""))
      (
       ;; (org-agenda-tag-filter-preset '("+dailyagenda"))
       (org-agenda-hide-tags-regexp (concat org-agenda-hide-tags-regexp "\\|dailyagenda"))
       (org-agenda-span 20)))
     ("b" occur-tree "Bookmarks"))
   org-link-frame-setup
   '(
     (vm . vm-visit-folder)
     (vm-imap . vm-visit-imap-folder)
     (gnus . gnus)
     (file . find-file)
     (wl . wl-frame))
   org-tags-column -80
   org-log-done 'time
   org-catch-invisible-edits 'smart
   org-fontify-done-headline t
   org-agenda-compact-blocks t
   org-image-actual-width nil
   org-capture-templates   '(("o" "org-noter" entry (file "~/Documents/OrgFiles/Vorlesungen.org")
                              "* %f \n :PROPERTIES: \n :NOTER_DOCUMENT: %F \n :END: \n [[%F][Filepath]]")
                             ("a" "Abgabe" entry (file "~/Documents/OrgFiles/Vorlesungen.org")
                              "* [[%F][%f]]  \n ")
                             )
   ;; org-ellipsis (if (char-displayable-p ?) "  " nil)
   org-pretty-entities nil
   ;; hide ** //
   org-hide-emphasis-markers nil

    ;;;;; File Assoc
   org-file-apps
   '((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . default)
     ("\\.pdf\\'" . emacs)
     ("\\.mp4\\'" . "vlc \"%s\"")
     ("\\.txt\\'" . emacs)
     ("\\.xopp\\'" . "xournalpp \"%s\"")
     )
   )
#+end_src
** keybinding
#+begin_src elisp
  :bind
  (
   :map org-mode-map
   ("M-i" . org-shiftmetaleft)
   ("M-k" . org-metaup)
   ("M-j" . org-metadown)
   ("M-l" . org-shiftmetaright)
   ("M-o" . org-metaleft)
   ("M-p" . org-metaright)
   )

  :ryo
  (:mode 'org-mode)
  ("<shifttab>" org-shifttab)
  ("5" +org/dwim-at-point)
  ("6" org-insert-heading-respect-content)
  ("8" org-export-dispatch)
  ("C" org-copy-subtree)
  ("d" weiss-org-cut-line-or-delete-region)
  ("j" next-line :first '(deactivate-mark))
  ("k" previous-line :first '(deactivate-mark))
  ("u" weiss-org-preview-latex-and-image)
  ("n" weiss-org-search)
  ("x" weiss-org-exchange-point-or-switch-to-sp)
  ("X" org-refile)
  ("t" (
        ("a" weiss-org-screenshot)
        ("o" org-noter)
        ("d" weiss-org-download-img)
        ("q" weiss-set-org-tags)
        ("s" org-noter-sync-current-note)
        ("t" org-todo)
        ("b" org-mark-ring-goto)
        ("j s" weiss-org-copy-heading-link)
        ))
  ("<escape> o" (
                 ("e"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src elisp" "#+end_src" t)))
                  :name "elisp babel")
                 ("="
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src c++" "#+end_src" t)))
                  :name "c++ babel")
                 ("p"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src python" "#+end_src" t)))
                  :name "python babel")
                 ("l"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src latex" "#+end_src" t)))
                  :name "latex babel")
                 ("j"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src java" "#+end_src" t)))
                  :name "java babel")
                 ("g"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src go" "#+end_src" t)))
                  :name "golang babel")
                 ("s"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src sh" "#+end_src" t)))
                  :name "sh babel")
                 ("h"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src html" "#+end_src" t)))
                  :name "html babel")
                 ("r"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src R" "#+end_src" t)))
                  :name "R babel")
                 ("c"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src conf" "#+end_src" t)))
                  :name "conf babel")
                 ("q"
                  ignore
                  :then ((lambda () (interactive) (weiss-insert-bracket-pair "#+begin_src sql" "#+end_src" t)))
                  :name "sql babel")
                 )
   )
  ("<escape> <escape>" (
                        ("RET"
                         ignore
                         :then ((lambda () (insert "$\\\\$\n")))
                         :name "latex new line")
                        ("s"
                         ignore
                         :then ((lambda ()(weiss-insert-bracket-pair "\\begin{right_indent}" "\\end{right_indent}" t)))
                         :name "add subs")
                        ("c"
                         ignore
                         :then ((lambda ()(weiss-insert-bracket-pair "$\\color{code}\\texttt{" "}$" nil)))
                         :name "add color")

                        ))
  (:mode 'org-agenda-mode)
  ("-" xah-backward-punct)
  ("=" xah-forward-punct)
  ;; ("d" org-agenda-done)
  ;; ("q" org-agenda-exit)
  ;; ("r" org-agenda-redo)
  ;; ("t" org-agenda-todo)


#+end_src
** config
#+begin_src elisp
  :config
#+end_src
*** functions
#+begin_src elisp
  (setq
   weiss-org-xournal-note-dir "/home/weiss/Documents/OrgFiles/Bilder/xournal/xopp/"  ;; xopp 笔记存储目录
   weiss-org-xournal-template-dir "/home/weiss/Documents/OrgFiles/Bilder/xournal/" ;; xournal 目标文件存储目录
   weiss-org-xournal-default-template-name "Template.xopp" ;; 默认笔记模版名称，应该位于 org-xournal-template-dir
   weiss-org-xournal-bin "/usr/bin/xournalpp" ;; xournal 执行文件
   weiss-org-xournal-png-path "/home/weiss/Documents/OrgFiles/Bilder/xournal/png/"
   weiss-org-xournal-process-picture-functon #'weiss-org-xournal-process-picture-functon
   )

  (defun org-xournal-save-image (xournal-path png-path)
    "Convert XOURNAL-PATH to PNG and write it to PNG-PATH."
    (call-process-shell-command (format "%s %s -i %s" weiss-org-xournal-bin xournal-path png-path))
    )

  (defun weiss-xournal--refresh-img (path png-path)
    "refresh xournal image"
    (interactive)
    (org-xournal-save-image path png-path)
    (call-process-shell-command (format "convert %s -resize 326x231 -quality 5%%  -trim +repage %s"   png-path png-path)))

  (defun weiss-xournal-refresh-img-manually ()
    "DOCSTRING"
    (interactive)
    (let* ((context (org-element-context))
           (type (org-element-type context))
           (lineage (org-element-lineage context '(link) t))
           (path (org-element-property :path lineage))
           (png-path (concat
                      weiss-org-xournal-png-path
                      (file-name-sans-extension (file-name-nondirectory path)) ".png") )
           )
      ;; (message "path: %s\npng-path: %s" path png-path)
      (weiss-xournal-refresh-img path png-path)
      ))

  (defun weiss-insert-xournal-link ()
    "DOCSTRING"
    (interactive)
    (let* ((name (read-string "xournal name:"))
           (file-name (concat name ".xopp"))
           (path (concat weiss-org-xournal-note-dir file-name))
           (png-path (concat weiss-org-xournal-png-path name ".png"))
           )
      (unless (file-exists-p path)
        (f-copy
         (concat
          weiss-org-xournal-template-dir
          weiss-org-xournal-default-template-name)
         path)
        )
      (insert (format "[[%s][%s]]" path file-name))
      (let ((process-connection-type nil))
        (start-process "" nil "xdg-open" path)
        ) 
      (weiss-xournal-refresh-img path png-path)
      (insert (format "\n[[%s]]" png-path))
      ))



  (defun weiss-org-copy-heading-link ()
    "copy the current heading link in org format"
    (interactive)
    (let* ((title (substring-no-properties (org-get-heading t t t t)))
           (des (read-string "Description: " title))
           )
      (kill-new (format "[[*%s][%s]]" title des))
      ))

  (defun weiss-set-org-tags (&optional arg)
    "set tags with counsel, using org-use-fast-tag-selection if `arg' =4, align tags if `arg' = 16"
    (interactive "P")
    ;; deactivate mark for org-set-tags-command
    (deactivate-mark)
    (pcase arg
      ('(4) (counsel-org-tag))
      ('(16) (org-align-tags t))
      (_ (let ((current-prefix-arg 4))
           (call-interactively 'org-set-tags-command)       
           ))
      )  
    )
  (defun weiss-test ()
    "DOCSTRING"
    (interactive)
    (call-interactively 'org-set-tags-command))

  (defun weiss-org-exchange-point-or-switch-to-sp ()
    "exchange point if region is aktiv otherwise switch to `weiss-org-sp-mode'"
    (interactive)
    (if (and (use-region-p) (> (- (region-end) (region-beginning)) 1)) 
        (exchange-point-and-mark)      
      (weiss-org-sp-switch)
      )
    )

  (defun weiss-org-refile (arg)
    "normally only refile current file, refile all files in org-refile-targets with current-prefix-arg"
    (interactive "p")
    (let ((current-prefix-arg))
      (if (eq arg 1)
          (weiss-org-refile-current-file)    
        (call-interactively #'org-refile)
        ) 
      )
    )

  (defun weiss-org-refile-current-file ()
    "only refile current file"
    (interactive)
    (let ((org-refile-targets `((,buffer-file-name :maxlevel . 4)))
          (org-refile-use-outline-path nil))
      (message "targets: %s" org-refile-targets)
      (call-interactively #'org-refile)
      )
    )

  (defun weiss-org-search ()
    "execute different search commands with universal argument"
    (interactive)
    (let ((arg-v (prefix-numeric-value current-prefix-arg)))
      (setq current-prefix-arg nil)
      (cond
       ((eq arg-v 4) (counsel-org-goto))
       ((> arg-v 4) (counsel-org-goto-all))
       (t (swiper-isearch-thing-at-point))
       )
      )
    )

  (defun weiss-shrink-window-if-larger-than-buffer (&optional window min-window-size)
    "Weiss: add optional arg min-window-size
  Shrink height of WINDOW if its buffer doesn't need so many lines.
  More precisely, shrink WINDOW vertically to be as small as
  possible, while still showing the full contents of its buffer.
  WINDOW must be a live window and defaults to the selected one.

  Do not shrink WINDOW to less than `window-min-height' lines.  Do
  nothing if the buffer contains more lines than the present window
  height, or if some of the window's contents are scrolled out of
  view, or if shrinking this window would also shrink another
  window, or if the window is the only window of its frame.

  Return non-nil if the window was shrunk, nil otherwise."
    (interactive)
    (setq window (window-normalize-window window t))
    ;; Make sure that WINDOW is vertically combined and `point-min' is
    ;; visible (for whatever reason that's needed).  The remaining issues
    ;; should be taken care of by `fit-window-to-buffer'.
    (when (and (window-combined-p window)
               (pos-visible-in-window-p (point-min) window))
      (fit-window-to-buffer window (window-total-height window) min-window-size)))

  (defun weiss-org-cut-line-or-delete-region ()
    "DOCSTRING"
    (interactive)
    (if (use-region-p)
        (kill-region (region-beginning) (region-end) t)
      (progn
        (beginning-of-line)
        (org-kill-line)
        (kill-region (line-beginning-position) (line-beginning-position 2)))))

  (defun weiss-delete-backward-bracket-and-mark-bracket-text-org-mode ()
    "DOCSTRING"
    (interactive)
    (cond
     ((member (char-to-string (char-after)) '("<" ">"))  (delete-char -1))
     ((member (char-to-string (char-before)) weiss-org-special-markers)
      (let ((before-point (point))
            (mark-point )
            (special-marker (char-to-string (char-before))))      
        (delete-char -1)
        (when (string-match (regexp-opt (list special-marker)) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
          (if (member (char-to-string (char-before (- (point) 0))) (list " " "\n"))
              (progn (search-forward special-marker)
                     (delete-char -1)
                     (setq mark-point (- before-point 1))
                     )
            (search-backward special-marker)          
            (delete-char 1)
            (setq mark-point (- before-point 2))
            )
          (push-mark mark-point)
          (setq mark-active t)
          (setq deactivate-mark nil)
          (exchange-point-and-mark)
          ))
      )
     (t
      (xah-delete-backward-char-or-bracket-text)
      ;; (message "%s" "123")
      )
     )
    )

  (defun weiss-delete-forward-bracket-and-mark-bracket-text-org-mode ()
    "DOCSTRING"
    (interactive)
    (cond
     ((member (char-to-string (char-after)) '("<" ">"))  (delete-char 1))
     ((member (char-to-string (char-after)) weiss-org-special-markers)
      (let ((before-point (point))
            (mark-point )
            (special-marker (char-to-string (char-after))))      
        (delete-char 1)
        (when (string-match (regexp-opt (list special-marker)) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
          (if (member (char-to-string (char-before (- (point) 0))) (list " " "\n"))
              (progn (search-forward special-marker)
                     (delete-char -1)
                     (setq mark-point (- before-point 1))
                     )
            (search-backward special-marker)          
            (delete-char 1)
            (setq mark-point (- before-point 1))
            )
          (push-mark mark-point)
          (setq mark-active t)
          (setq deactivate-mark nil)
          (exchange-point-and-mark)
          ))
      )
     (t (xah-delete-forward-char-or-bracket-text))
     )
    )

  (defun weiss-delete-backward-bracket-and-text-org-mode ()
    "DOCSTRING"
    (interactive)
    (weiss-delete-backward-bracket-and-mark-bracket-text-org-mode)
    (when (use-region-p) (kill-region (region-beginning) (region-end)))
    )

  (defun weiss-delete-forward-bracket-and-text-org-mode ()
    "DOCSTRING"
    (interactive)
    (weiss-delete-forward-bracket-and-mark-bracket-text-org-mode)
    (when (use-region-p) (kill-region (region-beginning) (region-end)))
    )

  (defun weiss-switch-and-bookmarks-search()
    (interactive)
    (find-file "~/Documents/OrgFiles/Einsammlung.org")
    (org-agenda nil "b"))

  (defun weiss-org-archive()
    (interactive)
    (setq current-prefix-arg '(4))
    (call-interactively 'org-archive-subtree))

  (defun weiss-org-preview-latex-and-image()
    (interactive)
    "if current prefix arg, then remove all the inline images and latex preview, else display all of them."
    (if current-prefix-arg
        (let ((current-prefix-arg '(64)))
          (call-interactively 'org-latex-preview) 
          (org-remove-inline-images)
          (when (ignore-errors org-xournal-mode) (org-xournal-hide-all))
          )
      (let ((current-prefix-arg '(16)))
        (call-interactively 'org-latex-preview)
        (org-display-inline-images))
      (when (ignore-errors org-xournal-mode) (org-xournal-show-current-link))
      )
    )

  (defun weiss-org-screenshot ()
    "call flameshot to capture screen shot"
    (interactive)
    (weiss-org-insert-image "flameshot-caputre.png" (concat "flameshot gui -p " weiss/org-img-path))
    )

  (defun weiss-org-download-img ()
    "download the img link from clipboard"
    (interactive)
    (weiss-org-insert-image
     "wget-img.png"
     (format "wget -O %swget-img.png %s" weiss/org-img-path (substring-no-properties (gui-get-selection 'CLIPBOARD (or x-select-request-type 'UTF8_STRING))))
     t)    
    )
  ;; flameshot-caputre.png
  (defun weiss-org-insert-image (pic-name command &optional img-attr)
    "insert image to org"
    (interactive)
    (let* ((path weiss/org-img-path)
           (name (format "%s.png" (format-time-string "%Y-%m-%d_%H-%M-%S")))
           (old-name (concat path pic-name))
           (new-name (concat path name))
           )
      (when (file-exists-p old-name)
        (delete-file old-name)
        )
      (shell-command-to-string command)
      (while (not (file-exists-p old-name))
        (sit-for 0.1)
        )
      (rename-file old-name new-name)
      (end-of-line)
      (insert "\n")
      (when img-attr
        (insert "#+ATTR_org: :width 600\n")
        )
      (insert (concat "[[" new-name  "]]"))
      )  
    (org-display-inline-images))

  ;;https://stackoverflow.com/questions/17435995/paste-an-image-on-clipboard-to-emacs-org-mode-file-without-saving-it

  (defun weiss-custom-daily-agenda()
    (interactive)
    (org-agenda nil "c"))
  ;; (getenv "PATH")

  (defun +org--toggle-inline-images-in-subtree (&optional beg end refresh)
    "Refresh inline image previews in the current heading/tree."
    (let ((beg (or beg
                   (if (org-before-first-heading-p)
                       (line-beginning-position)
                     (save-excursion (org-back-to-heading) (point)))))
          (end (or end
                   (if (org-before-first-heading-p)
                       (line-end-position)
                     (save-excursion (org-end-of-subtree) (point)))))
          (overlays (cl-remove-if-not (lambda (ov) (overlay-get ov 'org-image-overlay))
                                      (ignore-errors (overlays-in beg end)))))
      (dolist (ov overlays nil)
        (delete-overlay ov)
        (setq org-inline-image-overlays (delete ov org-inline-image-overlays)))
      (when (or refresh (not overlays))
        (org-display-inline-images t t beg end)
        t)))

  (defun +org/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.
   If on a:
   - checkbox list item or todo heading: toggle it.
   - clock: update its time.
   - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
     subtree; update statistics cookies/checkboxes and ToCs.
   - footnote reference: jump to the footnote's definition
   - footnote definition: jump to the first reference of this footnote
   - table-row or a TBLFM: recalculate the table's formulas
   - table-cell: clear it and go into insert mode. If this is a formula cell,
     recaluclate it instead.
   - babel-call: execute the source block
   - statistics-cookie: update it.
   - latex fragment: toggle it.
   - link: follow it
   - otherwise, refresh all inline images in current tree."
    ;; (interactive "P")
    (interactive "P")
    ;; (interactive)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`headline
         (cond ((memq (bound-and-true-p org-goto-map)
                      (current-active-maps))
                (org-goto-ret))
               ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     '"TODO"
                   '"DONE"))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))
        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context)))))))

#+end_src

#+RESULTS:
: +org/dwim-at-point
*** babel
#+begin_src elisp
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)

  (setq load-language-list '((emacs-lisp . t)
                             (perl . t)
                             (python . t)
                             (ruby . t)
                             (js . t)
                             (css . t)
                             (sass . t)
                             (C . t)
                             ;; (C++ . t)
                             (plantuml . t)))

  ;; ob-sh renamed to ob-shell since 26.1.
  (cl-pushnew '(shell . t) load-language-list)

  (use-package ob-fsharp
    :init (cl-pushnew '(fsharp . t) load-language-list))

  (use-package ob-javascript
    :quelpa (ob-javascript
             :fetcher github
             :repo "zweifisch/ob-javascript"
             )
    :init (cl-pushnew '(javascript . t) load-language-list))

  (use-package ob-C
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t))))

  (use-package ob-go
    :init (cl-pushnew '(go . t) load-language-list))

  (use-package ob-rust
    :init (cl-pushnew '(rust . t) load-language-list))

  ;; (use-package ob-ipython
  ;; :if (executable-find "jupyter") ; DO NOT remove
  ;; :init (cl-pushnew '(ipython . t) load-language-list))

  (use-package ob-java
    :init (cl-pushnew '(java . t) load-language-list))

  (use-package ob-R
    :ensure nil
    :load-path "/home/weiss/.emacs.d/local-package"
    :init (cl-pushnew '(R . t) load-language-list))

  (use-package ob-sql-mode
    :init (cl-pushnew '(sql . t) load-language-list))

  (org-babel-do-load-languages 'org-babel-load-languages
                               load-language-list)
#+end_src
*** export
#+begin_src elisp
  ;; Enable markdown backend
  (add-to-list 'org-export-backends 'md)


#+end_src
*** org-roam
#+begin_src elisp 
  (use-package org-roam
    :init
    (add-hook 'after-init-hook 'org-roam-mode)
    (setq
     org-roam-tag-separator ";"
     org-roam-directory "~/Dropbox/Org-roam/"
     org-roam-dailies-directory "daily/"
     org-agenda-files `(,(concat org-roam-directory org-roam-dailies-directory))
     )
    :ryo
    (:mode 'org-mode)
    ("t i" org-roam-insert)
    ("t r" org-roam)
    ("t j"
     (
      ("t" org-roam-tag-add)
      ("n" org-roam-capture)
      ("f" weiss-roam-add-focusing-tag)
      ("s" weiss-org-roam-copy-heading-link)    
      ))

    :config
    (defun weiss-roam-add-focusing-tag ()
      "add focusing tag with quote"
      (interactive)
      (goto-char (point-min))
      (re-search-forward "#\\+roam_tags:")
      (insert " \",focusing\" ")
      )

    (defun weiss-roam--add-to-today-daily (content state)
      "add `content'  to the `state' heading in today daily file"
      (let* ((filename (concat
                        org-roam-directory
                        org-roam-dailies-directory
                        "Ʀ"
                        (if (< (string-to-number (format-time-string "%H")) 4)
                            (format-time-string "d-%Y-%m-%d" (time-subtract (current-time) (* 24 3600)))                          
                          (format-time-string "d-%Y-%m-%d")
                          )
                        ".org"))
             (org-capture-templates
              `(("d" "done" entry (file+headline ,filename ,state)
                 ,content))
              ))
        (org-capture nil (kbd "d"))
        ))

    (defun weiss-roam-copy-done-item-to-daily (change-plist)
      "add current the link of Done or Cancelled item to daily file"
      (interactive)
      (let ((state (plist-get change-plist :to))
            )
        (when (or (string= state "DONE") (string= state "CANCELLED"))
          (weiss-roam--add-to-today-daily
           (concat "* " (weiss-org-roam-copy-heading-link t))
           (capitalize state))
          )      
        )
      )
    (add-hook 'org-trigger-hook 'weiss-roam-copy-done-item-to-daily)

    (defun weiss-org-roam--title-to-slug (title)
      "add Umlaut convert"
      (let ((l '(
                 ("ä" . "ae")
                 ("ö" . "oe")
                 ("ü" . "ue")
                 ("ß" . "ss")
                 )
               )
            )
        (dolist (x l title) 
          (setq title (replace-regexp-in-string (car x) (cdr x) title))
          )      
        )
      (org-roam--title-to-slug title)
      )
    (setq org-roam-title-to-slug-function 'weiss-org-roam--title-to-slug)

    (defun weiss-org-roam-copy-heading-link (&optional without-asking)
      "copy the current heading link in roam format"
      (interactive)
      (if (string-prefix-p "Ʀ" (file-name-nondirectory (buffer-file-name))) 
          (let ((id (org-id-get-create))
                (title
                 (if without-asking
                     (substring-no-properties (org-get-heading t t t t))
                   (read-string "Description: " (substring-no-properties (org-get-heading t t t t)))               
                   )
                 )
                )
            (kill-new (format " [[id:%s][%s]]" id title))
            )
        (let* ((title (substring-no-properties (org-get-heading t t t t)))
               (des (read-string "Description: " title))
               )
          (kill-new (format "[[*%s][%s]]" title des))
          )
        )


      )

    ;; open link from roam direkt in browser
    (with-no-warnings
      (defun weiss-org-link-open-as-file (path arg)
        "Pretend PATH is a file name and open it.

  According to \"file\"-link syntax, PATH may include additional
  search options, separated from the file name with \"::\".

  This function is meant to be used as a possible tool for
  `:follow' property in `org-link-parameters'."
        (let* ((option (and (string-match "::\\(.*\\)\\'" path)
                            (match-string 1 path)))
               (file-name (if (not option) path
                            (substring path 0 (match-beginning 0)))))
          (if (string-match "[*?{]" (file-name-nondirectory file-name))
              (dired file-name)
            (if (string-prefix-p "Ʀlink:" (file-name-nondirectory file-name))
                (with-temp-buffer
                  (insert-file-contents file-name)
                  (goto-line 3)
                  (browse-url (buffer-substring-no-properties (+ (line-beginning-position) 12) (line-end-position)))
                  )
              (apply #'org-open-file
                     file-name
                     arg
                     (cond ((not option) nil)
                           ((string-match-p "\\`[0-9]+\\'" option)
                            (list (string-to-number option)))
                           (t (list nil option))))
              )
            )))

      (advice-add 'org-link-open-as-file :override 'weiss-org-link-open-as-file)
      )


    (add-to-list 'ivy-initial-inputs-alist '(org-roam-find-file . "^"))
    (add-to-list 'ivy-initial-inputs-alist '(org-roam-insert . "^"))
    (defun weiss-org-roam--prepend-tag-string (str tags)
      "Prepend TAGS to STR."
      (concat
       str
       (when tags
         (propertize (format "(%s) " (s-join org-roam-tag-separator tags))
                     'face 'org-roam-tag))
       ))
    (advice-add 'org-roam--prepend-tag-string :override 'weiss-org-roam--prepend-tag-string)

    (defun weiss-roam-find-file (filename &optional wildcards)
      "DOCSTRING"
      (interactive
       (find-file-read-args "Find file: "
                            (confirm-nonexistent-file-or-buffer)))
      (if (string-prefix-p "Ʀlink:" (file-name-nondirectory filename))
          (with-temp-buffer
            (insert-file-contents filename)
            (goto-line 3)
            (browse-url (buffer-substring-no-properties (+ (line-beginning-position) 12) (line-end-position)))
            )
        (find-file filename wildcards)
        )
      )

    (setq
     org-roam-db-update-idle-seconds 0
     org-roam-db-update-method 'immediate
     org-roam-find-file-function 'weiss-roam-find-file
     )
    (setq org-roam-capture-templates
          '(
            ("d" "default" plain (function org-roam-capture--get-point)
             "* ${title}\n** %?"
             :file-name "Ʀ${slug}_%<%Y%m%d%H>"
             :head "#+title: ${title}\n#+roam_alias:\n#+roam_tags:\n")
            ("p" "project" plain (function org-roam-capture--get-point)
             "* ${title}\n** link:\n*** \n** %?"
             :file-name "ƦProjecct-${slug}_%<%Y%m%d%H>"
             :head "#+title: Project-${title}\n#+roam_alias: p-${slug}\n#+roam_tags: project \n")
            ("n" "note" plain (function org-roam-capture--get-point)
             "* ${title}\n %?"
             :file-name "ƦNote-${slug}_%<%Y%m%d%H>"
             :head "#+title: note-${title}\n#+roam_alias: n-${slug}\n#+roam_tags: note \n")
            ("t" "tutorial" plain (function org-roam-capture--get-point)
             "* [[file:ƦUseful-commands-${title}_%<%Y%m%d%H>.org][useful commands]]\n* link\n** \n%?"
             :file-name "ƦTutorial-${slug}_%<%Y%m%d%H>"
             :head "#+title: Tutorial-${title}\n#+roam_alias: t-${slug}\n#+roam_tags: tutorial f-${slug}\n")
            ("c" "useful commands" plain (function org-roam-capture--get-point)
             "%?"
             :file-name "ƦUseful-commands-${slug}_%<%Y%m%d%H>"
             :head "#+title: Useful-commands-${title}\n#+roam_alias: uc-${slug}\n#+roam_tags: useful-commands f-${slug}\n")

            ("l" "link" plain (function org-roam-capture--get-point)
             "%?"
             :file-name "Ʀlink:${slug}"
             :head "#+title: ${title}\n#+roam_alias: l-${slug}\n#+roam_key: %c\n"
             )
            )
          )
    (setq org-roam-dailies-capture-templates
          '(
            ("s" "Scheduled" entry #'org-roam-capture--get-point
             "* TODO %i%?\nSCHEDULED: <%<%Y-%m-%d %a>>"
             :file-name "daily/Ʀd-%<%Y-%m-%d>"
             :head "#+title: Daily-%<%Y-%m-%d>\n#+roam_tags: Daily\n"
             :olp ("Scheduled")
             )
            ("t" "Todo" entry #'org-roam-capture--get-point
             "* TODO %i%?\nSCHEDULED: [%<%Y-%m-%d %a>]"
             :file-name "daily/Ʀd-%<%Y-%m-%d>"
             :head "#+title: Daily-%<%Y-%m-%d>\n#+roam_tags: Daily\n"
             :olp ("Todo")
             )
            ("f" "Fleeting notes" entry #'org-roam-capture--get-point
             "* TODO %i%? :fleeting:"
             :file-name "daily/Ʀd-%<%Y-%m-%d>"
             :head "#+title: Daily-%<%Y-%m-%d>\n#+roam_tags: Daily\n"
             :olp ("Fleeting notes")
             )
            ("j" "Journey" entry #'org-roam-capture--get-point
             "* %?"
             :file-name "daily/Ʀd-%<%Y-%m-%d>"
             :head "#+title: Daily-%<%Y-%m-%d>\n#+roam_tags: Daily\n"
             :olp ("Journey")
             :unnarrowed t
             )
            ))

    (use-package org-roam-server
      :config
      (setq org-roam-server-host "127.0.0.1"
            org-roam-server-port 9090
            org-roam-server-export-inline-images t
            org-roam-server-authenticate nil
            org-roam-server-network-label-truncate t
            org-roam-server-network-label-truncate-length 60
            org-roam-server-network-label-wrap-length 20))
    (use-package org-transclusion
      ;; :quelpa (org-transclusion 
      ;;          :fetcher github 
      ;;          :repo nobiot/org-transclusion)
      :ensure nil
      )
    )
#+end_src
*** org-alert
#+begin_src elisp
  (use-package org-alert
    :disabled
    :config
    (setq alert-default-style 'libnotify)
    (org-alert-enable)
    )
#+end_src
*** appt
#+begin_src elisp

  (require 'appt)
  (appt-activate t)

  (setq appt-message-warning-time 5) ; Show notification 5 minutes before event
  (setq appt-display-interval appt-message-warning-time) ; Disable multiple reminders
  (setq appt-display-mode-line nil)

  ; Use appointment data from org-mode
  (defun my-org-agenda-to-appt ()
    (interactive)
    (setq appt-time-msg-list nil)
    (org-agenda-to-appt))

  ; Update alarms when...
  ; (1) ... Starting Emacs
  (my-org-agenda-to-appt)

  ; (2) ... Everyday at 12:05am (useful in case you keep Emacs always on)
  (run-at-time "12:05am" (* 24 3600) 'my-org-agenda-to-appt)

  ; (3) ... When TODO.txt is saved
  (add-hook 'after-save-hook
            '(lambda ()
               (if (string= (buffer-file-name) (concat (getenv "HOME") "/ideas/TODO.txt"))
                   (my-org-agenda-to-appt))))

  ; Display appointments as a window manager notification
  (setq appt-disp-window-function 'my-appt-display)
  (setq appt-delete-window-function (lambda () t))

  (setq my-appt-notification-app (concat (getenv "HOME") "/bin/appt-notification"))

  (defun my-appt-display (min-to-app new-time msg)
    (if (atom min-to-app)
      (start-process "my-appt-notification-app" nil my-appt-notification-app min-to-app msg)
    (dolist (i (number-sequence 0 (1- (length min-to-app))))
      (start-process "my-appt-notification-app" nil my-appt-notification-app (nth i min-to-app) (nth i msg)))))
#+end_src
*** org-xournal
#+begin_src elisp
  (use-package org-xournal
    :disabled
    :quelpa (org-xournal 
             :fetcher github 
             :repo yuchen-lea/org-xournal)
    :hook (org-mode . org-xournal-mode)
    :config
    (use-package org-link-edit
      :quelpa (org-link-edit 
               :fetcher github 
               :repo kyleam/org-link-edit)
      )
    (setq
     org-xournal-use-relative-filename nil
     org-xournal-note-dir "/home/weiss/Documents/OrgFiles/Bilder/xournal/xopp/"  ;; xopp 笔记存储目录
     org-xournal-template-dir "/home/weiss/Documents/OrgFiles/Bilder/xournal/" ;; xournal 目标文件存储目录
     org-xournal-default-template-name "Template.xopp" ;; 默认笔记模版名称，应该位于 org-xournal-template-dir
     org-xournal-bin "/usr/bin/xournalpp" ;; xournal 执行文件
     org-xournal-process-picture-functon #'weiss-org-xournal-process-picture-functon
     )
    (defun weiss-org-xournal-process-picture-functon (png-path)
      "add resize"
      (interactive)
      ;; (let ((scale 22)
      ;;       )
      ;;   (message "%sx%s" (* 29.7 scale) (* 21 scale))
      ;;   (kill-new (format "%sx%s" (round (* 29.7 scale)) (* 21 scale)))
      ;;   )
      ;; (call-process-shell-command (format "convert %s -resize 653x462 -quality 5%%  -trim +repage %s" png-path png-path))
      (call-process-shell-command (format "convert %s -resize 326x231 -quality 5%%  -trim +repage %s" png-path png-path))
      ;; (async-shell-command (format "convert %s -resize 653x462 -quality 1%%  -trim +repage %s" png-path png-path))
      )
    )
#+end_src
*** misc packages
#+begin_src elisp
  (use-package org-agenda)
  (use-package org-fancy-priorities
    :diminish
    :after org
    :hook (org-mode . org-fancy-priorities-mode)
    :config

    (setq org-fancy-priorities-list '("⚡⚡" "⚡" "❄")
          org-priority-faces '((65 :foreground "#de3d2f" :weight bold)
                               (66 :foreground "#da8548" :weight bold)
                               (67 :foreground "#0098dd"))))

  (use-package org-bullets
    :disabled
    :diminish
    :after org
    :hook (org-mode . org-bullets-mode)
    :config
    (setq  org-bullets-bullet-list '("◉" "◆" "●" "◇" "○" "→" "·" ))
    ;; “♰” “☥” “✞” “✟” “✝” “†” “✠” “✚” “✜” “✛” “✢” “✣” “✤” “✥” “♱” "✙”  "◉"  "○" "✸" "✿" ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
    )

  ;; Rich text clipboard
  (use-package org-rich-yank
    :diminish
    :bind (:map org-mode-map
                ("C-v" . org-rich-yank)))

  (use-package org-tempo ; for <s expand in org-babel
    ;; :disabled
    :diminish
    :after org
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("le" . "src elisp"))
    (add-to-list 'org-structure-template-alist '("lcp" . "src c++"))
    (add-to-list 'org-structure-template-alist '("lp" . "src python"))
    (add-to-list 'org-structure-template-alist '("ll" . "src latex"))
    (add-to-list 'org-structure-template-alist '("lj" . "src java"))
    (add-to-list 'org-structure-template-alist '("ls" . "src sh"))
    (add-to-list 'org-structure-template-alist '("lh" . "src html"))
    (add-to-list 'org-structure-template-alist '("lr" . "src R"))
    (add-to-list 'org-structure-template-alist '("lc" . "src conf"))
    (add-to-list 'org-structure-template-alist '("lq" . "src sql"))
    )

#+end_src
** out of use
#+begin_src elisp :tangle no
  ("t" :hydra
   '(hydra-org-move (:hint nil)
                    "
  [j,k,i,l] Movement [_o_] noter    [_s_] sync       
  [_a_] screenshot  [_p_] export      [_t_] todo          
  [_n_] flyspell [_q_] tag    [_u_] edit                   
  "
                    ("j" org-forward-heading-same-level)
                    ("k" org-backward-heading-same-level)
                    ("i" outline-up-heading)
                    ("l" org-down-element)

                    ("a" weiss-org-screenshot :color blue)
                    ("n" weiss-flyspell-save-word :color blue)
                    ("o" org-noter :color blue)
                    ("p" weiss-export-pdf-dwim :color blue)
                    ("q" org-set-tags-command :color blue)
                    ("s" org-noter-sync-current-note :color blue)
                    ("t" org-todo :color blue)
                    ("u" org-edit-special :color blue)
                    ))
#+end_src
** end
#+begin_src elisp
  )
  (provide 'weiss-org)
#+end_src
* Keybinding System
:PROPERTIES:
:header-args: :tangle keybinding/weiss-keybinding.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
** dependencies
*** weiss-select-mode
#+begin_src elisp :tangle keybinding/weiss-select-mode.el :mkdirp yes
  (defvar weiss-select-mode-p nil "nil")

  (setq mark-select-mode-color "#ffcfe4")
  (setq mark-non-select-mode-color "#cfe4ff")

  (defun weiss-select-mode-check-region-color ()
    "if preview mode is on, change the cursor color"
    (if weiss-select-mode
        (face-remap-add-relative 'region `(:background ,mark-select-mode-color))
      (face-remap-add-relative 'region `(:background ,mark-non-select-mode-color))
      )
    )

  (defun weiss-select-mode-turn-off (&optional o)
    "turn off weiss select mode"
    (interactive)
    (when weiss-select-mode (weiss-select-mode -1))  
    )

  (defun weiss-select-mode-turn-on (&optional o)
    "turn on weiss select mode"
    (interactive)
    (unless weiss-select-mode (weiss-select-mode 1))  
    )

  (add-hook 'deactivate-mark-hook 'weiss-select-mode-turn-off)

  (advice-add 'keyboard-quit :before #'weiss-select-mode-turn-off)
  ;; (advice-add 'deactivate-mark :before #'weiss-select-mode-turn-off)

  (advice-add 'xah-forward-right-bracket :after #'weiss-select-mode-turn-on)
  (advice-add 'xah-backward-left-bracket :after #'weiss-select-mode-turn-on)
  (advice-add 'xah-select-block :after #'weiss-select-mode-turn-on)
  (advice-add 'weiss-select-sexp :after #'weiss-select-mode-turn-on)
  (advice-add 'exchange-point-and-mark :after #'weiss-select-mode-turn-on)
  (advice-add 'weiss-mark-brackets :after #'weiss-select-mode-turn-on)

  (defun weiss-deactivate-mark-unless-in-select-mode (&optional a b c)
    "deactivate mark unless in select mode"
    (interactive)
    (unless weiss-select-mode (deactivate-mark)))

  (advice-add 'swiper-isearch :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'counsel-describe-function :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'counsel-describe-variable :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'weiss-add-parent-sexp :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'undo :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'weiss-indent :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'weiss-indent-paragraph :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'xah-select-block :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'weiss-comment-dwim :before #'weiss-deactivate-mark-unless-in-select-mode)
  ;; (advice-add 'xah-paste-or-paste-previous :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'xah-open-file-at-cursor :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'weiss-delete-or-add-parent-sexp :before #'weiss-deactivate-mark-unless-in-select-mode)
  (advice-add 'org-roam-dailies--capture :before #'weiss-deactivate-mark-unless-in-select-mode)
  ;; (advice-add 'newline :before #'weiss-deactivate-mark-unless-in-select-mode)

  (defun anzu-query-replace (arg)
    "anzu version of `query-replace'."
    (interactive "p")
    (weiss-deactivate-mark-unless-in-select-mode)
    (anzu--query-replace-common nil :prefix-arg arg))

  (defun anzu-query-replace-regexp (arg)
    "anzu version of `query-replace-regexp'."
    (interactive "p")
    (weiss-deactivate-mark-unless-in-select-mode)
    (anzu--query-replace-common t :prefix-arg arg))

  (defun weiss-select-mode-enable ()
    "DOCSTRING"
    (interactive)
    (setq weiss-select-mode-p t)
    (weiss-select-mode-check-region-color)
    ;; (add-hook 'switch-buffer-functions 'weiss-select-mode-check-region-color)
    (push `(weiss-select-mode . ,weiss-select-mode-map) minor-mode-overriding-map-alist) 
    )

  (defun weiss-select-mode-disable ()
    "DOCSTRING"
    (interactive)
    (setq weiss-select-mode-p nil)
    (weiss-select-mode-check-region-color)
    ;; (remove-hook 'switch-buffer-functions 'weiss-select-mode-check-region-color)
    (setq minor-mode-overriding-map-alist (assq-delete-all 'weiss-select-mode minor-mode-overriding-map-alist))
    )

      ;;;###autoload
  (define-minor-mode weiss-select-mode
    "weiss select mode"
    :init-value nil
    :lighter " select"
    :keymap
    (let ((keymap (make-sparse-keymap)))
      (define-key keymap (kbd ";") 'xah-beginning-of-line-or-block)
      (define-key keymap (kbd "h") 'xah-end-of-line-or-block)
      (define-key keymap (kbd "p") 'weiss-contract-region-by-word)
      (define-key keymap (kbd "i") 'backward-char)
      (define-key keymap (kbd "j") 'next-line)
      (define-key keymap (kbd "k") 'previous-line)
      (define-key keymap (kbd "l") 'forward-char)
      (define-key keymap (kbd "x") 'exchange-point-and-mark)
      keymap
      )
    :group 'weiss-select-mode
    (if weiss-select-mode
        (weiss-select-mode-enable)
      (weiss-select-mode-disable)
      ))

  (provide 'weiss-select-mode)
      ;;; weiss-select-mode.el ends here
#+end_src 
*** weiss-variable-mode
#+begin_src elisp :tangle no
  (defvar weiss-variable-mode-map (make-sparse-keymap) "Keybinding for weiss-temp-insert minor mode.")
  (defvar weiss-variable-mode-start-point nil)
  (defvar weiss-variable-snake-case-list '(python-mode))
  (defvar weiss-variable-dash-case-list '(emacs-lisp-mode))

  (defun weiss-variable-mode-enable ()
    "enable temp insert mode"
    (interactive)
    (setq weiss-variable-mode-start-point (point))
    )

  (defun weiss-variable--process-string (s)
    "DOCSTRING"
    (interactive)
    (let ((l (split-string s " "))
          )
      (cond
       ((member major-mode weiss-variable-snake-case-list)
        (s-join "_" l)
        )     
       ((member major-mode weiss-variable-dash-case-list)
        (s-join "-" l)
        )     
       (t
        (concat (pop l) (mapconcat 'capitalize l "")))
       )
      )
    )

  (defun weiss-variable-mode-disable ()
    "disable temp insert mode"
    (when (> (- (point) weiss-variable-mode-start-point) 3)
      (insert (weiss-variable--process-string (delete-and-extract-region weiss-variable-mode-start-point (point))))
      )
    (setq weiss-variable-mode-p nil)
    )

  (defun weiss-variable-mode-start ()
    "DOCSTRING"
    (interactive)
    (when (and (derived-mode-p 'prog-mode) (not ryo-modal-mode)) 
      (weiss-variable-mode 1)
      (setq-local cursor-type 'hbar)
      )  
    )
  (defun weiss-variable-mode-stop ()
    "DOCSTRING"
    (interactive)
    (weiss-variable-mode -1)
    (setq-local cursor-type 'box)
    (ryo-modal-mode)
    )
  ;; (define-key weiss-variable-mode-map (kbd "RET") 'weiss-temp-insert-exit-and-keep-content)
  (define-key weiss-variable-mode-map [remap ryo-modal-mode] 'weiss-variable-mode-stop)
  (advice-add 'keyboard-quit :before 'weiss-variable-mode-start)
  ;;;###autoload
  (define-minor-mode weiss-variable-mode
    "Save selected text and activate insert mode, press enter to exit and keep the selected text. When direct go back to Command mode, the selected text will be deleted."
    :lighter " variable" ; set a simple mode name in the minor-mode-alist
    (if weiss-variable-mode
        (weiss-variable-mode-enable)
      (weiss-variable-mode-disable)
      )
    )


  (provide 'weiss-variable-mode)

#+end_src
*** weiss-temp-insert-mode
#+begin_src elisp :tangle keybinding/weiss-temp-insert-mode.el :mkdirp yes
  (defvar weiss-temp-insert-mode-map (make-sparse-keymap) "Keybinding for weiss-temp-insert minor mode.")
  (defvar weiss-temp-insert--overlay-content)
  (defface weiss-temp-insert-selected-text-face
    '((t (:strike-through t :foreground "#e45649" :background "#f0f0f0" :weight bold)))
    "Default face for selected text.")

  (defun weiss-temp-insert-exit-and-keep-content ()
    "exit mode and keep content"
    (interactive)
    (weiss-temp-insert--remove-overlay t)
    (when weiss-temp-insert-mode (weiss-temp-insert-mode -1))
    (ryo-modal-mode 1)
    )

  (defun weiss-temp-insert-exit-and-remove-content ()
    "exit mode and remove contetn"
    (interactive)
    (weiss-temp-insert--remove-overlay nil)
    (when weiss-temp-insert-mode (weiss-temp-insert-mode -1))
    (ryo-modal-mode 1)
    )

  (defun weiss-temp-insert--set-overlay (p1 p2)
    "set overlay between p1 and p2"
    (interactive)
    ;; it's not necessary to show space at p1
    (let ((str (buffer-substring-no-properties (1+ p1) p2)))
      (setq weiss-temp-insert--overlay-content (make-overlay p1 p2 nil t))
      (overlay-put weiss-temp-insert--overlay-content 'face 'weiss-temp-insert-selected-text-face)
      (overlay-put weiss-temp-insert--overlay-content 'display str)
      ))


  (defun weiss-temp-insert--remove-overlay (&optional keep-content)
    "delete the overlay"
    (interactive)
    (when (overlayp weiss-temp-insert--overlay-content)
      (let ((p1 (overlay-start weiss-temp-insert--overlay-content))
            (p2 (overlay-end weiss-temp-insert--overlay-content)))
        (delete-overlay weiss-temp-insert--overlay-content)      
        (setq weiss-temp-insert--overlay-content nil)
        (if keep-content
            (delete-region p1 (1+ p1))    
          (delete-region p1 p2)                
          )
        ))
    )

  (defun weiss-temp-insert-mode-enable ()
    "enable temp insert mode"
    (interactive)
    (undo-collapse-begin)
    (when weiss-select-mode (weiss-select-mode-turn-off))
    (setq weiss-temp-insert-mode-selected-text nil
          weiss-temp-insert-mode-p t)
    (let (p1 p2)
      (if (use-region-p)
          (progn
            (setq p1 (region-beginning)
                  p2 (region-end))
            (goto-char p1)
            (deactivate-mark)
            )
        (setq p2 (point))
        (skip-syntax-backward "\\w")
        (setq p1 (point))
        ) 
      ;; insert a space to make sure that completion works 
      (save-excursion (insert " "))
      (weiss-temp-insert--set-overlay p1 (1+ p2))
      )
    )

  (defun weiss-temp-insert-mode-disable ()
    "disable temp insert mode"
    (undo-collapse-end)
    (setq weiss-temp-insert-mode-p nil)
    )

  (define-key weiss-temp-insert-mode-map (kbd "RET") 'weiss-temp-insert-exit-and-keep-content)
  (define-key weiss-temp-insert-mode-map [remap ryo-modal-mode] 'weiss-temp-insert-exit-and-remove-content)

  ;;;###autoload
  (define-minor-mode weiss-temp-insert-mode
    "Save selected text and activate insert mode, press enter to exit and keep the selected text. When direct go back to Command mode, the selected text will be deleted."
    :lighter " temp" ; set a simple mode name in the minor-mode-alist
    (if weiss-temp-insert-mode
        (weiss-temp-insert-mode-enable)
      (weiss-temp-insert-mode-disable)
      )
    )


  (provide 'weiss-temp-insert-mode)
#+end_src
*** weiss-overriding-ryo-mode
#+begin_src elisp :tangle keybinding/weiss-overriding-ryo-mode.el :mkdirp yes
  (define-minor-mode weiss-overriding-ryo-mode
    "weiss-overriding-ryo-mode"
    :keymap (make-sparse-keymap)
    (if weiss-overriding-ryo-mode
        (progn
          (push `(weiss-overriding-ryo-mode . ,weiss-overriding-ryo-mode-map) minor-mode-overriding-map-alist)
          (add-hook 'ryo-modal-mode-hook 'weiss--overriding-push-map-if-ryo-is-enabled)
          )
      (setq minor-mode-overriding-map-alist (assq-delete-all 'weiss-overriding-ryo-mode minor-mode-overriding-map-alist))
      (setq weiss-overriding-ryo-mode-map (make-sparse-keymap))
      )
    )

  (defun weiss-overriding-define-key (key-cmd-list)
    (interactive)
    (mapc
     (lambda (cmd-key)
       (let ((cmd (nth 1 cmd-key))
             (key (nth 0 cmd-key))
             )
         (define-key weiss-overriding-ryo-mode-map (kbd key)
           `(menu-item "" ,cmd
                       :filter (lambda (cmd) (when ryo-modal-mode cmd)))
           )
         )
       )
     key-cmd-list)
    )

  (defun weiss--overriding-push-map-if-ryo-is-enabled ()
    "DOCSTRING"
    (interactive)
    (when ryo-modal-mode
      (setq minor-mode-overriding-map-alist (assq-delete-all 'weiss-overriding-ryo-mode minor-mode-overriding-map-alist))
      (push `(weiss-overriding-ryo-mode . ,weiss-overriding-ryo-mode-map) minor-mode-overriding-map-alist)
      )  
    )

  (provide 'weiss-overriding-ryo-mode)
#+end_src
*** weiss-origin-mode

#+begin_src elisp :tangle keybinding/weiss-origin-mode.el :mkdirp yes
  (defvar weiss-origin-mode-map (make-sparse-keymap))
  (defvar weiss-origin-keep-keys nil)

  (defun weiss-origin-mode-push-keymap (&optional key-list)
    "push origin-mode keymap, the first element in `weiss-origin-keep-keys' will be the only leader key"
    (interactive)
    (setq weiss-origin-mode-map nil)
    (unless key-list (setq key-list '("SPC" "9" "s" "-" "<deletechar>")))
    (let ((ryo-keymap
           (eval (intern-soft (concat "ryo-" (symbol-name (car ryo-modal-mode-keymaps)) "-map"))))
          (is-keymap)
          )
      (dolist (x ryo-keymap) 
        (if (eq x 'keymap)
            (setq is-keymap t)
          (when (member (help-key-description (make-vector 1 (car x)) nil) key-list)
            (push x weiss-origin-mode-map)          
            (when is-keymap
              (push 'keymap weiss-origin-mode-map))
            )
          (setq is-keymap nil)
          )
        )    
      (push 'keymap weiss-origin-mode-map)
      (mapc 
       (lambda (key)       
         (define-key weiss-origin-mode-map (kbd (format "%s %s" (car key-list) key)) (lookup-key (symbol-value (keymap-symbol (current-local-map))) (kbd key)))
         ) key-list)
      (setq minor-mode-overriding-map-alist (assoc-delete-all 'weiss-origin-mode minor-mode-overriding-map-alist))
      (push `(weiss-origin-mode . ,weiss-origin-mode-map) minor-mode-overriding-map-alist)
      ))


  (defun weiss-origin-mode-enable ()
    "enable origin mode"
    (interactive)
    (unless weiss-origin-mode (weiss-origin-mode 1))
    )

  (define-minor-mode weiss-origin-mode
    "keep origin keybindings and only change few keys (like leader key)"
    :keymap weiss-origin-mode-map
    (if weiss-origin-mode
        (progn        
          (weiss-origin-mode-push-keymap (cdr (assoc major-mode weiss-origin-keep-keys)))        
          (when ryo-modal-mode (ryo-modal-mode -1))
          )
      (setq minor-mode-overriding-map-alist (assoc-delete-all 'weiss-origin-mode minor-mode-overriding-map-alist))
      )
    )

  (provide 'weiss-origin-mode)

#+end_src
*** Functions
:PROPERTIES:
:header-args: :tangle keybinding/weiss-keybinding-functions.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:
**** editing
#+begin_src elisp
  (defun xah-reformat-whitespaces-to-one-space (@begin @end)
    "Replace whitespaces by one space.

    URL `http://ergoemacs.org/emacs/emacs_reformat_lines.html'
    Version 2017-01-11"
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region @begin @end)
        (goto-char (point-min))
        (while
            (search-forward "\n" nil "move")
          (replace-match " "))
        (goto-char (point-min))
        (while
            (search-forward "\t" nil "move")
          (replace-match " "))
        (goto-char (point-min))
        (while
            (re-search-forward "  +" nil "move")
          (replace-match " ")))))

  (defun xah-reformat-to-multi-lines ( &optional @begin @end @min-length)
    "Replace spaces by a newline at places so lines are not long.
    When there is a text selection, act on the selection, else, act on a text block separated by blank lines.

    If `universal-argument' is called first, use the number value for min length of line. By default, it's 70.

    URL `http://ergoemacs.org/emacs/emacs_reformat_lines.html'
    Version 2018-12-16"
    (interactive)
    (let (
          $p1 $p2
          ($blanks-regex "\n[ \t]*\n")
          ($minlen (if @min-length
                       @min-length
                     (if current-prefix-arg (prefix-numeric-value current-prefix-arg) fill-column))))
      (if (and  @begin @end)
          (setq $p1 @begin $p2 @end)
        (if (region-active-p)
            (progn (setq $p1 (region-beginning) $p2 (region-end)))
          (save-excursion
            (if (re-search-backward $blanks-regex nil "move")
                (progn (re-search-forward $blanks-regex)
                       (setq $p1 (point)))
              (setq $p1 (point)))
            (if (re-search-forward $blanks-regex nil "move")
                (progn (re-search-backward $blanks-regex)
                       (setq $p2 (point)))
              (setq $p2 (point))))))
      (save-excursion
        (save-restriction
          (narrow-to-region $p1 $p2)
          (goto-char (point-min))
          (while
              (re-search-forward " +" nil "move")
            (when (> (- (point) (line-beginning-position)) $minlen)
              (replace-match "\n" )))))))
  (defun xah-space-to-newline ()
    "Replace space sequence to a newline char.
  Works on current block or selection.

  URL `http://ergoemacs.org/emacs/emacs_space_to_newline.html'
  Version 2017-08-19"
    (interactive)
    (let* ( $p1 $p2 )
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (save-excursion
          (if (re-search-backward "\n[ \t]*\n" nil "move")
              (progn (re-search-forward "\n[ \t]*\n")
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (re-search-forward "\n[ \t]*\n" nil "move")
          (skip-chars-backward " \t\n" )
          (setq $p2 (point))))
      (save-excursion
        (save-restriction
          (narrow-to-region $p1 $p2)
          (goto-char (point-min))
          (while (re-search-forward " +" nil t)
            (replace-match "\n" ))))))

  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (defun weiss-insert-semicolon ()
    "insert semicolon at the end of line"
    (interactive)
    (end-of-line)
    (insert ";")
    (weiss-indent-nearby-lines)
    )

  (defun weiss-indent-paragraph()
    (interactive)
    (if (use-region-p)
        (progn
          (indent-region (region-beginning) (region-end))
          )
      (let ((start)
            (end))            
        (setq start (save-excursion
                      (backward-paragraph)
                      (point))
              end (save-excursion
                    (forward-paragraph)
                    (point)))
        (ignore-errors (nox-format))
        (indent-region start end)
        )    
      ))

  (defun weiss-convert-sql-output-to-table ()
    "DOCSTRING"
    (interactive)
    (when (use-region-p)
      (let* ((output (delete-and-extract-region (region-beginning) (region-end)))
             (outputList (split-string output "\n"))
             (r ""))
        (insert (dolist (x outputList r)
                  (when (> (length x) 3) (setq r (format "%s\n|%s|" r x)))))
        )
      (when (eq major-mode 'org-mode) (org-table-align))
      )
    )

  (defun weiss-move-next-bracket-contents ()
    "Move next () to the left to the )"
    (interactive)
    (let ((insert-point)
          (bracket-beginning-point)
          (bracket-end-point))
      (search-forward ")")
      (setq insert-point (point))
      (search-forward "(")
      (backward-char)
      (setq bracket-beginning-point (point))
      (forward-sexp)
      (setq bracket-end-point (point))
      (goto-char (- insert-point 1))
      (insert (delete-and-extract-region bracket-beginning-point bracket-end-point))))

  (defun xah-delete-blank-lines ()
    "Delete all newline around cursor.

          URL `http://ergoemacs.org/emacs/emacs_shrink_whitespace.html'
          Version 2018-04-02"
    (interactive)
    (let ($p3 $p4)
      (skip-chars-backward "\n")
      (setq $p3 (point))
      (skip-chars-forward "\n")
      (setq $p4 (point))
      (delete-region $p3 $p4)))

  (defun xah-fly-delete-spaces ()
    "Delete space, tab, IDEOGRAPHIC SPACE (U+3000) around cursor.
            Version 2019-06-13"
    (interactive)
    (let (p1 p2)
      (skip-chars-forward " \t　")
      (setq p2 (point))
      (skip-chars-backward " \t　")
      (setq p1 (point))
      (delete-region p1 p2)))

  (defun xah-cut-line-or-region ()
    "Cut current line, or text selection.
              When `universal-argument' is called first, cut whole buffer (respects `narrow-to-region').

              URL `http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html'
              Version 2015-06-10"
    (interactive)
    (if current-prefix-arg
        (progn ; not using kill-region because we don't want to include previous kill
          (kill-new (buffer-string))
          (delete-region (point-min) (point-max)))
      (progn (if (use-region-p)
                 (kill-region (region-beginning) (region-end) t)
               (kill-region (line-beginning-position) (line-beginning-position 2))))))

  (defun xah-delete-backward-char-or-bracket-text ()
    "Delete backward 1 character, but if it's a \"quote\" or bracket ()[]{}【】「」 etc, delete bracket and the inner text, push the deleted text to `kill-ring'.

                What char is considered bracket or quote is determined by current syntax table.

                If `universal-argument' is called first, do not delete inner text.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-07-02"
    (interactive)
    (if (and delete-selection-mode (region-active-p))
        (kill-region (region-beginning) (region-end))
      (cond
       ((looking-back "\\s)" 1)
        (if current-prefix-arg
            (xah-delete-backward-bracket-pairs)
          (xah-delete-backward-bracket-text)))
       ((looking-back "\\s(" 1)
        (progn
          (backward-char)
          (forward-sexp)
          (if current-prefix-arg
              (xah-delete-backward-bracket-pairs)
            (xah-delete-backward-bracket-text))))
       ((looking-back "\\s\"" 1)
        (if (nth 3 (syntax-ppss))
            (progn
              (backward-char )
              (xah-delete-forward-bracket-pairs (not current-prefix-arg)))
          (if current-prefix-arg
              (xah-delete-backward-bracket-pairs)
            (xah-delete-backward-bracket-text))))
       (t
        (delete-char -1)))))

  (defun xah-delete-backward-bracket-text ()
    "Delete the matching brackets/quotes to the left of cursor, including the inner text.

                This command assumes the left of cursor is a right bracket, and there's a matching one before it.

                What char is considered bracket or quote is determined by current syntax table.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-09-21"
    (interactive)
    (progn
      (forward-sexp -1)
      (mark-sexp)
      (kill-region (region-beginning) (region-end))))

  (defun xah-delete-forward-bracket-text ()
    "weiss: backward to forward.
                Delete the matching brackets/quotes to the left of cursor, including the inner text.

                This command assumes the left of cursor is a right bracket, and there's a matching one before it.

                What char is considered bracket or quote is determined by current syntax table.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-09-21"
    (interactive)
    (progn
      (backward-char)
      (mark-sexp)
      (kill-region (region-beginning) (region-end))))

  (defun xah-delete-backward-bracket-pairs ()
    "Delete the matching brackets/quotes to the left of cursor.

                After the command, mark is set at the left matching bracket position, so you can `exchange-point-and-mark' to select it.

                This command assumes the left of point is a right bracket, and there's a matching one before it.

                What char is considered bracket or quote is determined by current syntax table.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-07-02"
    (interactive)
    (let (( $p0 (point)) $p1)
      (forward-sexp -1)
      (setq $p1 (point))
      (goto-char $p0)
      (delete-char -1)
      (goto-char $p1)
      (delete-char 1)
      (push-mark (point) t)
      (setq mark-active t)
      (setq deactivate-mark nil)
      (goto-char (- $p0 2))))

  (defun xah-delete-forward-bracket-pairs ( &optional @delete-inner-text-p)
    "Delete the matching brackets/quotes to the right of cursor.
                If @delete-inner-text-p is true, also delete the inner text.

                After the command, mark is set at the left matching bracket position, so you can `exchange-point-and-mark' to select it.

                This command assumes the char to the right of point is a left bracket or quote, and have a matching one after.

                What char is considered bracket or quote is determined by current syntax table.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-07-02"
    (interactive)
    (if @delete-inner-text-p
        (progn
          (mark-sexp)
          (kill-region (region-beginning) (region-end)))
      (let (($pt (point)))
        (forward-sexp)
        (delete-char -1)
        (push-mark (point) t)
        (goto-char $pt)
        (delete-char 1)
        (setq mark-active t)
        (setq deactivate-mark nil))))

  (defun xah-delete-forward-char-or-bracket-text ()
    "weiss: change backward to forward. 
                Delete backward 1 character, but if it's a \"quote\" or bracket ()[]{}【】「」 etc, delete bracket and the inner text, push the deleted text to `kill-ring'.

                What char is considered bracket or quote is determined by current syntax table.

                If `universal-argument' is called first, do not delete inner text.

                URL `http://ergoemacs.org/emacs/emacs_delete_backward_char_or_bracket_text.html'
                Version 2017-07-02"
    (interactive)
    (if (and delete-selection-mode (region-active-p))
        (kill-region (region-beginning) (region-end))
      (cond
       ((looking-at "\\s(")
        (if current-prefix-arg
            (xah-delete-forward-bracket-pairs)
          (forward-char)
          (xah-delete-forward-bracket-text)))
       ((looking-at "\\s)")
        (progn
          (forward-char)
          ;; (backward-sexp)
          (if current-prefix-arg
              (xah-delete-backward-bracket-pairs)
            (xah-delete-backward-bracket-text))))
       ((looking-at "\\s\"")
        (if (nth 3 (syntax-ppss))
            (progn
              (forward-char)
              (if current-prefix-arg
                  (xah-delete-backward-bracket-pairs)
                (xah-delete-backward-bracket-text))
              )
          (if current-prefix-arg
              (xah-delete-forward-bracket-pairs)
            (forward-char)
            (xah-delete-forward-bracket-text))))
       (t
        (delete-char 1)))))

  (defun xah-fill-or-unfill ()
    "Reformat current paragraph or region to `fill-column', like `fill-paragraph' or “unfill”.
                  When there is a text selection, act on the selection, else, act on a text block separated by blank lines.
                  URL `http://ergoemacs.org/emacs/modernization_fill-paragraph.html'
                  Version 2017-01-08"
    (interactive)
    ;; This command symbol has a property “'compact-p”, the possible values are t and nil. This property is used to easily determine whether to compact or uncompact, when this command is called again
    (let ( ($compact-p
            (if (eq last-command this-command)
                (get this-command 'compact-p)
              (> (- (line-end-position) (line-beginning-position)) fill-column)))
           (deactivate-mark nil)
           ($blanks-regex "\n[ \t]*\n")
           $p1 $p2
           )
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (save-excursion
          (if (re-search-backward $blanks-regex nil "move")
              (progn (re-search-forward $blanks-regex)
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (if (re-search-forward $blanks-regex nil "move")
              (progn (re-search-backward $blanks-regex)
                     (setq $p2 (point)))
            (setq $p2 (point)))))
      (if $compact-p
          (fill-region $p1 $p2)
        (let ((fill-column most-positive-fixnum ))
          (fill-region $p1 $p2)))
      (put this-command 'compact-p (not $compact-p))))

  (defun xah-toggle-previous-letter-case ()
    "Toggle the letter case of the letter to the left of cursor.
                    URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
                    Version 2015-12-22"
    (interactive)
    (let ((case-fold-search nil))
      (left-char 1)
      (cond
       ((looking-at "[[:lower:]]") (upcase-region (point) (1+ (point))))
       ((looking-at "[[:upper:]]") (downcase-region (point) (1+ (point)))))
      (right-char)))

  (defun weiss-delete-parent-sexp ()
    "Keep the current sexp and delete it's parent sexp"
    (interactive)
    (let ((start-pos)
          (end-pos)
          (insert-string)
          )
      (if (use-region-p)
          (setq start-pos (region-beginning)
                end-pos (region-end))
        (setq start-pos (car (bounds-of-thing-at-point 'list))
              end-pos (cdr (bounds-of-thing-at-point 'list))))
      (setq insert-string (delete-and-extract-region start-pos end-pos))
      (delete-region (car (bounds-of-thing-at-point 'list)) (cdr (bounds-of-thing-at-point 'list)))
      (insert insert-string)))

  (defun weiss-add-parent-sexp ()
    "Wrap () to the selected region or the current sexp"
    (interactive)
    (let ((cursor-position)
          (start-pos)
          (end-pos))
      (if (use-region-p)
          (setq cursor-position (region-beginning)
                start-pos (region-beginning)
                end-pos (region-end))
        (let ((bounds (bounds-of-thing-at-point 'list)))
          (setq cursor-position (car bounds)
                start-pos (car bounds)
                end-pos (cdr bounds))))
      (insert (format "( %s)" (delete-and-extract-region start-pos end-pos)))
      (goto-char (1+ cursor-position))
      (ryo-modal-mode -1)
      ))

  (defun weiss-delete-or-add-parent-sexp ()
    "DOCSTRING"
    (interactive)
    (if current-prefix-arg
        (weiss-add-parent-sexp)
      (weiss-delete-parent-sexp)
      ))


  (defun weiss-cut-line-or-delete-region ()
    "Cut line or delete region"
    (interactive)
    (weiss-select-mode-turn-off)
    (if current-prefix-arg
        (delete-char -1)
      (xah-cut-line-or-region)))

  (defun xah-reformat-lines (&optional @length)
    "Reformat current text block into 1 long line or multiple short lines.
                      When there is a text selection, act on the selection, else, act on a text block separated by blank lines.

                      When the command is called for the first time, it checks the current line's length to decide to go into 1 line or multiple lines. If current line is short, it'll reformat to 1 long lines. And vice versa.

                      Repeated call toggles between formatting to 1 long line and multiple lines.

                      If `universal-argument' is called first, use the number value for min length of line. By default, it's 70.

                      URL `http://ergoemacs.org/emacs/emacs_reformat_lines.html'
                      Version 2019-06-09"
    (interactive)
    ;; This command symbol has a property “'is-longline-p”, the possible values are t and nil. This property is used to easily determine whether to compact or uncompact, when this command is called again
    (let* (
           (@length (if @length
                        @length
                      (if current-prefix-arg (prefix-numeric-value current-prefix-arg) fill-column )))
           (is-longline-p
            (if (eq last-command this-command)
                (get this-command 'is-longline-p)
              (> (- (line-end-position) (line-beginning-position)) @length)))
           ($blanks-regex "\n[ \t]*\n")
           $p1 $p2
           )
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (save-excursion
          (if (re-search-backward $blanks-regex nil "move")
              (progn (re-search-forward $blanks-regex)
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (if (re-search-forward $blanks-regex nil "move")
              (progn (re-search-backward $blanks-regex)
                     (setq $p2 (point)))
            (setq $p2 (point)))))
      (progn
        (if current-prefix-arg
            (xah-reformat-to-multi-lines $p1 $p2 @length)
          (if is-longline-p
              (xah-reformat-to-multi-lines $p1 $p2 @length)
            (xah-reformat-whitespaces-to-one-space $p1 $p2)))
        (put this-command 'is-longline-p (not is-longline-p)))))

  (defun xah-escape-quotes (@begin @end)
    "Replace 「\"」 by 「\\\"」 in current line or text selection.
                        See also: `xah-unescape-quotes'

                        URL `http://ergoemacs.org/emacs/elisp_escape_quotes.html'
                        Version 2017-01-11"
    (interactive
     (if (use-region-p)
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-end-position))))
    (save-excursion
      (save-restriction
        (narrow-to-region @begin @end)
        (goto-char (point-min))
        (while (search-forward "\"" nil t)
          (replace-match "\\\"" "FIXEDCASE" "LITERAL")))))


  (defun xah-clean-whitespace ()
    "Delete trailing whitespace, and replace repeated blank lines to just 1.
                          Only space and tab is considered whitespace here.
                          Works on whole buffer or text selection, respects `narrow-to-region'.

                          URL `http://ergoemacs.org/emacs/elisp_compact_empty_lines.html'
                          Version 2017-09-22"
    (interactive)
    (let ($begin $end)
      (if (region-active-p)
          (setq $begin (region-beginning) $end (region-end))
        (setq $begin (point-min) $end (point-max)))
      (save-excursion
        (save-restriction
          (narrow-to-region $begin $end)
          (progn
            (goto-char (point-min))
            (while (re-search-forward "[ \t]+\n" nil "move")
              (replace-match "\n")))
          (progn
            (goto-char (point-min))
            (while (re-search-forward "\n\n\n+" nil "move")
              (replace-match "\n\n")))
          (progn
            (goto-char (point-max))
            (while (equal (char-before) 32) ; char 32 is space
              (delete-char -1))))
        (message "white space cleaned"))))

  (defun weiss-insert-date()
    "When the time now is 0-4 AM, insert yesterday's date"
    (interactive)
    (if (weiss-is-today)
        (let ((date (format "%s%s" (- (string-to-number (format-time-string "%d")) 1) (format-time-string ".%m.%Y"))))
          (if (< (length date) 10)
              (insert (concat "0" date))
            (insert date)))
      (insert (format-time-string "%0d.%m.%Y"))))


  (defun weiss-comment-dwim ()
    "in weiss-select-mode  -> comment region
                              with prefix-arg  -> add comment at end of line and activate insert mode
                              t -> comment current line"
    (interactive)
    (if current-prefix-arg
        (progn
          (end-of-line)
          (comment-dwim nil)
          (ryo-modal-mode -1))
      (let (($lbp (line-beginning-position))
            ($lep (line-end-position)))
        (if (and (region-active-p)
                 (string-match "\n" (buffer-substring-no-properties (region-beginning) (region-end))))
            (comment-dwim nil)
          (if (eq $lbp $lep)
              (progn
                (comment-dwim nil))
            (progn
              (comment-or-uncomment-region $lbp $lep)
              (forward-line ))))
        ))
    )

  (defun xah-shrink-whitespaces ()
    "Remove whitespaces around cursor to just one, or none.

                                Shrink any neighboring space tab newline characters to 1 or none.
                                If cursor neighbor has space/tab, toggle between 1 or 0 space.
                                If cursor neighbor are newline, shrink them to just 1.
                                If already has just 1 whitespace, delete it.

                                URL `http://ergoemacs.org/emacs/emacs_shrink_whitespace.html'
                                Version 2019-06-13"
    (interactive)
    (let* (
           ($eol-count 0)
           ($p0 (point))
           $p1 ; whitespace begin
           $p2 ; whitespace end
           ($charBefore (char-before))
           ($charAfter (char-after ))
           ($space-neighbor-p (or (eq $charBefore 32) (eq $charBefore 9) (eq $charAfter 32) (eq $charAfter 9)))
           $just-1-space-p
           )
      (skip-chars-backward " \n\t　")
      (setq $p1 (point))
      (goto-char $p0)
      (skip-chars-forward " \n\t　")
      (setq $p2 (point))
      (goto-char $p1)
      (while (search-forward "\n" $p2 t )
        (setq $eol-count (1+ $eol-count)))
      (setq $just-1-space-p (eq (- $p2 $p1) 1))
      (goto-char $p0)
      (cond
       ((eq $eol-count 0)
        (if $just-1-space-p
            (xah-fly-delete-spaces)
          (progn (xah-fly-delete-spaces)
                 (insert " ")))
        )
       ((eq $eol-count 1)
        (if $space-neighbor-p
            (xah-fly-delete-spaces)
          (progn (xah-delete-blank-lines) (insert " "))))
       ((eq $eol-count 2)
        (if $space-neighbor-p
            (xah-fly-delete-spaces)
          (progn
            (xah-delete-blank-lines)
            (insert "\n"))))
       ((> $eol-count 2)
        (if $space-neighbor-p
            (xah-fly-delete-spaces)
          (progn
            (goto-char $p2)
            (search-backward "\n" )
            (delete-region $p1 (point))
            (insert "\n"))))
       (t (progn
            (message "nothing done. logic error 40873. shouldn't reach here" ))))))

  (defun xah-paste-or-paste-previous ()
    "Paste. When called repeatedly, paste previous.
                                This command calls `yank', and if repeated, call `yank-pop'.

                                When `universal-argument' is called first with a number arg, paste that many times.

                                URL `http://ergoemacs.org/emacs/emacs_paste_or_paste_previous.html'
                                Version 2017-07-25"
    (interactive)
    (progn
      (when (and delete-selection-mode (region-active-p))
        (delete-region (region-beginning) (region-end)))
      (if current-prefix-arg
          (progn
            (dotimes (_ (prefix-numeric-value current-prefix-arg))
              (yank)))
        (if (eq real-last-command this-command)
            (yank-pop 1)
          (yank)))))

  (defun weiss-delete-parent-sexp ()
    "Keep the current sexp and delete it's parent sexp"
    (interactive)
    (let ((start-pos)
          (end-pos)
          (insert-string)
          )
      (if (use-region-p)
          (setq start-pos (region-beginning)
                end-pos (region-end))
        (setq start-pos (car (bounds-of-thing-at-point 'list))
              end-pos (cdr (bounds-of-thing-at-point 'list))))
      (setq insert-string (delete-and-extract-region start-pos end-pos))
      (delete-region (car (bounds-of-thing-at-point 'list)) (cdr (bounds-of-thing-at-point 'list)))
      (insert insert-string)))

  (defun weiss-delete-forward-with-region ()
    "Like xah delete forward char or bracket text, but ignore region"
    (interactive)
    (deactivate-mark)
    (cond
     ((eq major-mode 'org-mode) 
      (while (and (string= (char-to-string (char-after)) " ")
                  (not (weiss--check-two-char t '(" ") weiss-org-special-markers)))
        (delete-char 1))
      (when (weiss--check-two-char t '(" ") weiss-org-special-markers) (forward-char))
      (if current-prefix-arg
          (weiss-delete-forward-bracket-and-mark-bracket-text-org-mode)
        (weiss-delete-forward-bracket-and-text-org-mode))
      )
     ((eq major-mode 'latex-mode)
      (while (and (string= (char-to-string (char-after)) " ")
                  (not (weiss--check-two-char t '(" ") weiss-org-special-markers)))
        (delete-char 1))
      (when (weiss--check-two-char t '(" ") weiss-org-special-markers) (forward-char))
      (weiss-delete-forward-bracket-and-mark-bracket-text-latex-mode))
     (t
      (while (string= (char-to-string (char-after)) " ") (delete-char 1))
      (xah-delete-forward-char-or-bracket-text))
     )
    )

  (defun weiss-insert-line()
    (interactive)
    (end-of-line)
    (insert "
                                      ")
    (indent-according-to-mode)
    )

  (defun weiss-before-insert-mode ()
    "if cursor is at the begining of line, then jump to the indent position. Insert space right side if with prefix-arg"
    (interactive)
    (deactivate-mark)
    (if current-prefix-arg
        (progn
          (insert " ")
          (left-char)
          )
      (when (and (eq (point) (line-beginning-position))
                 (derived-mode-p 'prog-mode))
        (indent-according-to-mode))    
      )
    )


  (defun weiss-delete-backward-with-region ()
    "Like xah delete backward char or bracket text, but ignore region"
    (interactive)
    (deactivate-mark)
    (while (string= (char-to-string (char-before)) " ") (delete-char -1))
    (cond
     ((eq major-mode 'org-mode) 
      (if current-prefix-arg
          (weiss-delete-backward-bracket-and-mark-bracket-text-org-mode)
        (weiss-delete-backward-bracket-and-text-org-mode)
        ))
     ((eq major-mode 'latex-mode)
      (weiss-delete-backward-bracket-and-mark-bracket-text-latex-mode))
     (t (xah-delete-backward-char-or-bracket-text))
     )
    )


  (defun xah-toggle-letter-case ()
    "Toggle the letter case of current word or text selection.
                                        Always cycle in this order: Init Caps, ALL CAPS, all lower.

                                        URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
                                        Version 2019-11-24"
    (interactive)
    (let (
          (deactivate-mark nil)
          $p1 $p2)
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (save-excursion
          (skip-chars-backward "0-9A-Za-z")
          (setq $p1 (point))
          (skip-chars-forward "0-9A-Za-z")
          (setq $p2 (point))))
      (when (not (eq last-command this-command))
        (put this-command 'state 0))
      (cond
       ((equal 0 (get this-command 'state))
        (upcase-initials-region $p1 $p2)
        (put this-command 'state 1))
       ((equal 1 (get this-command 'state))
        (upcase-region $p1 $p2)
        (put this-command 'state 2))
       ((equal 2 (get this-command 'state))
        (downcase-region $p1 $p2)
        (put this-command 'state 0)))))

  (defun weiss-indent-nearby-lines ()
    "DOCSTRING"
    (interactive)
    (indent-region (- (point) 20) (+ (point) 20)))

  (defun weiss-open-line-and-indent ()
    "open line and indent"
    (interactive)
    (beginning-of-line)
    (open-line 1)
    )

  (defun weiss-indent()
    (interactive)
    (if (use-region-p)
        (progn
          (indent-region (region-beginning) (region-end))
          ;; (ignore-errors (nox-format))
          )
      (cond
       ;; ((ignore-errors is-nox-activate-p)
       ;; (nox-format))
       ((eq major-mode 'mhtml-mode)
        (deactivate-mark)
        (web-beautify-html-buffer)
        )
       ((eq major-mode 'go-mode)
        (gofmt))
       ((eq major-mode 'python-mode)
        (yapfify-buffer))
       (t
        (deactivate-mark)
        (indent-region (point-min) (point-max)))
       )
      (ignore-errors (flycheck-buffer))
      ))

  (defun weiss-paste-with-linebreak()
    (interactive)
    (beginning-of-line)
    (progn
      (when (and delete-selection-mode (region-active-p))
        (delete-region (region-beginning) (region-end)))
      (if current-prefix-arg
          (progn
            ;; (open-line 1)
            (dotimes (_ (prefix-numeric-value current-prefix-arg))
              (progn (yank) (newline)) )
            ;; (yank)
            )
        (if (eq real-last-command this-command)
            (progn (yank-pop 1)) 
          (progn (open-line 1)  (yank)))))
    (if (eq major-mode 'org-mode) nil (weiss-indent))
    )


  (defun xah-cycle-hyphen-underscore-space ( &optional @begin @end )
    "Cycle {underscore, space, hyphen} chars in selection or inside quote/bracket or line.
                                            When called repeatedly, this command cycles the {“_”, “-”, “ ”} characters, in that order.

                                            The region to work on is by this order:
                                             ① if there's active region (text selection), use that.
                                             ② If cursor is string quote or any type of bracket, and is within current line, work on that region.
                                             ③ else, work on current line.

                                            URL `http://ergoemacs.org/emacs/elisp_change_space-hyphen_underscore.html'
                                            Version 2019-02-12"
    (interactive)
    ;; this function sets a property 「'state」. Possible values are 0 to length of $charArray.
    (let ($p1 $p2)
      (if (and @begin @end)
          (progn (setq $p1 @begin $p2 @end))
        (if (use-region-p)
            (setq $p1 (region-beginning) $p2 (region-end))
          (if (nth 3 (syntax-ppss))
              (save-excursion
                (skip-chars-backward "^\"")
                (setq $p1 (point))
                (skip-chars-forward "^\"")
                (setq $p2 (point)))
            (let (
                  ($skipChars
                   (if (boundp 'xah-brackets)
                       (concat "^\"" xah-brackets)
                     "^\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）")))
              (skip-chars-backward $skipChars (line-beginning-position))
              (setq $p1 (point))
              (skip-chars-forward $skipChars (line-end-position))
              (setq $p2 (point))
              (set-mark $p1)))))
      (let* (
             ($charArray ["_" "-" " "])
             ($length (length $charArray))
             ($regionWasActive-p (region-active-p))
             ($nowState
              (if (eq last-command this-command)
                  (get 'xah-cycle-hyphen-underscore-space 'state)
                0 ))
             ($changeTo (elt $charArray $nowState)))
        (save-excursion
          (save-restriction
            (narrow-to-region $p1 $p2)
            (goto-char (point-min))
            (while
                (re-search-forward
                 (elt $charArray (% (+ $nowState 2) $length))
                 ;; (concat
                 ;;  (elt $charArray (% (+ $nowState 1) $length))
                 ;;  "\\|"
                 ;;  (elt $charArray (% (+ $nowState 2) $length)))
                 (point-max)
                 "move")
              (replace-match $changeTo "FIXEDCASE" "LITERAL"))))
        (when (or (string= $changeTo " ") $regionWasActive-p)
          (goto-char $p2)
          (set-mark $p1)
          (setq deactivate-mark nil))
        (put 'xah-cycle-hyphen-underscore-space 'state (% (+ $nowState 1) $length)))))
#+end_src
**** kmacro
#+begin_src elisp
  (defvar weiss/kmacro-info nil)

  (defun weiss-call-kmacro ()
    "call kmacro once"
    (interactive)
    (weiss-before-kmacro)
    (call-interactively 'call-last-kbd-macro)
    )

  (defun weiss-call-kmacro-infinite ()
    "call kmacro up to error"
    (interactive)
    (undo-collapse-begin)
    (call-last-kbd-macro 0 #'weiss-before-kmacro)
    (undo-collapse-end)
    )

  (defun weiss-call-kmacro-dwim ()
    "DOCSTRING"
    (interactive)
    (undo-collapse-begin)
    (ignore-errors (shiftless-mode -1))
    (let ((echo-keystrokes nil)
          (single-line (eq
                        (line-number-at-pos (region-beginning))
                        (line-number-at-pos (region-end))))
          )
      (if single-line
          (call-last-kbd-macro 1 #'weiss-before-kmacro)
        (save-restriction
          (narrow-to-region (region-beginning) (region-end))
          (goto-char (point-min))
          (call-last-kbd-macro 999 #'weiss-before-kmacro)
          )
        )
      (ignore-errors (shiftless-mode 1))
      ))

  (defun weiss-before-kmacro ()
    "go next line or search word according to weiss/kmacro-info"
    (interactive)
    (cond
     ((stringp (car weiss/kmacro-info))
      (let ((p (search-forward (car weiss/kmacro-info) nil t))
            )
        (when p
          (goto-char (- p (cdr weiss/kmacro-info)))
          )
        p)
      )
     ((numberp (cdr weiss/kmacro-info))
      (forward-line 1)
      (goto-char (+ (line-beginning-position) (cdr weiss/kmacro-info)))
      (not (eq (line-end-position) (point-max)))
      )
     (t t)
     )
    )

  (defun weiss-start-kmacro ()
    "DOCSTRING"
    (interactive)
    (unless (or executing-kbd-macro defining-kbd-macro)
      (let ((current-prefix-arg)
            )
        (setq
         weiss/kmacro-info
         (if (use-region-p)
             (let ((b (region-beginning))
                   (e (region-end))
                   )
               (deactivate-mark)
               `(,(buffer-substring-no-properties b e)
                 . ,(- e (point)))
               )
           `(nil . ,(- (point) (line-beginning-position)))
           ))))
    (call-interactively 'kmacro-start-macro-or-insert-counter)
    )

  (defun weiss-end-kmacro ()
    "end kmacro and call hydra"
    (interactive)
    (when defining-kbd-macro
      (call-interactively 'kmacro-end-macro)
      )
    (hydra-kmacro/body)
    )

  (defun weiss-apply-macro-1 ()
    "apply kmacro 1 times"
    (interactive)
    (call-last-kbd-macro 1 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-2 ()
    "apply kmacro 2 times"
    (interactive)
    (call-last-kbd-macro 2 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-3 ()
    "apply kmacro 3 times"
    (interactive)
    (call-last-kbd-macro 3 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-4 ()
    "apply kmacro 4 times"
    (interactive)
    (call-last-kbd-macro 4 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-5 ()
    "apply kmacro 5 times"
    (interactive)
    (call-last-kbd-macro 5 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-6 ()
    "apply kmacro 6 times"
    (interactive)
    (call-last-kbd-macro 6 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-7 ()
    "apply kmacro 7 times"
    (interactive)
    (call-last-kbd-macro 7 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-8 ()
    "apply kmacro 8 times"
    (interactive)
    (call-last-kbd-macro 8 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-9 ()
    "apply kmacro 9 times"
    (interactive)
    (call-last-kbd-macro 9 #'weiss-before-kmacro)
    )
  (defun weiss-apply-macro-0 ()
    "apply kmacro 10 times"
    (interactive)
    (call-last-kbd-macro 10 #'weiss-before-kmacro)
    )
#+end_src
**** cursor movement
#+begin_src elisp
  (defun xah-beginning-of-line-or-block ()
    "Move cursor to beginning of line or previous paragraph.

  • When called first time, move cursor to beginning of char in current line. (if already, move to beginning of line.)
  • When called again, move cursor backward by jumping over any sequence of whitespaces containing 2 blank lines.

  URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
  Version 2018-06-04"
    (interactive)
    (let (($p (point)))
      (if (or (equal (point) (line-beginning-position))
              (eq last-command this-command))
          (if (re-search-backward "\n[\t\n ]*\n+" nil "move")
              (progn
                (skip-chars-backward "\n\t ")
                ;; (forward-char )
                )
            (goto-char (point-min)))
        (progn
          (back-to-indentation)
          (when (eq $p (point))
            (beginning-of-line))))))

  (defun xah-end-of-line-or-block ()
    "Move cursor to end of line or next paragraph.

  • When called first time, move cursor to end of line.
  • When called again, move cursor forward by jumping over any sequence of whitespaces containing 2 blank lines.

  URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
  Version 2018-06-04"
    (interactive)
    (if (or (equal (point) (line-end-position))
            (eq last-command this-command))
        (progn
          (re-search-forward "\n[\t\n ]*\n+" nil "move" ))
      (end-of-line)))

  (defvar xah-brackets nil "string of left/right brackets pairs.")
  (setq xah-brackets "()[]{}<>＜＞（）［］｛｝⦅⦆〚〛⦃⦄“”‘’‹›«»「」〈〉《》【】〔〕⦗⦘『』〖〗〘〙｢｣⟦⟧⟨⟩⟪⟫⟮⟯⟬⟭⌈⌉⌊⌋⦇⦈⦉⦊❛❜❝❞❨❩❪❫❴❵❬❭❮❯❰❱❲❳〈〉⦑⦒⧼⧽﹙﹚﹛﹜﹝﹞⁽⁾₍₎⦋⦌⦍⦎⦏⦐⁅⁆⸢⸣⸤⸥⟅⟆⦓⦔⦕⦖⸦⸧⸨⸩｟｠⧘⧙⧚⧛⸜⸝⸌⸍⸂⸃⸄⸅⸉⸊᚛᚜༺༻༼༽⏜⏝⎴⎵⏞⏟⏠⏡﹁﹂﹃﹄︹︺︻︼︗︘︿﹀︽︾﹇﹈︷︸")

  (defvar xah-left-brackets '("(" "{" "[" "<" "〔" "【" "〖" "〈" "《" "「" "『" "“" "‘" "‹" "«" )
    "List of left bracket chars.")
  (progn
    ;; make xah-left-brackets based on xah-brackets
    (setq xah-left-brackets '())
    (dotimes ($x (- (length xah-brackets) 1))
      (when (= (% $x 2) 0)
        (push (char-to-string (elt xah-brackets $x))
              xah-left-brackets)))
    (setq xah-left-brackets (reverse xah-left-brackets)))

  (defvar xah-right-brackets '(")" "]" "}" ">" "〕" "】" "〗" "〉" "》" "」" "』" "”" "’" "›" "»")
    "list of right bracket chars.")
  (progn
    (setq xah-right-brackets '())
    (dotimes ($x (- (length xah-brackets) 1))
      (when (= (% $x 2) 1)
        (push (char-to-string (elt xah-brackets $x))
              xah-right-brackets)))
    (setq xah-right-brackets (reverse xah-right-brackets)))

  (defvar xah-punctuation-regex nil "A regex string for the purpose of moving cursor to a punctuation.")
  (setq xah-punctuation-regex "[!\?\"\.,`'#$%&*+:;=@^|~]+")

  (defun xah-backward-punct (&optional n)
    "Move cursor to the previous occurrence of punctuation.
    See `xah-forward-punct'

    URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
    Version 2017-06-26"
    (interactive "p")
    (re-search-backward xah-punctuation-regex nil t n))

  (defun xah-forward-punct (&optional n)
    "Move cursor to the next occurrence of punctuation.
      The list of punctuations to jump to is defined by `xah-punctuation-regex'

      URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
      Version 2017-06-26"
    (interactive "p")
    (re-search-forward xah-punctuation-regex nil t n))

  (defun weiss-exange-point-or-beginning-of-line ()
    "if there is nothing or only one point selected, move to beginning-of-line , else exchange point"
    (interactive)
    (if (or (not (use-region-p))
            (< (- (region-end) (region-beginning)) 1)) 
        (progn
          (deactivate-mark)
          (beginning-of-line)
          (push-mark nil t)
          (back-to-indentation)
          (setq mark-active t)
          (weiss-select-mode-turn-on)
          )
      (exchange-point-and-mark)  
      )
    )

  (defun weiss-mark-brackets ()
    "DOCSTRING"
    (interactive)
    ;; (re-search-forward (regexp-opt xah-right-brackets) nil t)
    (when (eq last-command this-command)
      (when-let ((p1 (region-beginning))
                 (p2 (region-end))
                 (rb1 (save-excursion (re-search-backward (regexp-opt xah-left-brackets) nil t)))
                 )

        )
      )
    (right-char 1)
    (re-search-forward (regexp-opt xah-right-brackets) nil t)
    ;; (left-char 1)
    (push-mark nil t)
    (xah-goto-matching-bracket)
    (setq mark-active t)
    )


  (defun weiss-select-current-word ()
    "select current word, if current char is not word, backward char until it's a word"
    (interactive)
    (deactivate-mark)
    ;; (if (and (not (looking-back "\\w\\|\n")) (looking-at "\n"))
    (if (or (looking-back "\\w\\|\n") (looking-at "\\w"))
        (let ((current-point (point))
              (lbpo (line-beginning-position))
              )
          (progn
            (skip-syntax-backward "\\w" (- current-point lbpo))
            (push-mark nil t)
            (skip-syntax-forward "\\w")
            ;; (forward-word)
            (setq mark-active t))        
          )
      (progn
        ;; (message "%s" "back")
        (backward-char 1)
        (weiss-select-current-word))))


  (setq weiss-org-special-markers '("*" "/" "$"))

  (setq uppercase-alphabet '("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))


  (defvar weiss-non-stop-delimiters-list '(";" "	" " " "\n" "'" "\\"))
  (defvar weiss-stop-delimiters-list '("|" "`" ":" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "*"))

  ;; need mode-local.el
  (setq-mode-local
   python-mode
   weiss-non-stop-delimiters-list '(";" "	" " " "\n" "'" "\\")
   weiss-stop-delimiters-list '("|" "`" ":" ":" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "*"))

  (setq-mode-local
   org-mode
   weiss-non-stop-delimiters-list '("	" " " "\n" "'" "\\")
   weiss-stop-delimiters-list '("|" "`" ":" "&" ";" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "|"))

  (setq-mode-local
   latex-mode
   weiss-non-stop-delimiters-list '("	" " " "\n" "'" "\\")
   weiss-stop-delimiters-list '("|" "`" ":" "&" ";" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "*"))

  (setq-mode-local
   sgml-mode
   weiss-non-stop-delimiters-list '(";" "	" " " "\n" "'" "\\")
   weiss-stop-delimiters-list '("|" "`" ":" "<" ">" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "*"))

  (setq-mode-local
   java-mode
   weiss-non-stop-delimiters-list '("	" " " "\n" "'" "\\")
   weiss-stop-delimiters-list '("|" "`" ":" ";" "." "," "\"" "-" "+" "_" "=" "/" "@" "$" "*"))

  (defun weiss--check-two-char (isForward firstList &optional secondList)
    "Check two char"
    (interactive)
    (unless secondList (setq secondList firstList))
    (let ((firstChar)
          (secondChar))
      (if isForward
          (setq firstChar (char-to-string (char-after))
                secondChar (char-to-string (char-after (+ 1 (point)))))
        (setq firstChar (char-to-string (char-before))
              secondChar (char-to-string (char-before (- (point) 1))))
        )
      (and (member firstChar firstList) (member secondChar secondList))
      ;; (message "1:%s 2:%s" firstChar secondChar)
      ))


  (defun weiss-right-key ()
    "smart decide whether move by word or by char"
    (interactive)
    (if current-prefix-arg
        (progn
          (setq current-prefix-arg nil)
          (unless (use-region-p) (push-mark nil t))
          (weiss-select-mode-turn-on)
          (forward-char)
          (setq mark-active t))

      (weiss-forward-and-select-word)))

  (defun weiss-left-key ()
    "smart decide whether move by word or by char"
    (interactive)
    (if current-prefix-arg
        (progn
          (setq current-prefix-arg nil)
          (unless (use-region-p) (push-mark nil t))
          (backward-char)
          (setq mark-active t)
          (weiss-select-mode-turn-on))    
      (weiss-backward-and-select-word)
      ))

  (defun weiss-forward-and-select-word ()
    "Forward and select word, if in quote, then select all"
    (interactive)
    (deactivate-mark)
    (let ((l (line-number-at-pos))
          (p (point))
          )
      (save-excursion
        (while (or (member (char-to-string (char-after)) (append
                                                          weiss-non-stop-delimiters-list
                                                          xah-right-brackets))
                   (weiss--check-two-char t xah-left-brackets))
          (forward-char))
        (when (member (char-to-string (char-after)) (append
                                                     xah-left-brackets
                                                     xah-right-brackets
                                                     weiss-non-stop-delimiters-list
                                                     weiss-stop-delimiters-list))
          (forward-char))
        (when (= l (line-number-at-pos))
          (setq p (point))
          )
        )    
      (goto-char p)
      )
    ;; (call-interactively 'set-mark-command)
    (push-mark nil t)
    (while (member (char-to-string (char-after)) uppercase-alphabet) (forward-char))

    (while (not (member (char-to-string (char-after)) (append
                                                       uppercase-alphabet
                                                       xah-left-brackets
                                                       xah-right-brackets
                                                       weiss-non-stop-delimiters-list
                                                       weiss-stop-delimiters-list)))
      (forward-char))
    (setq mark-active t))

  (defun weiss-backward-and-select-word ()
    "Backward and select word"
    (interactive)
    (deactivate-mark)
    (setq case-fold-search t)
    (let ((l (line-number-at-pos))
          (p (point))
          )
      (save-excursion
        (while (or (member (char-to-string (char-before)) (append
                                                           weiss-non-stop-delimiters-list
                                                           xah-left-brackets))
                   (weiss--check-two-char nil xah-right-brackets)
                   )
          (backward-char))
        (when (member (char-to-string (char-before)) (append
                                                      xah-left-brackets
                                                      xah-right-brackets
                                                      weiss-non-stop-delimiters-list
                                                      weiss-stop-delimiters-list))
          (backward-char))   
        (when (= l (line-number-at-pos))
          (setq p (point))
          )
        )
      (goto-char p)
      )
    (push-mark nil t)

    (while (member (char-to-string (char-before)) uppercase-alphabet) (backward-char))

    (while (or (not (member (char-to-string (char-before)) (append
                                                            uppercase-alphabet
                                                            xah-left-brackets
                                                            xah-right-brackets
                                                            weiss-non-stop-delimiters-list
                                                            weiss-stop-delimiters-list)))
               ;; (weiss--check-two-char nil '("" ";" ))
               )
      (backward-char))
    (when (member  (char-to-string (char-before)) uppercase-alphabet)(backward-char))
    (setq mark-active t)
    )

  (defun weiss-down-key ()
    "DOCSTRING"
    (interactive)
    (if current-prefix-arg
        (move-line-down)
      (weiss-next-line-and-select-current-word)      
      )
    )

  (defun weiss-up-key ()
    "DOCSTRING"
    (interactive)
    (if current-prefix-arg
        (move-line-up)
      (weiss-previous-line-and-select-current-word)      
      )
    )

  (defun weiss-next-line-and-select-current-word ()
    "weiss next line and select current word"
    (interactive)
    (deactivate-mark)
    (let ((line-number (line-number-at-pos)))
      (next-line)
      (unless (eq line-number (line-number-at-pos))
        (weiss-select-current-word) 
        )
      )
    )

  (defun weiss-previous-line-and-select-current-word ()
    "weiss previous line and select current word"
    (interactive)
    (deactivate-mark)
    (previous-line)
    (weiss-select-current-word)
    )


  (defun xah-backward-left-bracket ()
    "Weiss: move cursor to the right of left bracket, because i have two delete keys
                  Move cursor to the previous occurrence of left bracket.
                  The list of brackets to jump to is defined by `xah-left-brackets'.
                  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
                  Version 2015-10-01"
    (interactive)
    (unless (use-region-p) (call-interactively 'set-mark-command))
    (backward-char )
    (re-search-backward (regexp-opt xah-left-brackets) nil t)
    (forward-char )
    )

  (defun xah-forward-right-bracket ()
    "Weiss: move cursor to the left of right bracket, because i have two delete keys
                Move cursor to the next occurrence of right bracket.
                The list of brackets to jump to is defined by `xah-right-brackets'.
                URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
                Version 2015-10-01"
    (interactive)
    (unless (use-region-p) (call-interactively 'set-mark-command))
    (forward-char)
    (let ((forward-search-symbols (append (list "\n" ";") xah-right-brackets)))
      (re-search-forward (regexp-opt forward-search-symbols) nil t) 
      )
    (backward-char)
    )

  (defun weiss-mark-brackets ()
    "mark the nearst brackets"
    (interactive)
    (deactivate-mark)
    (cond
     ((eq last-command this-command)
      (backward-up-list 1 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)
      (push-mark nil t)
      (forward-sexp)    
      )
     ((looking-at (regexp-opt xah-left-brackets))
      (push-mark nil t)
      (forward-sexp))
     ((looking-back (regexp-opt xah-right-brackets) (max (- (point) 1) 1))
      (push-mark nil t)
      (backward-sexp))
     (t
      (backward-up-list 1 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)
      (push-mark nil t)
      (forward-sexp)
      ))
    (setq mark-active t)
    )


#+end_src
**** buffer/frame switching
#+begin_src elisp
  (defvar weiss-right-frame-pos 1690 "the position of left bord of right frame")
  (defvar weiss-is-laptop nil)

  ;; (car (frame-edges))
  ;; (frame-width)
  ;; (frame-height)

  (defvar weiss-desktop-left-frame-alist
    '((tool-bar-lines . 0)
      (width . 104) ; chars
      (height . 48) ; lines
      (left . 1680)
      (top . 0)))

  (defvar weiss-desktop-right-frame-alist
    '((tool-bar-lines . 0)
      (width . 104) ; chars
      (height . 48) ; lines
      (left . 2639)
      (top . 0)))

  (defvar weiss-laptop-left-frame-alist
    '((tool-bar-lines . 0)
      (width . 104) ; chars
      (height . 48) ; lines
      (left . 0)
      (top . 0)))

  (defvar weiss-laptop-right-frame-alist
    '((tool-bar-lines . 0)
      (width . 104) ; chars
      (height . 48) ; lines
      (left . 840)
      (top . 0)))

  (advice-add 'weiss-new-frame :after (lambda () (interactive) (weiss-update-top-windows t)))

  (defun weiss-new-frame ()
    "make new frame on the same side of current frame or on the other side with prefix-arg"
    (interactive)
    (if (eq (weiss-is-frame-in-right-pos) (null current-prefix-arg))
        (make-frame initial-frame-alist)
      (make-frame default-frame-alist)
      )
    )

  (defun weiss-delete-other-window ()
    "If the current buffer ist org src file, switch between maximize window size(but not delete other windows) and half window size, else delete other windows"
    (interactive)
    (if (string-prefix-p "*Org Src " (buffer-name))
        (if (< (/ (frame-height) (nth 1 (window-edges))) 3)
            (maximize-window)
          (balance-windows)  
          )
      (delete-other-windows)
      )
    )

  (defun weiss-switch-laptop-and-desktop ()
    "DOCSTRING"
    (interactive)
    (if weiss-is-laptop
        (setq weiss-right-frame-pos 835
              default-frame-alist weiss-laptop-left-frame-alist
              initial-frame-alist weiss-laptop-right-frame-alist)  
      (setq weiss-right-frame-pos 1690
            default-frame-alist weiss-desktop-left-frame-alist
            initial-frame-alist weiss-desktop-right-frame-alist)  
      )
    (setq weiss-is-laptop (not weiss-is-laptop))
    )

  (defun weiss-is-frame-in-right-pos (&optional frame)
    "check if the current is on the right side"
    (interactive)  
    (> (car (frame-edges frame)) weiss-right-frame-pos)
    )

  (defun weiss--select-frame-with-check (frame)
    (let ((frames (visible-frame-list)))
      (if (member frame frames)
          (progn
            (select-frame-set-input-focus frame)
            (weiss-update-top-windows t)
            t
            )      
        (weiss-update-top-windows)
        nil
        )  
      )
    )

  (defun weiss--find-frame (right &optional exclude-list)
    "DOCSTRING"
    (let ((current-frame (selected-frame))
          (target-frame (selected-frame))
          )
      (setq target-frame (next-frame target-frame))
      (while (not (or
                   (eq current-frame target-frame)
                   (and
                    (frame-live-p target-frame)                  
                    (frame-visible-p target-frame)                  
                    (or (not exclude-list) (not (member target-frame exclude-list))) 
                    (or (and right (weiss-is-frame-in-right-pos target-frame))
                        (and (not right) (not (weiss-is-frame-in-right-pos target-frame)))
                        )
                    )))
        ;; (message "%s" target-frame)
        (setq target-frame (next-frame target-frame)))    
      target-frame
      )
    )

  (defun weiss--switch-to-right-or-left-frame (right &optional exclude-list)
    "DOCSTRING"
    (setq target-frame (weiss--find-frame right exclude-list))
    (weiss-update-top-windows t)
    (select-frame-set-input-focus target-frame)
    (weiss-update-top-windows t)
    )

  (defun weiss-switch-to-right-frame () (interactive) (weiss--switch-to-right-or-left-frame t))
  (defun weiss-switch-to-left-frame () (interactive) (weiss--switch-to-right-or-left-frame nil))


  (defun weiss-update-otherside-top-window ()
    "DOCSTRING"
    (interactive)
    (let ((is-right (weiss-is-frame-in-right-pos))
          (target-frame))
      (setq target-frame (weiss--find-frame (not is-right)))    
      (if is-right
          (progn
            (if (weiss-is-frame-in-right-pos target-frame)
                (setq weiss-left-top-window nil)
              (setq weiss-left-top-window target-frame)  
              )
            )
        (if (weiss-is-frame-in-right-pos target-frame)
            (setq weiss-right-top-window target-frame)
          (setq weiss-right-top-window nil)  
          )            
        )
      ))

  (defun weiss-update-top-windows (&optional shallow-update)
    "update the top window"
    (interactive)
    (let ((current-frame (selected-frame)))
      (if (weiss-is-frame-in-right-pos)
          (setq weiss-right-top-window current-frame)
        (setq weiss-left-top-window current-frame)      
        )
      (unless shallow-update (weiss-update-otherside-top-window))    
      ))

  (defun weiss-switch-to-otherside-top-frame ()
    "DOCSTRING"
    (interactive)
    (let ((current-frame (selected-frame)))
      (cond
       ((and (not (weiss-is-frame-in-right-pos)) (eq current-frame weiss-left-top-window)) (unless (weiss--select-frame-with-check weiss-right-top-window) (weiss--select-frame-with-check weiss-right-top-window)))
       ((and (weiss-is-frame-in-right-pos) (eq current-frame weiss-right-top-window)) (unless (weiss--select-frame-with-check weiss-left-top-window) (weiss--select-frame-with-check weiss-left-top-window)))
       ((weiss-is-frame-in-right-pos)
        (weiss-update-top-windows)
        (weiss--select-frame-with-check weiss-left-top-window))
       (t
        (weiss-update-top-windows)
        (weiss--select-frame-with-check weiss-right-top-window))
       ) 
      )
    )

  (defun weiss-switch-to-same-side-frame ()
    "DOCSTRING"
    (interactive)
    (let ((current-frame (selected-frame))) 
      (if (weiss-is-frame-in-right-pos)
          (weiss--switch-to-right-or-left-frame t (list current-frame))
        (weiss--switch-to-right-or-left-frame nil (list current-frame))    
        ))  
    )

  (defun weiss-switch-buffer-or-otherside-frame-without-top ()
    "DOCSTRING"
    (interactive)
    (if (one-window-p)
        (progn
          (weiss-switch-to-otherside-top-frame)
          (weiss-switch-to-same-side-frame)  
          )
      (other-window 1)
      )
    )

  (defun get-frame-name (&optional frame)
    "Return the string that names FRAME (a frame).  Default is selected frame."
    (unless frame (setq frame (selected-frame)))
    (if (framep frame)
        (cdr (assq 'name (frame-parameters frame)))
      (error "Function `get-frame-name': Argument not a frame: `%s'" frame)))

  (defun get-a-frame (frame)
    "Return a frame, if any, named FRAME (a frame or a string).
    If none, return nil.
    If FRAME is a frame, it is returned."
    (cond ((framep frame) frame)
          ((stringp frame)
           (catch 'get-a-frame-found
             (dolist (fr (frame-list))
               (when (string= frame (get-frame-name fr))
                 (throw 'get-a-frame-found fr)))
             nil))
          (t (error
              "Function `get-frame-name': Arg neither a string nor a frame: `%s'"
              frame))))
#+end_src

#+RESULTS:
: weiss-switch-buffer-or-otherside-frame-without-top
**** weiss-buffer-frame-change-hook
#+begin_src elisp 
  (defun weiss-after-change-frame-or-window (&optional a b c)
    "run after change frame or window"
    (interactive)
    (dolist (x weiss/after-buffer-change-function-list)
      (eval (list x))
      )
    )

  (let ((function-list '(
                         select-frame-set-input-focus
                         previous-buffer
                         next-buffer
                         switch-to-buffer
                         other-window
                         find-file
                         org-open-file
                         dired-goto-file
                         org-agenda-finalize
                         wdired-finish-edit
                         )))
    (dolist (x function-list)
      (advice-add x :after #'weiss-after-change-frame-or-window)
      )
    )

  (defun weiss-after-major-mode ()
    "run after new major mode"
    (interactive)
    (dolist (x weiss/after-major-mode-function-list)
      (eval (list x))
      )
    )

  (let ((hook-list '(
                     prog-mode-hook
                     text-mode-hook
                     fundamental-mode-hook
                     dired-mode-hook
                     wdired-mode-hook
                     special-mode-hook
                     conf-mode-hook
                     quickrun-after-run-hook
                     custom-mode-hook
                     )))
    (dolist (x hook-list)
      (add-hook x 'weiss-after-major-mode))
    )
#+end_src
**** select
#+begin_src elisp
  (defun weiss-deactivate-mark ()
    "DOCSTRING"
    (interactive)
    (setq saved-region-selection nil)
    (let (select-active-regions)
      (deactivate-mark)))

  (defun weiss-expand-region-by-word ()
    "expand region word by word on the same side of cursor"
    (interactive)
    (if current-prefix-arg
        (insert " ")
      (if (eq (point) (region-beginning))
          (backward-word)
        (forward-word))        
      )
    )

  (defun weiss-contract-region-by-word ()
    "expand region word by word on the same side of cursor"
    (interactive)
    (if (eq (point) (region-beginning))
          (forward-word)
        (backward-word))
    ) 

  (defun weiss-select-line-downward ()
    "Select current line. If current line is in region && cursor at region-end, extend selection downward by line."
    (interactive)
    (weiss-select-mode-turn-on)
    (if (and (region-active-p)
             (>= (line-beginning-position) (region-beginning))
             (eq (point) (line-end-position)))
        (progn
          (forward-line 1)
          (end-of-line))
      (progn
        (end-of-line)
        (set-mark (line-beginning-position)))))

  (defun weiss-select-sexp ()
    "select single sexp first and select the next wenn you call this function again"
    (interactive)
    (if (and (use-region-p)
             (not (ignore-errors (bounds-of-thing-at-point 'list))))
        (progn
          (skip-syntax-forward " <>
            ")
          ;; skip the comment
          (while (string-match "^;+.*" (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
            (next-line))
          (while (ignore-errors (setq bounds (bounds-of-thing-at-point 'list)))
            (goto-char (cdr bounds))
            ))
      (weiss-select-single-sexp)
      )
    )

  (defun weiss-select-single-sexp ()
    "select the biggest sexp and copy"
    (interactive)
    ;; It seems like that bounds-of-thing-at-point habe some problems with quote
    ;; (while (looking-at "[ \"]") (forward-char))
    (deactivate-mark)
    (skip-syntax-forward "\" <>
    ")
    (let ((bounds-temp)
          (bounds))
      (while (ignore-errors (setq bounds-temp (bounds-of-thing-at-point 'list)))
        (setq bounds bounds-temp)
        (goto-char (cdr bounds))
        (when (looking-at "[ \"]") (forward-char))
        )
      (push-mark (car bounds) t t)
      (setq mark-active t)
      (kill-new (buffer-substring-no-properties (region-beginning) (region-end)))
      ))

  (defun xah-select-text-in-quote ()
    "Select text between the nearest left and right delimiters.
    Delimiters here includes the following chars: '\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）
    This command select between any bracket chars, not the inner text of a bracket. For example, if text is

     (a(b)c▮)

     the selected char is “c”, not “a(b)c”.

    URL `http://ergoemacs.org/emacs/modernization_mark-word.html'
    Version 2018-10-11"
    (interactive)
    (let (
          ($skipChars "^'\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）〘〙")
          $p1
          )
      (skip-chars-backward $skipChars)
      (setq $p1 (point))
      (skip-chars-forward $skipChars)
      (set-mark $p1)))

#+end_src
**** save/open/new/copy
#+begin_src elisp
  (defun xah-make-backup ()
    "Make a backup copy of current file or dired marked files.
  If in dired, backup current file or marked files.
  The backup file name is in this format
   x.html~2018-05-15_133429~
   The last part is hour, minutes, seconds.
  in the same dir. If such a file already exist, it's overwritten.
  If the current buffer is not associated with a file, nothing's done.

  URL `http://ergoemacs.org/emacs/elisp_make-backup.html'
  Version 2018-06-06"
    (interactive)
    (let (($fname (buffer-file-name))
          ($date-time-format "%Y-%m-%d_%H%M%S"))
      (if $fname
          (let (($backup-name
                 (concat $fname "~" (format-time-string $date-time-format) "~")))
            (copy-file $fname $backup-name t)
            (message (concat "Backup saved at: " $backup-name)))
        (if (eq major-mode 'dired-mode)
            (progn
              (mapc (lambda ($x)
                      (let (($backup-name
                             (concat $x "~" (format-time-string $date-time-format) "~")))
                        (copy-file $x $backup-name t)))
                    (dired-get-marked-files))
              (revert-buffer))
          (user-error "buffer not file nor dired")))))

  (defun weiss-kill-append ()
    "append region to kill-ring"
    (interactive)
    (when (use-region-p)
      (let ((rbeg (region-beginning))
            (rend (region-end))
            )
        (kill-append (buffer-substring-no-properties rbeg rend) nil)
        )))

  (defun weiss-exchange-region-kill-ring-car ()
    "insert pop current kill-ring and kill region"
    (interactive)
    (when (use-region-p)
      (when-let ((rbeg (region-beginning))
                 (rend (region-end))
                 (rep (pop kill-ring))
                 )
        (push (delete-and-extract-region rbeg rend) kill-ring)
        (insert rep)
        )
      )
    )

  (defun xah-make-backup-and-save ()
    "Backup of current file and save, or backup dired marked files.
  For detail, see `xah-make-backup'.
  If the current buffer is not associated with a file nor dired, nothing's done.
  URL `http://ergoemacs.org/emacs/elisp_make-backup.html'
  Version 2015-10-14"
    (interactive)
    (if (buffer-file-name)
        (progn
          (xah-make-backup)
          (when (buffer-modified-p)
            (save-buffer)))
      (progn
        (xah-make-backup))))

  (defun xah-clear-register-1 ()
    "Clear register 1.
    See also: `xah-paste-from-register-1', `copy-to-register'.

    URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
    Version 2015-12-08"
    (interactive)
    (progn
      (copy-to-register ?1 (point-min) (point-min))
      (message "Cleared register 1.")))

  (defun xah-copy-to-register-1 ()
    "Copy current line or text selection to register 1.
    See also: `xah-paste-from-register-1', `copy-to-register'.

    URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
    Version 2017-01-23"
    (interactive)
    (let ($p1 $p2)
      (if (region-active-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (setq $p1 (line-beginning-position) $p2 (line-end-position)))
      (copy-to-register ?1 $p1 $p2)
      (message "Copied to register 1: 「%s」." (buffer-substring-no-properties $p1 $p2))))

  (defun xah-append-to-register-1 ()
    "Append current line or text selection to register 1.
    When no selection, append current line, with newline char.
    See also: `xah-paste-from-register-1', `copy-to-register'.

    URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
    Version 2015-12-08"
    (interactive)
    (let ($p1 $p2)
      (if (region-active-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (setq $p1 (line-beginning-position) $p2 (line-end-position)))
      (append-to-register ?1 $p1 $p2)
      (with-temp-buffer (insert "\n")
                        (append-to-register ?1 (point-min) (point-max)))
      (message "Appended to register 1: 「%s」." (buffer-substring-no-properties $p1 $p2))))

  (defun xah-paste-from-register-1 ()
    "Paste text from register 1.
    See also: `xah-copy-to-register-1', `insert-register'.
    URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
    Version 2015-12-08"
    (interactive)
    (when (use-region-p)
      (delete-region (region-beginning) (region-end)))
    (insert-register ?1 t))


  (defun xah-copy-line-or-region ()
    "Copy current line, or text selection.
              When called repeatedly, append copy subsequent lines.
              When `universal-argument' is called first, copy whole buffer (respects `narrow-to-region').

              URL `http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html'
              Version 2019-10-30"
    (interactive)
    (let ((inhibit-field-text-motion nil))
      (if current-prefix-arg
          (progn
            (let (
                  (current-point (point))
                  (line (if weiss-select-mode
                            (concat (buffer-substring-no-properties (region-beginning) (region-end)) "\n")  
                          (buffer-substring-no-properties (line-beginning-position)(line-beginning-position 2))))
                  (times  current-prefix-arg))
              (when weiss-select-mode
                (goto-char (region-end))
                (forward-line)
                (beginning-of-line)
                (open-line 1))
              (if (eq times 1)
                  (setq times 4)
                (ignore-errors (when (member 4 times) (setq times 1)))
                )
              ;; (message "%s" times)
              (beginning-of-line)
              ;; (open-line 1)
              (dotimes (i times)
                ;; (next-line)
                (insert line)
                )
              (indent-region current-point (point))
              )          
            )
        (if (use-region-p)
            (progn
              (copy-region-as-kill (region-beginning) (region-end)))
          (if (eq last-command this-command)
              (if (eobp)
                  (progn )
                (progn
                  (kill-append "\n" nil)
                  (kill-append
                   (buffer-substring-no-properties (line-beginning-position) (line-end-position))
                   nil)
                  (progn
                    (end-of-line)
                    (forward-char))))
            (if (eobp)
                (if (eq (char-before) 10 )
                    (progn )
                  (progn
                    (copy-region-as-kill (line-beginning-position) (line-end-position))
                    (end-of-line)))
              (progn
                (copy-region-as-kill (line-beginning-position) (line-end-position))
                (end-of-line)
                (forward-char))))))))

  (defun xah-copy-file-path (&optional @dir-path-only-p)
    "Copy the current buffer's file path or dired path to `kill-ring'.
      Result is full path.
      If `universal-argument' is called first, copy only the dir path.

      If in dired, copy the file/dir cursor is on, or marked files.

      If a buffer is not file and not dired, copy value of `default-directory' (which is usually the “current” dir when that buffer was created)

      URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
      Version 2018-06-18"
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if @dir-path-only-p
           (progn
             (message "Directory copied: %s" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: %s" $fpath)
           $fpath )))))

  (defun weiss-save-current-content ()
    "save current content in temp buffer"
    (interactive)
    (let ((current-buffer-content (buffer-string))
          (current-buffer-name (buffer-name))
          )
      (setq newBuf (generate-new-buffer (format "backup_%s" current-buffer-name)))
      (set-buffer newBuf)
      (insert current-buffer-content)
      (when (eq major-mode 'help-mode) (quit-window))
      ))

  (defun xah-new-empty-buffer ()
    "Create a new empty buffer.
      New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc.

      It returns the buffer (for elisp programing).

      URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
      Version 2017-11-01"
    (interactive)
    (let (($buf (generate-new-buffer "untitled")))
      (switch-to-buffer $buf)
      (funcall initial-major-mode)
      (setq buffer-offer-save t)
      $buf
      ))

  (defun xah-open-in-external-app (&optional @fname)
    "Open the current file or dired marked files in external app.
      The app is chosen from your OS's preference.

      When called in emacs lisp, if @fname is given, open that.

      URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
      Version 2019-11-04"
    (interactive)
    (unless (eq major-mode 'dired-mode)
      (save-buffer))  
    (let* (
           ($file-list
            (if @fname
                (progn (list @fname))
              (if (string-equal major-mode "dired-mode")
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
           ($do-it-p (if (<= (length $file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when $do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda ($fpath)
             (w32-shell-execute "open" $fpath)) $file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda ($fpath)
             (shell-command
              (concat "open " (shell-quote-argument $fpath))))  $file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda ($fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" $fpath))) $file-list))))))

  (defun xah-open-file-at-cursor ()
    "Open the file path under cursor.
      If there is text selection, uses the text selection for path.
      If the path starts with “http://”, open the URL in browser.
      Input path can be {relative, full path, URL}.
      Path may have a trailing “:‹n›” that indicates line number, or “:‹n›:‹m›” with line and column number. If so, jump to that line number.
      If path does not have a file extension, automatically try with “.el” for elisp files.
      This command is similar to `find-file-at-point' but without prompting for confirmation.

      URL `http://ergoemacs.org/emacs/emacs_open_file_path_fast.html'
      Version 2019-07-16"
    (interactive)
    (let* (
           ($inputStr
            (if (use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (let ($p0 $p1 $p2
                        ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
                        ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
                (setq $p0 (point))
                (skip-chars-backward $pathStops)
                (setq $p1 (point))
                (goto-char $p0)
                (skip-chars-forward $pathStops)
                (setq $p2 (point))
                (goto-char $p0)
                (buffer-substring-no-properties $p1 $p2))))
           ($path
            (replace-regexp-in-string
             "^file:///" "/"
             (replace-regexp-in-string
              ":\\'" "" $inputStr))))
      (if (string-match-p "\\`https?://" $path)
          (if (fboundp 'xahsite-url-to-filepath)
              (let (($x (xahsite-url-to-filepath $path)))
                (if (string-match "^http" $x )
                    (browse-url $x)
                  (find-file $x)))
            (progn (browse-url $path)))
        (progn ; not starting “http://”
          (if (string-match "#" $path )
              (let (
                    ( $fpath (substring $path 0 (match-beginning 0)))
                    ( $fractPart (substring $path (match-beginning 0))))
                (if (file-exists-p $fpath)
                    (progn
                      (find-file $fpath)
                      (goto-char 1)
                      (search-forward $fractPart ))
                  (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                    (find-file $fpath))))
            (if (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\(:[0-9]+\\)?\\'" $path)
                (let (
                      ($fpath (match-string 1 $path))
                      ($line-num (string-to-number (match-string 2 $path))))
                  (if (file-exists-p $fpath)
                      (progn
                        (find-file $fpath)
                        (goto-char 1)
                        (forward-line (1- $line-num)))
                    (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                      (find-file $fpath))))
              (if (file-exists-p $path)
                  (progn ; open f.ts instead of f.js
                    (let (($ext (file-name-extension $path))
                          ($fnamecore (file-name-sans-extension $path)))
                      (if (and (string-equal $ext "js")
                               (file-exists-p (concat $fnamecore ".ts")))
                          (find-file (concat $fnamecore ".ts"))
                        (find-file $path))))
                (if (file-exists-p (concat $path ".el"))
                    (find-file (concat $path ".el"))
                  (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
                    (find-file $path ))))))))))
#+end_src
**** keybinding
#+begin_src elisp 
  (defun weiss-overriding-ryo-define-key (keymap key-cmd-list fun)
    (interactive)
    (mapc
     (lambda (cmd-key)
       (let ((cmd (nth 1 cmd-key))
             (key (nth 0 cmd-key))
             )
         (define-key keymap (kbd key)
           `(menu-item "" ,cmd
                       :filter ,fun)
           )
         )
       )
     key-cmd-list)
    )

  (defmacro weiss-overriding-ryo-push-map (mode keymap)
    `(progn
       (setq minor-mode-overriding-map-alist (assq-delete-all ',mode minor-mode-overriding-map-alist))
       (push '(,mode . ,(symbol-value keymap)) minor-mode-overriding-map-alist)
       )
    )
#+end_src
**** misc
#+begin_src elisp
  (defun weiss-is-today ()
    "return `t' if now is before 4AM"
    (< (string-to-number (format-time-string "%H")) 4)
    )

  ;; comes from https://stackoverflow.com/questions/14489848/emacs-name-of-current-local-keymap
  (defun keymap-symbol (keymap)
    "Return the symbol to which KEYMAP is bound, or nil if no such symbol exists."
    (catch 'gotit
      (mapatoms (lambda (sym)
                  (and (boundp sym)
                       (eq (symbol-value sym) keymap)
                       (not (eq sym 'keymap))
                       (throw 'gotit sym))))))

  ;; undo-collapse comes from
  ;; https://emacs.stackexchange.com/questions/7558/how-to-collapse-undo-history
  (defun undo-collapse-begin ()
    "push a mark that do nothing to the undo list"
    (push (list 'apply 'identity nil) buffer-undo-list))

  (defun undo-collapse-end ()
    "Collapse undo history until a matching marker."
    (let ((marker (list 'apply 'identity nil)))
      (cond
       ((equal (car buffer-undo-list) marker)
        (setq buffer-undo-list (cdr buffer-undo-list))
        ;; (message "success, car")
        )   
       (t
        (let ((l buffer-undo-list)
              (limit 0))
          (while (and (not (equal (cadr l) marker))
                      )
            (setq limit (1+ limit))
            (cond
             ((null (cdr l))
              (error "undo-collapse-end with no matching marker"))
             ((null (cadr l))
              (setf (cdr l) (cddr l)))
             (t (setq l (cdr l)))))
          (setf (cdr l) (cddr l))
          ))) 
      ))


  (defmacro with-undo-collapse (&rest body)
    "Execute body, then collapse any resulting undo boundaries."
    (declare (indent 0))
    (let ((buffer-var (make-symbol "buffer")))
      `(let ((,buffer-var (current-buffer)))
         (unwind-protect
             (progn
               (undo-collapse-begin)
               ,@body)
           (with-current-buffer ,buffer-var
             (undo-collapse-end))))))


  (defun read-char-picky (prompt chars &optional inherit-input-method seconds)
    "Read characters like in `read-char-exclusive', but if input is
    not one of CHARS, return nil.  CHARS may be a list of characters,
    single-character strings, or a string of characters."
    (let ((chars (mapcar (lambda (x)
                           (if (characterp x) x (string-to-char x)))
                         (append chars nil)))
          (char  (read-char-exclusive prompt inherit-input-method seconds)))
      (when (memq char chars)
        (char-to-string char))))

  (defun weiss-read-char-picky-from-list (picky-list)
    "Get the inputed number and return the nth element of list"
    (interactive)
    (let ((ra "")
          (rb ""))
      (nth (- (string-to-number (read-char-picky
                                 (dotimes (i (length picky-list) ra) (setq ra (format "%s %s:%s" ra (1+ i) (nth i picky-list))))
                                 (dotimes (i (length picky-list) rb) (setq rb (format "%s%s" rb (1+ i)))))) 1) picky-list)))

  (defun weiss-eval-last-sexp-this-line()
    "eval last sexp this line"
    (interactive)
    (end-of-line)
    (eval-last-sexp()))

  (defun weiss-universal-argument ()
    "Simulate C-u"
    (interactive)
    (if current-prefix-arg
        (call-interactively 'universal-argument-more)
      (universal-argument)  
      )
    )

  (defun weiss-show-all-major-mode ()
    "Show all major mode and it's parent mode"
    (interactive)
    (let ((mode major-mode)
          parents)
      (while mode
        (setq parents (cons mode parents)
              mode (get mode 'derived-mode-parent)))
      (message "%s" (reverse parents)))
    )

  (defun xah-show-kill-ring ()
    "Insert all `kill-ring' content in a new buffer named *copy history*.

  URL `http://ergoemacs.org/emacs/emacs_show_kill_ring.html'
  Version 2019-12-02"
    (interactive)
    (let (($buf (generate-new-buffer "*copy history*")))
      (progn
        (switch-to-buffer $buf)
        (funcall 'fundamental-mode)
        (dolist (x kill-ring )
          (insert x "\n\nhh=============================================================================\n\n"))
        (goto-char (point-min)))))

  (defun weiss-refresh ()
    "let flycheck refresh"
    (interactive)
    (save-buffer)
    (when flycheck-mode (flycheck-buffer))
    )

  (defun weiss-call-kmacro-multi-times ()
    "DOCSTRING"
    (interactive)
    (let ((times (string-to-number (read-string (format "Repeat Times: ") nil nil nil))))
      (dotimes (i times)
        (next-line)
        (call-last-kbd-macro)
        )
      ))


  (defun weiss-execute-buffer ()
    "If the current buffer is elisp mode, then eval-buffer, else quickrun"
    (interactive)
    (save-buffer)
    (cond
     ((or (eq major-mode 'xah-elisp-mode) (eq major-mode 'emacs-lisp-mode)) (eval-buffer))
     ((string= (file-name-directory (buffer-file-name)) "/home/weiss/KaRat/datenbank/")
      (message "compile: %s" (shell-command-to-string "javac -Werror -cp '.:commons-io-2.8.0.jar' QuizzesSearch.java"))
      (message "output: %s" (shell-command-to-string "java -cp postgresql-42.2.18.jar:commons-io-2.8.0.jar:. QuizzesSearch"))
      )
     ((string-prefix-p "/home/weiss/KaRat/datenbank/KaRat-Quizzes/" (file-name-directory (buffer-file-name)))
      ;; (message ": %s" 123)
      (message "%s" (shell-command-to-string "go run /home/weiss/KaRat/datenbank/KaRat-Quizzes/main.go -tomlPath=/home/weiss/KaRat/datenbank/KaRat-Quizzes/input.toml"))
      )
     (t (quickrun))
     )
    )


  (defun weiss--execute-kbd-macro (kbd-macro)
    "Execute KBD-MACRO."
    (when-let ((cmd (key-binding (read-kbd-macro kbd-macro))))
      (call-interactively cmd)))

#+end_src
**** end
#+begin_src elisp
  (provide 'weiss-keybinding-functions)
#+end_src
** Keybinding
*** general

#+begin_src elisp
  (define-key prog-mode-map (kbd "<tab>") 'weiss-indent)
  (with-eval-after-load 'latex-mode
    (define-key latex-mode-map (kbd "<tab>") 'weiss-indent)
    (define-key LaTeX-mode-map (kbd "<tab>") 'weiss-indent)
    )

  (with-eval-after-load 'sgml-mode
    (define-key sgml-mode-map (kbd "<tab>") 'weiss-indent)
    )
  (global-set-key (kbd "<backtab>") 'indent-for-tab-command)
  (global-set-key (kbd "<S-delete>") (lambda () (interactive) (insert "\\")))
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (define-key key-translation-map (kbd "<f12>") (kbd "C-g"))

  (use-package ryo-modal
    :commands ryo-modal-mode
    :bind ("M-m" . ryo-modal-mode) 
    :init 
    (defvar weiss/disable-ryo-list)
    (setq weiss/disable-ryo-list
          '(magit-mode magit-status-mode magit-revision-mode snails-mode ediff-mode telega-chat-mode telega-root-mode org-agenda-mode))

    (defun weiss-check-ryo ()
      "enable or disable ryo by disable-ryo-list"
      (interactive)
      (if (member major-mode weiss/disable-ryo-list)
          (when ryo-modal-mode (ryo-modal-mode -1))
        (unless ryo-modal-mode (ryo-modal-mode 1))    
        )
      )

    (add-to-list 'weiss/after-buffer-change-function-list 'weiss-check-ryo)
    (add-to-list 'weiss/after-buffer-change-function-list 'weiss-enable-hl-line)
    (add-to-list 'weiss/after-buffer-change-function-list 'weiss-check-cursor-type)

    (add-to-list 'weiss/after-major-mode-function-list 'weiss-check-ryo)
    (add-to-list 'weiss/after-major-mode-function-list 'weiss-enable-hl-line)
    (add-to-list 'weiss/after-major-mode-function-list 'weiss-check-cursor-type)

    (setq ryo-modal-cursor-color weiss/cursor-color)
    :config
    ;; the default cursor face config for cursor is wrong before dump.
    (defconst ryo-modal-default-cursor-color weiss/cursor-color  "Default color of cursor.")
    (defun ryo-modal-restart ()
      "restart ryo modal"
      (interactive)
      (ryo-modal-mode -1)
      (ryo-modal-mode 1)
      )

    (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist)
    )

  (use-package weiss-select-mode)
  (use-package weiss-keybinding-functions)
  (use-package weiss-temp-insert-mode)
  (use-package weiss-overriding-ryo-mode)
  (use-package weiss-origin-mode
    :config
    (add-to-list 'weiss-origin-keep-keys '(telega-chat-mode . ("<deletechar>")))
    (add-to-list 'weiss-origin-keep-keys '(org-agenda-mode . ("<deletechar>" "9" "-" "s")))

    (let ((hook-list '(
                       org-agenda-mode-hook
                       magit-status-mode-hook
                       magit-mode-hook
                       telega-chat-mode-hook
                       telega-root-mode-hook
                       image-mode-hook
                       )))
      (dolist (x hook-list)
        (add-hook x 'weiss-origin-mode-enable))
      )  


    (defun weiss-enable-origin-mode-only-in-fundamental-mode ()
      "only enable weiss-origin-mode when current major mode is plain fundamental-mode"
      (when (and (not weiss-origin-mode) (eq major-mode 'fundamental-mode))
        (weiss-origin-mode 1)
        )
      )
    ;; (add-to-list 'weiss/after-buffer-change-function-list 'weiss-enable-origin-mode-only-in-fundamental-mode)
    )


#+end_src



#+RESULTS:
: ryo-modal-mode
*** hydra
#+begin_src elisp
  (use-package hydra)

  (defhydra hydra-kmacro (:foreign-keys run :hint nil)
    "
  _f_ call with func    _d_ call in region             _C-g_ deactivate-mark
  _e_ call infinite     _s_ call                         _q_ Quit
  "
    ("f" weiss-call-kmacro)
    ("e" weiss-call-kmacro-infinite :exit t)
    ("s" call-last-kbd-macro)
    ("d" weiss-call-kmacro-dwim  :exit t)
    ("1" weiss-apply-macro-1)
    ("2" weiss-apply-macro-2)
    ("3" weiss-apply-macro-3)
    ("4" weiss-apply-macro-4)
    ("5" weiss-apply-macro-5)
    ("6" weiss-apply-macro-6)
    ("7" weiss-apply-macro-7)
    ("8" weiss-apply-macro-8)
    ("9" weiss-apply-macro-9)
    ("0" weiss-apply-macro-0)
    ("C-g" (deactivate-mark))  
    ("q" nil nil)
    )



























  (defhydra hydra-error (global-map "M-g")
    "goto-error"
    ("h" first-error "first")
    ("j" next-error "next")
    ("k" previous-error "prev")
    ("v" recenter-top-bottom "recenter")
    ("q" nil "quit"))

  (defhydra hydra-resize-window (global-map "M-w")
    "resize window"
    ("k" shrink-window "height+")
    ("j" enlarge-window "height-")
    ("h" shrink-window-horizontally "width-")
    ("l" enlarge-window-horizontally "width+")
    ("q" nil "quit")
    )
  (defhydra hydra-multiple-cursors-weiss (global-map "M-c" :hint nil)
    "
       ^Up^            ^Down^        ^Miscellaneous^
  ----------------------------------------------
  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit"
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("3" next-line)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("q" nil))

  (defun weiss-test ()
    "DOCSTRING"
    (interactive)
    (set-temporary-overlay-map mc/mark-more-like-this-extended-keymap t))

  (defhydra hydra-multiple-cursors (:color blue :hint nil)
    "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("s" mc/mark-all-in-region-regexp :exit t)
    ("0" mc/insert-numbers :exit t)
    ("A" mc/insert-letters :exit t)
    ("<mouse-1>" mc/add-cursor-on-click)
    ;; Help with click recognition in this hydra
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore)
    ("q" nil))
#+end_src
*** quick-insert
#+begin_src elisp
  (defvar quick-insert-new-line nil)
  (defvar quick-insert-if-exit-ryo nil)

  ;; comes from xah-fly-key
  (defun weiss-insert-bracket-pair (@left-bracket @right-bracket &optional @new-line)
    "Insert brackets around selection, word, at point, and maybe move cursor in between. If @new-line is non-nil, insert then with new line.
  • if there's a region, add brackets around region.
  • If cursor is at end of a word or buffer, one of the following will happen, insert brackets directly
  • wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)
  "
    (if (use-region-p)
        (progn ; there's active region
          (let (
                ($p1 (region-beginning))
                ($p2 (region-end)))
            (goto-char $p2)
            (when @new-line (insert "\n"))
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (when @new-line (insert "\n"))
            (goto-char (+ $p2 2))))
      (progn ; no text selection
        (let ($p1 $p2)
          (cond
           ((or ; cursor is not around "word"
             (not (looking-back "[w_\\-]"))
             (looking-at "[^-_[:alnum:]]")
             (eq (point) (point-max)))
            (progn
              (setq $p1 (point) $p2 (point))
              (if @new-line
                  (insert @left-bracket "\n\n" @right-bracket)
                (insert @left-bracket @right-bracket)  
                )            
              (search-backward @right-bracket)
              (when @new-line (previous-line))
              ))
           (t (progn
                ;; wrap around “word”. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese chars
                (skip-chars-backward "-_[:alnum:]")
                (setq $p1 (point))
                (skip-chars-forward "-_[:alnum:]")
                (setq $p2 (point))
                (goto-char $p2)
                (when @new-line (insert "\n"))
                (insert @right-bracket)
                (goto-char $p1)
                (insert @left-bracket)
                (when @new-line (insert "\n"))
                (goto-char (+ $p2 (length @left-bracket)))))))))
    (when quick-insert-if-exit-ryo
      (ryo-modal-mode -1)
      (setq quick-insert-if-exit-ryo nil)
      )
    )

  (let (
        (quick-insert
         '(
           ("j" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "(" ")" quick-insert-new-line)))
            :name "insert paren")
           ("k" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "[" "]" quick-insert-new-line)))
            :name "insert square bracket"
            )
           ("l" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "{" "}" quick-insert-new-line)))
            :name "insert brace"
            )
           (";" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\"" "\"" quick-insert-new-line)))
            :name "insert double quote"
            )

           ("'" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "'" "'" quick-insert-new-line)))
            :name "insert single quote")
           ("9" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\\(" "\\)" quick-insert-new-line)))
            :name "insert escape paren"
            )
           ("[" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\\[" "\\]" quick-insert-new-line)))
            :name "insert escape square bracket"
            )
           ("]" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\\{" "\\}" quick-insert-new-line)))
            :name "insert escape brace"
            )
           ("-" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "_" "_" quick-insert-new-line)))
            :name "insert underline"
            )
           ("=" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "=" "=" quick-insert-new-line)))
            :name "insert equals"
            )
           ("a" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "|" "|" quick-insert-new-line)))
            :name "insert bar"
            )
           ("q" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "`" "`" quick-insert-new-line)))
            :name "insert markdown quote"
            )
           ("w" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "`" "'" quick-insert-new-line)))
            :name "insert elisp quote"
            )
           ("s" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "*" "*" quick-insert-new-line)))
            :name "insert star"
            )
           ("/" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "/" "/" quick-insert-new-line)))
            :name "insert slash"
            )
           ("4" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "$" "$" quick-insert-new-line)))
            :name "insert dollar"
            )
           ("7" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "&" "&" quick-insert-new-line)))
            :name "insert and"
            )
           ("m" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "<" ">" quick-insert-new-line)))
            :name "insert angle bracket"
            )
           ("<deletechar>" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\\" "\\" quick-insert-new-line)))
            :name "insert backslash"
            )
           ("RET" ignore
            :then ((lambda () (interactive) (weiss-insert-bracket-pair "\\n" "" quick-insert-new-line)))
            :name "insert newline"
            )

           )
         ))
    (eval `(ryo-modal-keys          
            ("<escape>" ,quick-insert)          
            ))
    (eval `(ryo-modal-keys
            ("<escape> n" ,quick-insert
             :first '((lambda () (interactive) (setq quick-insert-new-line t)))
             :then '((lambda () (interactive)
                       (setq quick-insert-new-line nil)
                       (weiss-indent-nearby-lines)
                       (indent-according-to-mode)
                       ))
             )          
            ))
    )
  (defun weiss-quick-insert ()
    "Use quick insert ryo keymap in normal mode"
    (interactive)
    (ryo-modal-mode 1)
    (setq quick-insert-if-exit-ryo t)
    ;; simulate escape key
    (setq unread-command-events (listify-key-sequence (kbd "<escape>")))
    )
  (global-set-key (kbd "<escape>") 'weiss-quick-insert)
#+end_src

#+RESULTS:
: weiss-quick-insert
*** ryo-bind-keys
Ryo-modal-mode can not bind void functions, so we bind keys at last.
#+begin_src elisp :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
  (ryo-modal-keys
   (:mc-all t)
   ("RET" newline :first '(deactivate-mark) :mode 'prog-mode)
   ("RET" newline :first '(deactivate-mark) :mode 'html-mode)
   ("'"  ryo-modal-repeat)
   (","  xah-backward-left-bracket)
   ("-"  weiss-switch-to-same-side-frame)
   ("="  xah-cycle-hyphen-underscore-space)
   ("."  xah-forward-right-bracket)
   (";"  rotate-text)
   ("/"  weiss-mark-brackets)
   ("\\"  nil)
   ;; ("["  origami-recursively-toggle-node)
   ;; ("]"  weiss-other-frame)
   ;; ("}"  hs-show-all)
   ;; ("`"  other-frame)

   ;; ("<backtab>"  weiss-indent)
   ("V"  weiss-paste-with-linebreak)
   ;;  ("!"  rotate-text)
   ;; ("#"  xah-backward-quote)
   ;; ("$"  xah-forward-punct)

   ("1"  scroll-down)
   ("2"  scroll-up)
   ("3"  weiss-delete-other-window)
   ("4"  split-window-below)
   ("5"  weiss-test)
   ("6"  mark-defun :then '(weiss-select-mode-turn-on))
   ("7"  xah-select-text-in-quote)
   ("8"  weiss-select-sexp :then '(weiss-select-mode-turn-on))
   ("9"  weiss-switch-to-otherside-top-frame)
   ("0"  weiss-switch-buffer-or-otherside-frame-without-top)

   ;; ("a"  weiss-open-line-and-indent :then '(weiss-indent-nearby-lines))
   ("a"  weiss-open-line-and-indent)
   ("b"  xah-toggle-letter-case)
   ("c"  xah-copy-line-or-region)
   ("d"  weiss-cut-line-or-delete-region)
   ("e"  weiss-delete-backward-with-region)
   ("f"  weiss-before-insert-mode :exit t)
   ("g"  weiss-universal-argument)
   ("h"  weiss-select-line-downward )
   ("i"  weiss-left-key)
   ("j"  weiss-down-key)
   ("k"  weiss-up-key)
   ("l"  weiss-right-key)
   ("m"  er/expand-region :then '(weiss-select-mode-turn-on))
   ("n"  swiper-isearch)
   ("o"  weiss-expand-region-by-word :first '(weiss-select-mode-turn-on))
   ("p"  weiss-insert-line :exit t)
   ("q"  weiss-temp-insert-mode :exit t)
   ("r"  weiss-delete-forward-with-region)
   ("s"  snails)
   ("t" (
         ("e" ignore
          :then ((lambda () (interactive) (weiss--execute-kbd-macro "C-c C-c")))
          :name "C-c C-c"
          )
         ("k" ignore
          :then ((lambda () (interactive) (weiss--execute-kbd-macro "C-c C-k")))
          :name "C-c C-k"
          )
         ("u" ignore
          :then ((lambda () (interactive) (weiss--execute-kbd-macro "C-c '")))
          :name "C-c '"
          )         
         ("o" ignore
          :then ((lambda () (interactive) (weiss--execute-kbd-macro "C-c C-o")))
          :name "C-c C-o"
          )
         ("l" ignore
          :then ((lambda () (interactive) (weiss--execute-kbd-macro "C-c C-l")))
          :name "C-c C-l"
          )
         ))
   ("u"  weiss-delete-or-add-parent-sexp)
   ("v"  xah-paste-or-paste-previous)
   ("w"  xah-shrink-whitespaces)
   ("x"  weiss-exange-point-or-beginning-of-line)
   ("y"  undo)
   ("z"  weiss-comment-dwim)
   ("<escape> ," previous-buffer)
   ("<escape> ." next-buffer)
   )

  (ryo-modal-major-mode-keys
   'emacs-lisp-mode
   ("t t"  weiss-move-next-bracket-contents)
   )

  (ryo-modal-major-mode-keys
   'lisp-interaction-mode
   ("t t"  weiss-move-next-bracket-contents)
   )

  (ryo-modal-command-then-ryo "M-m" 'weiss-select-mode-disable weiss-select-mode-map)

  (let ((leader-keymap
         '(
           (","  (
                  ("e"  weiss-execute-buffer)
                  ("c"  quickrun-compile-only)
                  ("d"  eval-defun)
                  ("m"  weiss-eval-last-sexp-this-line)
                  ("r"  eval-expression)
                  ("f"  eval-region)
                  ("x"  save-buffers-kill-terminal)
                  ("5"  revert-buffer)
                  ))
           ("." (
                 ("p"  narrow-to-page)
                 ("x"  widen)
                 ("r"  narrow-to-region)
                 ("d"  narrow-to-defun)                 
                 ))
           ("-"  xah-cycle-hyphen-underscore-space)
           (";"  save-buffer)
           ("3"  delete-window)
           ("4"  split-window-right)
           ("5"  weiss-refresh)
           ;; ("6"  xah-upcase-sentence)
           ("9"  ignore
            :name "copy whole buffer"
            :then ((lambda () (interactive) (kill-new (buffer-substring)))))
           ("a"  mark-whole-buffer :then (weiss-select-mode-turn-on))
           ("b"  xah-toggle-previous-letter-case)
           ("c"  (
                  ("a" weiss-kill-append)
                  ("b" ignore
                   :name "copy whole buffer"
                   :then ((lambda () (interactive) (kill-new (buffer-string)))))
                  ("e" weiss-exchange-region-kill-ring-car)
                  ("f" ignore
                   :name "copy file name"
                   :then ((lambda () (interactive) (kill-new (buffer-file-name)))))
                  ("k" save-buffers-kill-terminal)
                  ("p" xah-copy-file-path)
                  )
            )
           ("d" (
                 ("a"  weiss-custom-daily-agenda)
                 ("b"  weiss-save-current-content)
                 ("c"  org-roam-capture)
                 ("d"  weiss-switch-and-bookmarks-search)
                 ("f"  org-roam-find-file)
                 ("j" yasdcv-translate-input)
                 ("l"  list-buffers)
                 ("m"  magit-status)
                 ("t"  org-todo-list)
                 ("n"  xah-new-empty-buffer)
                 ("o"  xah-open-file-at-cursor)
                 ("s" yasdcv-translate-at-point)
                 ("1"  org-roam-dailies-capture-today)
                 ("2"  org-roam-dailies-capture-tomorrow)
                 ("3"  org-roam-dailies-capture-date)
                 ("8"  org-roam-dailies-find-date)
                 ("9"  org-roam-dailies-find-yesterday)
                 ("0"  org-roam-dailies-find-today)
                 ("-"  org-roam-dailies-find-tomorrow)
                 ("w"  xah-open-in-external-app)
                 ))
           ("e" (
                 ("b"  org-babel-tangle)
                 ("c"  org-capture)
                 ("v"  ignore
                  :then ((lambda () (interactive) (require 'dired-video-preview-mode)(dired-video-preview-mode)))
                  :name "dired-video-preview-mode")
                 ))
           ("f"  execute-extended-command)
           ("g"  kill-line)
           ("h"  beginning-of-buffer)
           ("i" (
                 ("d"  weiss-insert-date)
                 ("e"  find-file)
                 ("f"  counsel-fzf)
                 ("j"  yasdcv-translate-input)
                 ("m"  all-the-icons-insert)
                 ("p"  bookmark-set)
                 ("s"  yasdcv-translate-at-point)
                 ("v"  counsel-yank-pop)
                 ))
           ("j" (
                 ("K"  Info-goto-emacs-key-command-node)
                 ("a"  apropos-command)
                 ("b"  describe-bindings)
                 ("c"  describe-char)
                 ("d"  apropos-documentation)
                 ("e"  view-echo-area-messages)
                 ("f"  describe-function)
                 ("g"  info-lookup-symbol)
                 ("h"  describe-face)
                 ("i"  info)
                 ("j"  man)
                 ("k"  describe-key)
                 ("l"  view-lossage)
                 ("m"  describe-mode)
                 ("n"  apropos-value)
                 ("o"  describe-language-environment)
                 ("p"  finder-by-keyword)
                 ("r"  apropos-variable)
                 ("s"  describe-syntax)
                 ("u"  elisp-index-search)
                 ("v"  describe-variable)
                 ("x"  describe-coding-system)
                 ("z"  Info-goto-emacs-command-node)
                 )
            )
           ("k" (
                 ("SPC"  xah-clean-whitespace)
                 ("TAB" move-to-column)
                 ("-"  xah-cycle-hyphen-underscore-space)
                 ("1"  xah-append-to-register-1)
                 ("2"  xah-clear-register-1)
                 ("3"  xah-copy-to-register-1)
                 ("4"  xah-paste-from-register-1)
                 ("8"  xah-clear-register-1)
                 ("7"  xah-append-to-register-1)
                 ("0"  sort-numeric-fields)
                 ("S"  reverse-region)
                 ("c"  weiss-convert-sql-output-to-table)
                 ("d"  delete-non-matching-lines)
                 ("e"  list-matching-lines)
                 ("f"  goto-line)
                 ("i"  weiss-indent)
                 ("j"  kill-current-buffer)
                 ("l"  xah-escape-quotes)
                 ("m"  xah-make-backup-and-save)
                 ("n"  repeat-complex-command)
                 ("q"  xah-reformat-lines)
                 ("r"  anzu-query-replace-regexp)
                 ("s"  sort-lines)
                 ("t"  repeat)
                 ("u"  delete-matching-lines)
                 ("y"  delete-duplicate-lines)
                 ))
           ("l" (
                 ("SPC"  whitespace-mode)
                 ("." toggle-frame-fullscreen)
                 ("0" shell-command-on-region)
                 ("8" ignore :then ((lambda ()(interactive) (if org-hide-emphasis-markers
                                                                (setq org-hide-emphasis-markers nil)
                                                              (setq org-hide-emphasis-markers t)
                                                              ))) :name "org-toggle-emphasis-markers")
                 ("C"  toggle-case-fold-search)
                 ("b"  toggle-debug-on-error)
                 ("c"  dired-collapse-mode)
                 ;; ("e"  ignore :then ((lambda () (interactive) (unless (featurep 'aweshell) (require 'aweshell))(eshell))) :name "eshell")
                 ("e"  eshell)
                 ("h"  weiss-toggle-hl-line)
                 ;; ("l"  visual-line-mode)             ;wrap-line
                 ("l"  highlight-symbol)             ;wrap-line
                 ("m"  shell-command)
                 ("n"  display-line-numbers-mode)
                 ("p"  sql-postgres)
                 ("r"  dired-toggle-read-only :exit t)
                 ("s"  sudo-edit)
                 ("w"  toggle-word-wrap)
                 ))
           ("m"  dired-jump)
           ("n"  end-of-buffer)
           ("o" (
                 ("t"  telega)
                 ("v" yank-rectangle)
                 ("n" mc/mark-next-like-this)
                 ("a" mc/mark-all-like-this)
                 ("s" weiss-start-kmacro)
                 ;; ("l" weiss-kmacro-insert-letters)
                 ("k" weiss-deactivate-mark)
                 ("e" weiss-end-kmacro)
                 ("c" kmacro-call-macro)
                 ("SPC" hydra-multiple-cursors-weiss/body)
                 ))
           ("p"  recenter-top-bottom)
           ("q"  xah-fill-or-unfill)
           ("r"  anzu-query-replace)
           ("s"  exchange-point-and-mark)
           ("t"  xah-show-kill-ring)
           ("u"  isearch-forward)
           ("v" (
                 ("s"  start-kbd-macro)
                 ("e"  end-kbd-macro)
                 ("m"  kmacro-end-and-call-macro)
                 ("c"  call-last-kbd-macro)
                 ("n"  weiss-call-kmacro-multi-times)
                 ))
           ("w" (
                 ("f"  xref-find-definitions)
                 ("m"  list-bookmarks)
                 ("n"  weiss-new-frame)
                 ("t"  weiss-test)
                 ("l"  xref-pop-marker-stack)
                 ("y"  winner-undo)                  ;windows setting
                 ("r"  winner-redo)
                 ("k"  delete-frame :then ((lambda () (interactive) (weiss-update-top-windows t))))
                 ("o"  org-babel-tangle-jump-to-org)
                 ))
           ;; ("x"  xah-cut-all-or-region)
           ;; ("y"  xah-search-current-word)
           )
         ))
    (eval `(ryo-modal-keys
            ("SPC" ,leader-keymap)
            ("<deletechar>" ,leader-keymap)
            ))
    )



#+end_src
** end
#+begin_src elisp
  (provide 'weiss-keybinding)
#+end_src

#+RESULTS:
: weiss-keybinding

* after dump
:PROPERTIES:
:header-args: :tangle after-dump/weiss-after-dump.el :mkdirp yes :comments both :shebang   ;; -*- lexical-binding: t -*-
:END:

** tramp
#+begin_src elisp
;; Tramp ivy interface
(setq remote-file-name-inhibit-cache nil)

(use-package sudo-edit)

(use-package counsel-tramp
  :bind (:map counsel-mode-map
              ("C-c c T" . counsel-tramp)))

(use-package docker-tramp)
#+end_src
** [[font lock face]]
** recentf
#+begin_src elisp
  ;; Recent files
  ;; recentf-cleanup will update recentf-list
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :preface
    (defun snug/recentf-save-list-silence ()
      (interactive)
      (let ((message-log-max nil))
        (if (fboundp 'shut-up)
            (shut-up (recentf-save-list))
          (recentf-save-list)))
      (message ""))
    (defun snug/recentf-cleanup-silence ()
      (interactive)
      (let ((message-log-max nil))
        (if (fboundp 'shut-up)
            (shut-up (recentf-cleanup))
          (recentf-cleanup)))
      (message ""))
    :init
    (load (weiss--get-config-file-path "recentf"))
    (setq recentf-save-file (weiss--get-config-file-path "recentf"))
    :config
    (run-at-time nil (* 5 60) 'snug/recentf-save-list-silence)
    (run-at-time nil (* 5 60) 'snug/recentf-cleanup-silence)
    (setq
     recentf-max-menu-items 150
     recentf-max-saved-items 300
     ;; recentf-auto-cleanup '60
     ;; Recentf blacklist
     recentf-exclude '(
                       ".*autosave$"
                       "/ssh:"
                       ;; "/sudo:"
                       "recentf$"
                       ".*archive$"
                       ".*.jpg$"
                       ".*.png$"
                       ".*.gif$"
                       ".*.mp4$"
                       ".cache"
                       "cache"
                       "<none>.tex"
                       "frag-master.tex"
                       "_region_.tex"
                       ))
    )

  (load (weiss--get-config-file-path "recentf"))
#+end_src
** misc
#+begin_src elisp
  (bookmark-load "/home/weiss/.emacs.d/bookmarks" t t t)
  (setq bookmark-save-flag 1)

  (ignore-errors (savehist-mode 1))
  (save-place-mode 1)

  (dbus-init-bus :session)   ; for EAF DUMP

  (setq weiss-right-top-window (selected-frame))
  (setq weiss-left-top-window (make-frame-command))
  (select-frame-set-input-focus weiss-right-top-window)

  (setq gc-cons-threshold (* (expt 1024 2) 32)
        gc-cons-percentage 0.5)
#+end_src

#  LocalWords:  appt
