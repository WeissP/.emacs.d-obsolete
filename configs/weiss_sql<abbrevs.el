(when (boundp 'sql-mode-abbrev-table)
  (clear-abbrev-table sql-mode-abbrev-table))

(define-abbrev-table 'sql-mode-abbrev-table
  '(
    ("all" "ALL" weiss--ahf)
    ("and" "AND ")
    ("as" "AS ")
    ("from" "FROM ")
    ("at" "ALTER TABLE ▮" weiss--ahf)
    ("av" "AVG(▮)" weiss--ahf)
    ("ct" "COUNT(*▮)" weiss--ahf)
    ("di" "DISTINCT")
    ("dt" "DROP TABLE ▮" weiss--ahf)
    ("ex" "EXISTS" weiss--ahf)
    ("EXISTS" "EXISTS (\nSELECT *\nFROM ▮\nWHERE\n)" weiss--ahf-indent)
    ("gb" "GROUP BY ")
    ("ii" "INSERT INTO ▮" weiss--ahf)
    ("iiv" "INSERT INTO ▮() VALUES\n()" weiss--ahf-indent)
    ("li" "LIMIT 10" weiss--ahf)
    ("ma" "MAX(▮)" weiss--ahf)
    ("mi" "MIN(▮)" weiss--ahf)
    ("nt" "CREATE TABLE ▮ \n(\n\n)" weiss--ahf-indent)
    ("nv" "CREATE VIEW ▮ AS\n(\n\n)" weiss--ahf-indent)
    ("nf" "CREATE OR REPLACE FUNCTION ▮ ()\nRETURNS  AS $$\nDECLARE\nBEGIN\n\nRETURN;\nEND; $$ LANGUAGE plpgsql;\n" weiss--ahf-indent)
    ("ntr" "CREATE TRIGGER ▮ \nBEFORE INSERT ON \nFOR EACH ROW \nEXECUTE PROCEDURE ;" weiss--ahf-indent)
    ("ob" "ORDER BY ")
    ("ov" "OVER (▮) AS" weiss--ahf)
    ("pb" "PARTITION BY ")
    ("sf" "SELECT \nFROM ▮" weiss--ahf-indent)
    ("sfw" "SELECT \nFROM ▮\nWHERE " weiss--ahf-indent)
    ("sl" "SELECT ")
    ("si" "SELECT ▮ INTO")
    ("st" "SELECT * FROM ▮ LIMIT 10" weiss--ahf)
    ("un" "UNION ")
    ("ua" "UNION ALL ")
    ("wh" "WHERE ")
    ("rn" "RAISE NOTICE '▮'" weiss--ahf)
    ("lj" "INNER JOIN ")
    ("ljo" "INNER JOIN ▮ ON " weiss--ahf)
    ("llj" "LEFT OUTER JOIN ▮ ON " weiss--ahf)
    ("lrj" "RIGHT OUTER JOIN ▮ ON " weiss--ahf)
    ("sum" "SUM(▮)" weiss--ahf)
    ("max" "MAX(▮)" weiss--ahf)
    ("not" "NOT ")
    ("in" "IN ")    
    ("or" "OR ")
    ("jup" "UPDATE ▮ SET WHERE;" weiss--ahf)
    ("elsif" "ELSIF ▮ THEN" weiss--ahf)
    ("if" "IF ▮ THEN\n\nEND IF;" weiss--ahf-indent)
    ("then" "THEN " weiss--ahf-indent)
    ("case" "CASE\nWHEN ▮THEN\nWHEN THEN\nELSE\nEND" weiss--ahf-indent)
    ("when" "WHEN " weiss--ahf-indent)
    ("where" "WHERE ")
    ("into" "INTO ")
    ("with" "WITH ▮ AS (\n\n)" weiss--ahf-indent)
    ("withr" "WITH RECURSIVE ▮ () \nAS (\n\nUnion ALL\n\n)" weiss--ahf-indent)
    )
  )

(provide 'weiss_sql<abbrevs)
