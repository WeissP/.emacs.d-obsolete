(when (boundp 'go-mode-abbrev-table)
  (clear-abbrev-table go-mode-abbrev-table))

(define-abbrev-table 'go-mode-abbrev-table
  '(
    ("ca" "case ▮:" weiss--ahf)
    ("d" "defer ▮" weiss--ahf)
    ("de" "default:\n▮" weiss--ahf-indent)
    ("e" ":= ▮" weiss--ahf)
    ("en" "errors.New(\"▮\")" weiss--ahf)
    ("f" "func ▮(){\n\n}" weiss--ahf-indent)
    ("fr" "for i, x := range ▮{\n\n}" weiss--ahf-indent)
    ("fi" "for i := 0; i < ▮; i++ {\n\n}" weiss--ahf-indent)
    ("fm" "for k, v := range ▮{\n\n}" weiss--ahf-indent)
    ("ie" "if err != nil {\n▮\n}" weiss--ahf-indent)
    ("im" "import (\n\"▮\"\n)" weiss--ahf-indent)
    ("la" "<-" weiss--ahf)
    ("pa" "package ▮" weiss--ahf)
    ("pr" "fmt.Printf(\"%v\", ▮)")
    ("prn" "fmt.Println(\"▮\")")
    ("rt" "return ▮" weiss--ahf)
    ("rc" "regexp.MustCompile(`▮`)" weiss--ahf)
    ("st" "%T" weiss--ahf)
    ("if" "if ▮ {\n\n}" weiss--ahf-indent)
    ("sv" "%v" weiss--ahf)
    ("sf" "fmt.Sprintf(\"%v\",▮)" weiss--ahf)
    ("ti" "type ▮ interface {\n\n}" weiss--ahf-indent)
    ("ts" "type ▮ struct {\n\n}" weiss--ahf-indent)
    ("tf" "type ▮ func()" weiss--ahf-indent)
    ("v" "var ▮" weiss--ahf)
    ("switch" "switch ▮ {\ncase :\n\ndefault:\n}" weiss--ahf-indent)
    ))

(provide 'weiss_go<abbrevs)
